(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  CommonFloor.Project = (function(superClass) {
    extend(Project, superClass);

    function Project() {
      return Project.__super__.constructor.apply(this, arguments);
    }

    Project.prototype.urlRoot = function() {
      return BASERESTURL + '/project/' + this.project_id;
    };

    Project.prototype.parse = function(response) {
      var resp;
      resp = response.data;
      return resp;
    };

    Project.prototype.setProjectAttributes = function(project_id) {
      this.project_id = project_id;
      if (jQuery.isEmptyObject(this.toJSON()) || parseInt(this.get('id')) !== parseInt(project_id)) {
        return this.fetch({
          async: false,
          success: (function(_this) {
            return function(collection, response) {
              if (response === 0 || jQuery.isEmptyObject(response)) {
                return _this.clear();
              }
            };
          })(this)
        });
      }
    };

    Project.prototype.resetEntitites = function() {
      unitCollection.reset();
      return settings.clear();
    };

    Project.prototype.checkRotationView = function() {
      var breakpoints, transitionImages;
      transitionImages = [];
      breakpoints = project.get('breakpoints');
      if (parseInt(breakpoints.length) > 1) {
        this.set('rotation', 1);
      } else {
        this.set('rotation', 0);
      }
      return this.get('rotation');
    };

    return Project;

  })(Backbone.Model);

  window.project = new CommonFloor.Project;

}).call(this);

//# sourceMappingURL=../../frontend/entities/project.entity.js.map
(function() {
  var BunglowVariant, BunglowVariantCollection,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BunglowVariant = (function(superClass) {
    extend(BunglowVariant, superClass);

    function BunglowVariant() {
      return BunglowVariant.__super__.constructor.apply(this, arguments);
    }

    BunglowVariant.prototype.findUnitPrice = function(unit_model) {
      var basicCost, basic_cost, unitVarinatModel;
      basicCost = "";
      if (!(unit_model instanceof Backbone.Model) || unit_model === "") {
        return;
      }
      unitVarinatModel = bunglowVariantMasterCollection.findWhere({
        'id': parseInt(unit_model.get('unit_variant_id'))
      });
      if (unitVarinatModel !== void 0) {
        basic_cost = (parseFloat(unitVarinatModel.get('per_sq_ft_price'))) * parseFloat(unitVarinatModel.get('super_built_up_area'));
        basicCost = basic_cost.toFixed(2);
      }
      return basicCost;
    };

    return BunglowVariant;

  })(Backbone.Model);

  BunglowVariantCollection = (function(superClass) {
    extend(BunglowVariantCollection, superClass);

    function BunglowVariantCollection() {
      return BunglowVariantCollection.__super__.constructor.apply(this, arguments);
    }

    BunglowVariantCollection.prototype.model = BunglowVariant;

    BunglowVariantCollection.prototype.setBunglowVariantAttributes = function(data) {
      bunglowVariantCollection.reset(data);
      return bunglowVariantMasterCollection.reset(data);
    };

    BunglowVariantCollection.prototype.getBunglowUnits = function() {
      var newUnits, units;
      units = [];
      newUnits = [];
      bunglowVariantCollection.each(function(model) {
        var bunglowUnits;
        bunglowUnits = unitCollection.where({
          unit_variant_id: model.get('id')
        });
        return units.push(bunglowUnits);
      });
      $.each(units, function(index, value) {
        return newUnits = $.merge(newUnits, value);
      });
      return newUnits;
    };

    BunglowVariantCollection.prototype.getBunglowMasterUnits = function() {
      var newUnits, units;
      units = [];
      newUnits = [];
      bunglowVariantMasterCollection.each(function(model) {
        var bunglowUnits;
        bunglowUnits = unitMasterCollection.where({
          unit_variant_id: model.get('id')
        });
        return units.push(bunglowUnits);
      });
      $.each(units, function(index, value) {
        return newUnits = $.merge(newUnits, value);
      });
      return newUnits;
    };

    BunglowVariantCollection.prototype.getVillaUnitTypes = function() {
      var unit_types;
      unit_types = [];
      bunglowVariantMasterCollection.each(function(item) {
        var unitTypeModel;
        unitTypeModel = unitTypeMasterCollection.findWhere({
          'id': item.get('unit_type_id')
        });
        if ($.inArray(item.get('unit_type_id'), unit_types) === -1) {
          return unit_types.push(parseInt(unitTypeModel.get('id')));
        }
      });
      return unit_types;
    };

    BunglowVariantCollection.prototype.getVillaAttributes = function() {
      var attributes;
      attributes = [];
      bunglowVariantMasterCollection.each(function(item) {
        return $.each(item.get('variant_attributes'), function(index, value) {
          if (_.isArray(value)) {
            return $.each(value, function(ind, val) {
              if ($.inArray(val, attributes) === -1) {
                return attributes.push(val);
              }
            });
          } else {
            if ($.inArray(value, attributes) === -1) {
              return attributes.push(value);
            }
          }
        });
      });
      return attributes;
    };

    return BunglowVariantCollection;

  })(Backbone.Collection);

  window.bunglowVariantCollection = new BunglowVariantCollection;

  window.bunglowVariantMasterCollection = new BunglowVariantCollection;

  window.bunglowVariant = new BunglowVariant;

}).call(this);

//# sourceMappingURL=../../frontend/entities/bunglow.variant.js.map
(function() {
  var Settings,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Settings = (function(superClass) {
    extend(Settings, superClass);

    function Settings() {
      return Settings.__super__.constructor.apply(this, arguments);
    }

    Settings.prototype.generateFloorRise = function(building) {
      var buildingModel, cost, floorrise, floors, i, sum;
      if (building === "") {
        return;
      }
      buildingModel = buildingMasterCollection.findWhere({
        'id': building
      });
      i = 0;
      floors = buildingModel.get('no_of_floors');
      floorrise = [];
      cost = settings.get('floor_rise');
      sum = 0 + cost;
      while (i < 1) {
        floorrise[i] = 0;
        i++;
      }
      while (i <= floors) {
        floorrise[i] = sum;
        sum = sum + cost;
        i++;
      }
      return floorrise;
    };

    Settings.prototype.setSettingsAttributes = function(data) {
      return settings.set(data);
    };

    return Settings;

  })(Backbone.Model);

  window.settings = new Settings;

}).call(this);

//# sourceMappingURL=../../frontend/entities/settings.entity.js.map
(function() {
  var Unit, UnitCollection,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Unit = (function(superClass) {
    extend(Unit, superClass);

    function Unit() {
      return Unit.__super__.constructor.apply(this, arguments);
    }

    Unit.prototype.getUnitDetails = function(unit_id) {
      var attributes, id, price, type, unit, unitType, unitTypeModel, unitVariant;
      id = parseInt(unit_id);
      unit = unitMasterCollection.findWhere({
        id: id
      });
      unitVariant = 0;
      type = '';
      price = 0;
      attributes = [];
      if (bunglowVariantMasterCollection.get(unit.get('unit_variant_id')) !== void 0) {
        unitVariant = bunglowVariantMasterCollection.findWhere({
          'id': unit.get('unit_variant_id')
        });
        type = 'villa';
        price = window.bunglowVariant.findUnitPrice(unit);
        attributes = unitVariant.get('variant_attributes');
      } else if (apartmentVariantMasterCollection.get(unit.get('unit_variant_id')) !== void 0) {
        unitVariant = apartmentVariantMasterCollection.findWhere({
          'id': unit.get('unit_variant_id')
        });
        unitTypeModel = unitTypeMasterCollection.findWhere({
          'id': parseInt(unitVariant.get('unit_type_id'))
        });
        type = 'apartment';
        if (window.propertyTypes[unitTypeModel.get('property_type_id')] === 'Penthouses') {
          type = 'Penthouse';
        }
        price = window.apartmentVariant.findUnitPrice(unit);
        attributes = unitVariant.get('variant_attributes');
      } else if (plotVariantMasterCollection.get(unit.get('unit_variant_id')) !== void 0) {
        unitVariant = plotVariantMasterCollection.findWhere({
          'id': unit.get('unit_variant_id')
        });
        unitVariant.set('super_built_up_area', unitVariant.get('size'));
        type = 'plot';
        price = window.plotVariant.findUnitPrice(unit);
        attributes = unitVariant.get('variant_attributes');
      }
      unitType = unitTypeMasterCollection.findWhere({
        'id': unit.get('unit_type_id')
      });
      return [unitVariant, unitType, type, price, attributes];
    };

    Unit.prototype.getFilterUnitDetails = function(unit_id) {
      var attributes, id, price, type, unit, unitType, unitVariant;
      id = parseInt(unit_id);
      unit = unitCollection.findWhere({
        id: id
      });
      unitVariant = 0;
      type = '';
      price = 0;
      attributes = [];
      if (bunglowVariantCollection.get(unit.get('unit_variant_id')) !== void 0) {
        unitVariant = bunglowVariantCollection.findWhere({
          'id': unit.get('unit_variant_id')
        });
        type = 'villa';
        price = window.bunglowVariant.findUnitPrice(unit);
        attributes = unitVariant.get('variant_attributes');
      } else if (apartmentVariantCollection.get(unit.get('unit_variant_id')) !== void 0) {
        unitVariant = apartmentVariantCollection.findWhere({
          'id': unit.get('unit_variant_id')
        });
        type = 'apartment';
        price = window.apartmentVariant.findUnitPrice(unit);
        attributes = unitVariant.get('variant_attributes');
      } else if (plotVariantCollection.get(unit.get('unit_variant_id')) !== void 0) {
        unitVariant = plotVariantCollection.findWhere({
          'id': unit.get('unit_variant_id')
        });
        unitVariant.set('super_built_up_area', unitVariant.get('size'));
        type = 'plot';
        price = window.plotVariant.findUnitPrice(unit);
        attributes = unitVariant.get('variant_attributes');
      }
      unitType = unitTypeMasterCollection.findWhere({
        'id': unit.get('unit_type_id')
      });
      return [unitVariant, unitType, type, price, attributes];
    };

    return Unit;

  })(Backbone.Model);

  UnitCollection = (function(superClass) {
    extend(UnitCollection, superClass);

    function UnitCollection() {
      return UnitCollection.__super__.constructor.apply(this, arguments);
    }

    UnitCollection.prototype.model = Unit;

    UnitCollection.prototype.getRecord = function() {
      return this.currentModel;
    };

    UnitCollection.prototype.setRecord = function(model) {
      return this.currentModel = model;
    };

    UnitCollection.prototype.next = function() {
      var first, next, record, units;
      units = _.pluck(this.toArray(), 'id');
      next = this.at(this.indexOf(this.getRecord()) + 1);
      if (_.isUndefined(next)) {
        first = _.first(units);
        if (this.currentModel.get('id') === first) {
          return next;
        } else {
          record = this.findWhere({
            'id': first
          });
          return record;
        }
      } else {
        return next;
      }
    };

    UnitCollection.prototype.prev = function() {
      var last, prev, record, units;
      units = _.pluck(this.toArray(), 'id');
      prev = this.at(this.indexOf(this.getRecord()) - 1);
      if (_.isUndefined(prev)) {
        last = _.last(units);
        if (this.currentModel.get('id') === last) {
          return prev;
        } else {
          record = this.findWhere({
            'id': last
          });
          return record;
        }
      } else {
        return prev;
      }
    };

    UnitCollection.prototype.setUnitAttributes = function(data) {
      var response;
      response = this.setUnitType(data);
      unitCollection.reset(response);
      unitMasterCollection.reset(response);
      return window.unitTempCollection = unitCollection.clone();
    };

    UnitCollection.prototype.setUnitType = function(data) {
      $.each(data, function(index, value) {
        var unitType, unitVariant;
        unitVariant = '';
        if (bunglowVariantCollection.get(value.unit_variant_id) !== void 0) {
          unitVariant = bunglowVariantCollection.findWhere({
            'id': value.unit_variant_id
          });
        }
        if (apartmentVariantCollection.get(value.unit_variant_id) !== void 0) {
          unitVariant = apartmentVariantCollection.findWhere({
            'id': value.unit_variant_id
          });
        }
        if (plotVariantCollection.get(value.unit_variant_id) !== void 0) {
          unitVariant = plotVariantCollection.findWhere({
            'id': value.unit_variant_id
          });
          unitVariant.set('super_built_up_area', unitVariant.get('size'));
        }
        unitType = unitTypeCollection.findWhere({
          'id': unitVariant.get('unit_type_id')
        });
        value['unit_type_id'] = unitType.get('id');
        return value['area'] = unitVariant.get('super_built_up_area');
      });
      return data;
    };

    return UnitCollection;

  })(Backbone.Collection);

  window.unitCollection = new UnitCollection;

  window.unitMasterCollection = new UnitCollection;

  window.unit = new Unit;

}).call(this);

//# sourceMappingURL=../../frontend/entities/unit.entity.js.map
(function() {
  var UnitType, UnitTypeCollection,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  UnitType = (function(superClass) {
    extend(UnitType, superClass);

    function UnitType() {
      return UnitType.__super__.constructor.apply(this, arguments);
    }

    return UnitType;

  })(Backbone.Model);

  UnitTypeCollection = (function(superClass) {
    extend(UnitTypeCollection, superClass);

    function UnitTypeCollection() {
      return UnitTypeCollection.__super__.constructor.apply(this, arguments);
    }

    UnitTypeCollection.prototype.model = UnitType;

    UnitTypeCollection.prototype.setUnitTypeAttributes = function(data) {
      unitTypeCollection.reset(data);
      return unitTypeMasterCollection.reset(data);
    };

    return UnitTypeCollection;

  })(Backbone.Collection);

  window.unitTypeCollection = new UnitTypeCollection;

  window.unitTypeMasterCollection = new UnitTypeCollection;

}).call(this);

//# sourceMappingURL=../../frontend/entities/unitType.entity.js.map
(function() {
  var Building, BuildingCollection,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Building = (function(superClass) {
    extend(Building, superClass);

    function Building() {
      return Building.__super__.constructor.apply(this, arguments);
    }

    Building.prototype.getUnitTypes = function(building_id) {
      var unitTypes, units, variants;
      unitTypes = [];
      if (building_id === "") {
        return unitTypes;
      }
      units = unitCollection.where({
        'building_id': parseInt(building_id)
      });
      units = new Backbone.Collection(units);
      variants = units.pluck("unit_variant_id");
      $.each(variants, function(index, value) {
        var varinatModel;
        varinatModel = apartmentVariantCollection.findWhere({
          'id': parseInt(value)
        });
        return unitTypes.push(varinatModel.get('unit_type_id'));
      });
      unitTypes = _.uniq(unitTypes);
      return unitTypes;
    };

    Building.prototype.getUnitTypesCount = function(building_id, unitTypes) {
      var types;
      types = [];
      if (building_id === "") {
        return types;
      }
      $.each(unitTypes, function(ind, val) {
        var unitTypeModel, units, variants;
        unitTypeModel = unitTypeCollection.findWhere({
          'id': val
        });
        variants = apartmentVariantCollection.where({
          'unit_type_id': val
        });
        units = [];
        $.each(variants, function(index, value) {
          var unitsColl;
          unitsColl = unitCollection.where({
            'unit_variant_id': value.get('id'),
            'building_id': building_id
          });
          return $.merge(units, unitsColl);
        });
        return types.push({
          'name': unitTypeModel.get('name'),
          'units': units.length
        });
      });
      return types;
    };

    Building.prototype.getMinimumArea = function(building_id) {
      var min, temp, units;
      if (building_id === "") {
        return;
      }
      units = unitCollection.where({
        'building_id': building_id
      });
      temp = [];
      $.each(units, function(index, value) {
        var variants;
        variants = apartmentVariantCollection.findWhere({
          'id': value.get('unit_variant_id')
        });
        return temp.push(variants.get('super_built_up_area'));
      });
      min = 0;
      if (temp.length !== 0) {
        min = _.min(temp);
      }
      return min;
    };

    Building.prototype.getMinimumCost = function(building_id) {
      var min, temp, units;
      if (building_id === "") {
        return;
      }
      units = unitCollection.where({
        'building_id': building_id
      });
      temp = [];
      $.each(units, function(index, value) {
        units = unit.getUnitDetails(value.get('id'));
        return temp.push(units[3]);
      });
      min = 0;
      if (temp.length !== 0) {
        min = _.min(temp);
      }
      return min;
    };

    Building.prototype.getBuildingUnits = function(building_id) {
      var units, unitsFloor, unitsPosition;
      if (building_id === "") {
        return;
      }
      units = unitCollection.where({
        'building_id': building_id
      });
      unitsFloor = _.sortBy(units, function(num) {
        return num.get('floor');
      });
      unitsPosition = _.sortBy(unitsFloor, function(num) {
        return num.get('position');
      });
      return units;
    };

    Building.prototype.checkRotationView = function(building) {
      var breakpoints, buildingModel, transitionImages;
      if (building === "") {
        return;
      }
      transitionImages = [];
      buildingModel = buildingCollection.findWhere({
        'id': parseInt(building)
      });
      breakpoints = buildingModel.get('breakpoints');
      if (parseInt(breakpoints.length) > 1) {
        this.set('rotation', 1);
      } else {
        this.set('rotation', 0);
      }
      return this.get('rotation');
    };

    return Building;

  })(Backbone.Model);

  BuildingCollection = (function(superClass) {
    extend(BuildingCollection, superClass);

    function BuildingCollection() {
      return BuildingCollection.__super__.constructor.apply(this, arguments);
    }

    BuildingCollection.prototype.model = Building;

    BuildingCollection.prototype.getRecord = function() {
      return this.currentModel;
    };

    BuildingCollection.prototype.setRecord = function(model) {
      return this.currentModel = model;
    };

    BuildingCollection.prototype.next = function() {
      var first, next, record, units;
      units = _.pluck(this.toArray(), 'id');
      next = this.at(this.indexOf(this.getRecord()) + 1);
      if (_.isUndefined(next)) {
        first = _.first(units);
        if (this.currentModel.get('id') === first) {
          return next;
        } else {
          record = this.findWhere({
            'id': first
          });
          return record;
        }
      } else {
        return next;
      }
    };

    BuildingCollection.prototype.prev = function() {
      var last, prev, record, units;
      units = _.pluck(this.toArray(), 'id');
      prev = this.at(this.indexOf(this.getRecord()) - 1);
      if (_.isUndefined(prev)) {
        last = _.last(units);
        if (this.currentModel.get('id') === last) {
          return prev;
        } else {
          record = this.findWhere({
            'id': last
          });
          return record;
        }
      } else {
        return prev;
      }
    };

    BuildingCollection.prototype.setBuildingAttributes = function(data) {
      buildingCollection.reset(data);
      return buildingMasterCollection.reset(data);
    };

    return BuildingCollection;

  })(Backbone.Collection);

  window.buildingCollection = new BuildingCollection;

  window.buildingMasterCollection = new BuildingCollection;

  window.building = new Building;

}).call(this);

//# sourceMappingURL=../../frontend/entities/building.entity.js.map
(function() {
  var ApartmentVariant, ApartmentVariantCollection,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ApartmentVariant = (function(superClass) {
    extend(ApartmentVariant, superClass);

    function ApartmentVariant() {
      return ApartmentVariant.__super__.constructor.apply(this, arguments);
    }

    ApartmentVariant.prototype.findUnitPrice = function(unitModel) {
      var basicCost, basic_cost, building, floorRise, floorRiseArray, unitVarinatModel;
      basicCost = 0.00;
      if (!(unitModel instanceof Backbone.Model) || unitModel === "") {
        return;
      }
      building = buildingMasterCollection.findWhere({
        'id': unitModel.get('building_id')
      });
      unitVarinatModel = apartmentVariantMasterCollection.findWhere({
        'id': parseInt(unitModel.get('unit_variant_id'))
      });
      if (!_.isUndefined(unitVarinatModel)) {
        floorRiseArray = settings.generateFloorRise(unitModel.get('building_id'));
        floorRise = building.get('floor_rise');
        basic_cost = (parseFloat(unitVarinatModel.get('per_sq_ft_price')) + parseFloat(floorRise)) * parseFloat(unitVarinatModel.get('super_built_up_area'));
        basicCost = basic_cost.toFixed(2);
      }
      return basicCost;
    };

    return ApartmentVariant;

  })(Backbone.Model);

  ApartmentVariantCollection = (function(superClass) {
    extend(ApartmentVariantCollection, superClass);

    function ApartmentVariantCollection() {
      return ApartmentVariantCollection.__super__.constructor.apply(this, arguments);
    }

    ApartmentVariantCollection.prototype.model = ApartmentVariant;

    ApartmentVariantCollection.prototype.setApartmentVariantAttributes = function(data) {
      apartmentVariantCollection.reset(data);
      return apartmentVariantMasterCollection.reset(data);
    };

    ApartmentVariantCollection.prototype.getApartmentUnits = function() {
      var newUnits, units;
      units = [];
      newUnits = [];
      apartmentVariantCollection.each(function(model) {
        var apartmentUnits;
        apartmentUnits = unitCollection.where({
          unit_variant_id: model.get('id')
        });
        return units.push(apartmentUnits);
      });
      if (units.length !== 0) {
        $.each(units[0], function(index, value) {
          var property, unitType;
          unitType = unitTypeMasterCollection.findWhere({
            'id': value.get('unit_type_id')
          });
          property = window.propertyTypes[unitType.get('property_type_id')];
          if (s.decapitalize(property) === 'apartments') {
            return newUnits.push(value);
          }
        });
      }
      return newUnits;
    };

    ApartmentVariantCollection.prototype.getPenthouseUnits = function() {
      var units;
      units = [];
      unitCollection.each(function(model) {
        var property, unitType;
        unitType = unitTypeMasterCollection.findWhere({
          'id': model.get('unit_type_id')
        });
        property = window.propertyTypes[unitType.get('property_type_id')];
        if (s.decapitalize(property) === 'penthouses') {
          return units.push(model);
        }
      });
      return units;
    };

    ApartmentVariantCollection.prototype.getApartmentMasterUnits = function() {
      var newUnits, units;
      units = [];
      newUnits = [];
      apartmentVariantMasterCollection.each(function(model) {
        var apartmentUnits;
        apartmentUnits = unitMasterCollection.where({
          unit_variant_id: model.get('id')
        });
        return units.push(apartmentUnits);
      });
      $.each(units, function(index, value) {
        return newUnits = $.merge(newUnits, value);
      });
      return newUnits;
    };

    ApartmentVariantCollection.prototype.getApartmentUnitTypes = function() {
      var unit_types;
      unit_types = [];
      apartmentVariantMasterCollection.each(function(item) {
        var unitTypeModel;
        unitTypeModel = unitTypeMasterCollection.findWhere({
          'id': item.get('unit_type_id')
        });
        if ($.inArray(item.get('unit_type_id'), unit_types) === -1) {
          return unit_types.push(parseInt(unitTypeModel.get('id')));
        }
      });
      return unit_types;
    };

    ApartmentVariantCollection.prototype.getApartmentAttributes = function() {
      var attributes, types;
      attributes = [];
      types = [];
      apartmentVariantMasterCollection.each(function(item) {
        return $.each(item.get('variant_attributes'), function(index, value) {
          if (_.isArray(value)) {
            return $.each(value, function(ind, val) {
              if ($.inArray(val, attributes) === -1) {
                return attributes.push(val);
              }
            });
          } else {
            if ($.inArray(value, attributes) === -1) {
              return attributes.push(value);
            }
          }
        });
      });
      return [attributes];
    };

    return ApartmentVariantCollection;

  })(Backbone.Collection);

  window.apartmentVariantCollection = new ApartmentVariantCollection;

  window.apartmentVariantMasterCollection = new ApartmentVariantCollection;

  window.apartmentVariant = new ApartmentVariant;

}).call(this);

//# sourceMappingURL=../../frontend/entities/apartment.variant.entity.js.map
(function() {
  var FloorLayout, FloorLayoutCollection,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  FloorLayout = (function(superClass) {
    extend(FloorLayout, superClass);

    function FloorLayout() {
      return FloorLayout.__super__.constructor.apply(this, arguments);
    }

    return FloorLayout;

  })(Backbone.Model);

  FloorLayoutCollection = (function(superClass) {
    extend(FloorLayoutCollection, superClass);

    function FloorLayoutCollection() {
      return FloorLayoutCollection.__super__.constructor.apply(this, arguments);
    }

    FloorLayoutCollection.prototype.model = FloorLayout;

    FloorLayoutCollection.prototype.setFloorLayoutAttributes = function(data) {
      return floorLayoutCollection.reset(data);
    };

    return FloorLayoutCollection;

  })(Backbone.Collection);

  window.floorLayoutCollection = new FloorLayoutCollection;

}).call(this);

//# sourceMappingURL=../../frontend/entities/floor.layout.entity.js.map
(function() {
  var PlotVariant, PlotVariantCollection,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  PlotVariant = (function(superClass) {
    extend(PlotVariant, superClass);

    function PlotVariant() {
      return PlotVariant.__super__.constructor.apply(this, arguments);
    }

    PlotVariant.prototype.findUnitPrice = function(unit_model) {
      var basicCost, basic_cost, unitVarinatModel;
      basicCost = "";
      if (!(unit_model instanceof Backbone.Model) || unit_model === "") {
        return;
      }
      unitVarinatModel = plotVariantMasterCollection.findWhere({
        'id': parseInt(unit_model.get('unit_variant_id'))
      });
      if (unitVarinatModel !== void 0) {
        basic_cost = (parseFloat(unitVarinatModel.get('per_sq_ft_price'))) * parseFloat(unitVarinatModel.get('size'));
        basicCost = basic_cost.toFixed(2);
      }
      return basicCost;
    };

    return PlotVariant;

  })(Backbone.Model);

  PlotVariantCollection = (function(superClass) {
    extend(PlotVariantCollection, superClass);

    function PlotVariantCollection() {
      return PlotVariantCollection.__super__.constructor.apply(this, arguments);
    }

    PlotVariantCollection.prototype.model = PlotVariant;

    PlotVariantCollection.prototype.setPlotVariantAttributes = function(data) {
      plotVariantCollection.reset(data);
      return plotVariantMasterCollection.reset(data);
    };

    PlotVariantCollection.prototype.getPlotUnits = function() {
      var newUnits, units;
      units = [];
      newUnits = [];
      plotVariantCollection.each(function(model) {
        var plotUnits;
        plotUnits = unitCollection.where({
          unit_variant_id: model.get('id')
        });
        return units.push(plotUnits);
      });
      $.each(units, function(index, value) {
        return newUnits = $.merge(newUnits, value);
      });
      return newUnits;
    };

    PlotVariantCollection.prototype.getPlotMasterUnits = function() {
      var newUnits, units;
      units = [];
      newUnits = [];
      plotVariantMasterCollection.each(function(model) {
        var plotUnits;
        plotUnits = unitMasterCollection.where({
          unit_variant_id: model.get('id')
        });
        return units.push(plotUnits);
      });
      $.each(units, function(index, value) {
        return newUnits = $.merge(newUnits, value);
      });
      return newUnits;
    };

    PlotVariantCollection.prototype.getPlotUnitTypes = function() {
      var unit_types;
      unit_types = [];
      plotVariantMasterCollection.each(function(item) {
        var unitTypeModel;
        unitTypeModel = unitTypeMasterCollection.findWhere({
          'id': item.get('unit_type_id')
        });
        if ($.inArray(item.get('unit_type_id'), unit_types) === -1) {
          return unit_types.push(parseInt(unitTypeModel.get('id')));
        }
      });
      return unit_types;
    };

    PlotVariantCollection.prototype.getPlotAttributes = function() {
      var attributes;
      attributes = [];
      plotVariantMasterCollection.each(function(item) {
        return $.each(item.get('variant_attributes'), function(index, value) {
          if (_.isArray(value)) {
            return $.each(value, function(ind, val) {
              if ($.inArray(val, attributes) === -1) {
                return attributes.push(val);
              }
            });
          } else {
            if ($.inArray(value, attributes) === -1) {
              return attributes.push(value);
            }
          }
        });
      });
      return attributes;
    };

    return PlotVariantCollection;

  })(Backbone.Collection);

  window.plotVariantCollection = new PlotVariantCollection;

  window.plotVariantMasterCollection = new PlotVariantCollection;

  window.plotVariant = new PlotVariant;

}).call(this);

//# sourceMappingURL=../../frontend/entities/plot.variant.entity.js.map
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  CommonFloor.NothingFoundView = (function(superClass) {
    extend(NothingFoundView, superClass);

    function NothingFoundView() {
      return NothingFoundView.__super__.constructor.apply(this, arguments);
    }

    NothingFoundView.prototype.template = '#noFound-template';

    return NothingFoundView;

  })(Marionette.ItemView);

  CommonFloor.NothingFoundCtrl = (function(superClass) {
    extend(NothingFoundCtrl, superClass);

    function NothingFoundCtrl() {
      return NothingFoundCtrl.__super__.constructor.apply(this, arguments);
    }

    NothingFoundCtrl.prototype.initialize = function() {
      return this.show(new CommonFloor.NothingFoundView);
    };

    return NothingFoundCtrl;

  })(Marionette.RegionController);

  CommonFloor.NoUnitsView = (function(superClass) {
    extend(NoUnitsView, superClass);

    function NoUnitsView() {
      return NoUnitsView.__super__.constructor.apply(this, arguments);
    }

    NoUnitsView.prototype.template = '<div> <div id="trig" class="toggle-button"></div> <div id="view_toggle" class="toggle-view-button map"></div> <div class="list-view-container w-map animated fadeIn"> <div class="text-center" id="searchSorryPageWidget"> <div class="m-t-10 bldg-list"> <span class="icon-wondering"></span> <div class="m-t-10">Sorry! We havent found any properties matching your search.</div> <div>Please retry with different search options.</div> </div> </div> </div> </div>';

    NoUnitsView.prototype.ui = {
      viewtog: '#view_toggle',
      trig: '#trig'
    };

    NoUnitsView.prototype.events = {
      'click @ui.trig': function(e) {
        return $('.list-container').toggleClass('closed');
      },
      'click @ui.viewtog': function(e) {
        $('.us-left-content').toggleClass('not-visible visible');
        return $('.us-right-content').toggleClass('not-visible visible');
      }
    };

    return NoUnitsView;

  })(Marionette.ItemView);

  CommonFloor.NoUnitsCtrl = (function(superClass) {
    extend(NoUnitsCtrl, superClass);

    function NoUnitsCtrl() {
      return NoUnitsCtrl.__super__.constructor.apply(this, arguments);
    }

    NoUnitsCtrl.prototype.initialize = function() {
      return this.show(new CommonFloor.NoUnitsView);
    };

    return NoUnitsCtrl;

  })(Marionette.RegionController);

  CommonFloor.loadJSONData = function() {
    return $.ajax({
      type: 'GET',
      url: BASERESTURL + '/project/' + PROJECTID + '/step-two',
      async: false,
      success: function(response) {
        response = window.convertToInt(response);
        response = response.data;
        bunglowVariantCollection.setBunglowVariantAttributes(response.bunglow_variants);
        settings.setSettingsAttributes(response.settings);
        unitTypeCollection.setUnitTypeAttributes(response.unit_types);
        buildingCollection.setBuildingAttributes(response.buildings);
        apartmentVariantCollection.setApartmentVariantAttributes(response.apartment_variants);
        floorLayoutCollection.setFloorLayoutAttributes(response.floor_layout);
        window.propertyTypes = response.property_types;
        plotVariantCollection.setPlotVariantAttributes(response.plot_variants);
        return unitCollection.setUnitAttributes(response.units);
      },
      error: function(response) {
        this.region = new Marionette.Region({
          el: '#noFound-template'
        });
        return new CommonFloor.ProjectCtrl({
          region: this.region
        });
      }
    });
  };

  CommonFloor.propertyMaxUnits = function() {
    var Router, controller, temp;
    Router = [];
    Router.push({
      'type': 'bunglows',
      'count': bunglowVariantCollection.getBunglowUnits()
    });
    temp = [];
    $.merge(temp, apartmentVariantCollection.getApartmentUnits());
    $.merge(temp, apartmentVariantCollection.getPenthouseUnits());
    Router.push({
      'type': 'building',
      'count': temp
    });
    Router.push({
      'type': 'plot',
      'count': plotVariantCollection.getPlotUnits()
    });
    controller = _.max(Router, function(item) {
      return parseInt(item.count.length);
    });
    return controller;
  };

  CommonFloor.checkPropertyType = function() {
    CommonFloor.loadJSONData();
    if (Object.keys(project.get('project_master')).length === 0) {
      CommonFloor.navigate('#/list-view', true);
      return CommonFloor.router.storeRoute();
    } else {
      CommonFloor.navigate('#/master-view', true);
      return CommonFloor.router.storeRoute();
    }
  };

  CommonFloor.checkListView = function() {
    var controller;
    return controller = CommonFloor.propertyMaxUnits();
  };

  window.convertToInt = function(response) {
    return $.each(response, function(index, value) {
      return $.map(value, function(item) {
        return $.each(item, function(ind, val) {
          return parseInt(val);
        });
      });
    });
  };

  window.numDifferentiation = function(val) {
    var decimal, valBudget;
    if (val >= 10000000) {
      val = (val / 10000000).toFixed(2);
      decimal = val.split('.')[1];
      valBudget = decimal % 5;
      valBudget = valBudget / 100;
      val = val - valBudget;
      val = val.toFixed(2);
      val = val + ' Cr';
    } else if (val >= 100000) {
      val = (val / 100000).toFixed(2);
      decimal = val.split('.')[1];
      valBudget = decimal % 5;
      valBudget = valBudget / 100;
      val = val - valBudget;
      val = val.toFixed(2);
      val = val + ' Lac';
    } else if (val >= 1000) {
      val = (val / 1000).toFixed(2);
      decimal = val.split('.')[1];
      valBudget = decimal % 5;
      valBudget = valBudget / 100;
      val = val - valBudget;
      val = val.toFixed(2);
      val = val + ' K';
    }
    return val;
  };

  window.calculatePerc = function(value, total) {
    var perc;
    value = parseInt(value);
    total = parseInt(total);
    perc = value / total;
    perc = perc * 100;
    perc = perc.toFixed(2);
    return perc;
  };

  window.convertRupees = function(val) {
    $('#price').autoNumeric('init');
    return $('#price').autoNumeric('set', val);
  };

  CommonFloor.propertyTypes = function() {
    var Router, controller, temp;
    Router = [];
    if (bunglowVariantCollection.getBunglowUnits().length !== 0) {
      Router.push({
        'type': s.capitalize('villa(s)'),
        'count': bunglowVariantCollection.getBunglowUnits(),
        'type_name': '(V)'
      });
    }
    if (apartmentVariantCollection.getApartmentUnits().length !== 0 || apartmentVariantCollection.getPenthouseUnits().length !== 0) {
      temp = [];
      $.merge(temp, apartmentVariantCollection.getApartmentUnits());
      $.merge(temp, apartmentVariantCollection.getPenthouseUnits());
      Router.push({
        'type': s.capitalize('apartment(s)/Penthouse(s)'),
        'count': temp,
        'type_name': '(A)/(PH)'
      });
    }
    if (plotVariantCollection.getPlotUnits().length !== 0) {
      Router.push({
        'type': s.capitalize('plot(s)'),
        'count': plotVariantCollection.getPlotUnits(),
        'type_name': '(P)'
      });
    }
    controller = _.max(Router, function(item) {
      return parseInt(item.count.length);
    });
    return Router;
  };

  CommonFloor.masterPropertyTypes = function() {
    var Router, controller;
    Router = [];
    if (bunglowVariantCollection.getBunglowMasterUnits().length !== 0) {
      Router.push({
        'type': s.capitalize('villas'),
        'count': bunglowVariantCollection.getBunglowMasterUnits(),
        'type_name': '(V)',
        'name': 'villa'
      });
    }
    if (apartmentVariantCollection.getApartmentMasterUnits().length !== 0) {
      Router.push({
        'type': s.capitalize('apartments'),
        'count': apartmentVariantCollection.getApartmentMasterUnits(),
        'type_name': '(A)',
        'name': 'apartment'
      });
    }
    if (plotVariantCollection.getPlotMasterUnits().length !== 0) {
      Router.push({
        'type': s.capitalize('plots'),
        'count': plotVariantCollection.getPlotMasterUnits(),
        'type_name': '(P)',
        'name': 'plot'
      });
    }
    controller = _.max(Router, function(item) {
      return parseInt(item.count.length);
    });
    return Router;
  };

  CommonFloor.applyAvailabilClasses = function(classname) {
    $('.layer').each(function(ind, item) {
      var availability, class_name, id, unit;
      id = parseInt(item.id);
      class_name = $('#' + id).attr('class');
      unit = unitCollection.findWhere({
        id: id
      });
      if (!_.isUndefined(unit)) {
        availability = unit.get('availability');
        availability = s.decapitalize(availability);
        return $('#' + id).attr('class', class_name + ' ' + availability);
      }
    });
    return $('.building').each(function(ind, item) {
      var class_name, id, unit;
      id = parseInt(item.id);
      class_name = $('#' + id).attr('class');
      unit = unitCollection.where({
        'building_id': id,
        'availability': 'available'
      });
      if (unit.length > 0) {
        return $('#' + id).attr('class', class_name + ' available');
      } else {
        return $('#' + id).attr('class', class_name + ' sold');
      }
    });
  };

  CommonFloor.randomClass = function() {
    return $('.layer').each(function(ind, item) {
      var id;
      id = parseInt(item.id);
      return $('#' + id).attr('style', 'transform: rotateY(0deg) scale(1); -webkit-transform: rotateY(0deg) scale(1);');
    });
  };

  CommonFloor.filter = function() {
    var element, i, index, len, param_arr, param_key, params, paramsArray;
    if (window.location.href.indexOf('=') > -1) {
      params = params;
      paramsArray = params.split('&');
      for (index = i = 0, len = paramsArray.length; i < len; index = ++i) {
        element = paramsArray[index];
        param_key = element.split('=');
        CommonFloor.defaults[param_key[0]] = param_key[1];
      }
      params = 'type:' + CommonFloor.defaults['type'] + '&unit_variant_id:' + CommonFloor.defaults['unitVariants'] + '&unit_type_id:' + CommonFloor.defaults['unitTypes'] + '&price_min:' + CommonFloor.defaults['price_min'] + '&price_max:' + CommonFloor.defaults['price_max'] + '&availability:' + CommonFloor.defaults['availability'] + '&area_min:' + CommonFloor.defaults['area_min'] + '&area_max:' + CommonFloor.defaults['area_max'] + '&building_id:' + CommonFloor.defaults['building'] + '&floor_min:' + CommonFloor.defaults['floor_min'] + '&floor_max:' + CommonFloor.defaults['floor_max'] + '&flooring:' + CommonFloor.defaults['flooring'];
    } else {
      params = 'type:' + CommonFloor.defaults['type'] + '&unit_variant_id:' + CommonFloor.defaults['unitVariants'] + '&unit_type_id:' + CommonFloor.defaults['unitTypes'] + '&price_min:' + CommonFloor.defaults['price_min'] + '&price_max:' + CommonFloor.defaults['price_max'] + '&availability:' + CommonFloor.defaults['availability'] + '&area_min:' + CommonFloor.defaults['area_min'] + '&area_max:' + CommonFloor.defaults['area_max'] + '&building_id:' + CommonFloor.defaults['building'] + '&floor_min:' + CommonFloor.defaults['floor_min'] + '&floor_max:' + CommonFloor.defaults['floor_max'] + '&flooring:' + CommonFloor.defaults['flooring'];
    }
    param_arr = params.split('&');
    $.each(param_arr, function(index, value) {
      var collection, param_val, param_val_arr, value_arr;
      value_arr = value.split(':');
      param_key = value_arr[0];
      if (param_key === 'type' && value_arr[1] !== "") {
        CommonFloor.resetCollections();
        collection = CommonFloor.resetProperyType(value_arr[1]);
      }
      if (param_key !== 'price_min' && param_key !== 'price_max' && value_arr[1] !== "" && param_key !== 'area_min' && param_key !== 'area_max' && param_key !== 'type' && param_key !== 'floor_min' && param_key !== 'floor_max' && param_key !== 'flooring') {
        param_val = value_arr[1];
        param_val_arr = param_val.split(',');
        collection = [];
        $.each(param_val_arr, function(index, value) {
          var paramkey;
          paramkey = {};
          paramkey[param_key] = parseInt(value);
          if (param_key === 'availability') {
            paramkey[param_key] = value;
          }
          return $.merge(collection, unitCollection.where(paramkey));
        });
        return unitCollection.reset(collection);
      }
    });
    if (CommonFloor.defaults['price_max'] !== "") {
      CommonFloor.filterBudget();
    }
    if (CommonFloor.defaults['area_max'] !== "") {
      CommonFloor.filterArea();
    }
    if (CommonFloor.defaults['floor_max'] !== "") {
      CommonFloor.filterFloor();
    }
    if (CommonFloor.defaults['flooring'] !== "") {
      CommonFloor.filterFlooringAttributes();
    }
    CommonFloor.resetCollections();
    return CommonFloor.applyFliterClass();
  };

  CommonFloor.resetProperyType = function(param) {
    var collection;
    collection = [];
    if (param === 'villa') {
      $.merge(collection, bunglowVariantCollection.getBunglowUnits());
    }
    if (param === 'apartment') {
      $.merge(collection, apartmentVariantCollection.getApartmentUnits());
      $.merge(collection, apartmentVariantCollection.getPenthouseUnits());
    }
    if (param === 'plot') {
      $.merge(collection, plotVariantCollection.getPlotUnits());
    }
    return collection;
  };

  CommonFloor.applyFliterClass = function() {
    var actualbuildings, actualunits, filterbuildings, filterunits, flag, notSelecteUnits, notSelectebuildings;
    actualunits = _.pluck(unitMasterCollection.toArray(), 'id');
    filterunits = _.pluck(unitCollection.toArray(), 'id');
    notSelecteUnits = _.difference(actualunits, filterunits);
    actualbuildings = _.pluck(buildingMasterCollection.toArray(), 'id');
    filterbuildings = _.pluck(buildingCollection.toArray(), 'id');
    notSelectebuildings = _.difference(actualbuildings, filterbuildings);
    flag = CommonFloor.applyNonFilterClass();
    if (flag === 0) {
      return false;
    }
    $('.villa,.plot,.apartment').each(function(ind, item) {
      var id;
      id = parseInt(item.id);
      if ($.inArray(id, filterunits) > -1) {
        return setTimeout(function() {
          return $('#' + id).attr('style', ' stroke-width: 3px; stroke-dasharray: 320 0;stroke-dashoffset: 0;stroke:#F68121; transform: rotateY(0deg) scale(1); -webkit-transform: rotateY(0deg) scale(1);');
        }, Math.random() * 1000);
      } else {
        return setTimeout(function() {
          return $('#' + id).attr('style', ' stroke-width: 0px; stroke-dasharray: 320 0;stroke-dashoffset: 0;transform: rotateY(0deg) scale(1); -webkit-transform: rotateY(0deg) scale(1);');
        }, Math.random() * 1000);
      }
    });
    return $('.building').each(function(ind, item) {
      var id, types;
      types = [];
      if (CommonFloor.defaults['type'] !== "") {
        types = CommonFloor.defaults['type'].split(',');
      }
      id = parseInt(item.id);
      if ($.inArray('villa', types) === -1 && $.inArray('plot', types) === -1) {
        if ($.inArray(id, filterbuildings) > -1 && filterbuildings.length !== 0 && buildingCollection.length !== 0) {
          return setTimeout(function() {
            return $('#' + id).attr('style', ' stroke-width: 3px; stroke-dasharray: 320 0;stroke-dashoffset: 0; stroke:#F68121; transform: rotateY(0deg) scale(1);-webkit-transform: rotateY(0deg) scale(1);');
          }, Math.random() * 1000);
        } else {
          return setTimeout(function() {
            return $('#' + id).attr('style', ' stroke-width: 0px; stroke-dasharray: 320 0;stroke-dashoffset: 0; transform: rotateY(0deg) scale(1);-webkit-transform: rotateY(0deg) scale(1);');
          }, Math.random() * 1000);
        }
      } else {
        return setTimeout(function() {
          return $('#' + id).attr('style', ' stroke-width: 0px; stroke-dasharray: 320 0;stroke-dashoffset: 0; transform: rotateY(0deg) scale(1);-webkit-transform: rotateY(0deg) scale(1);');
        }, Math.random() * 1000);
      }
    });
  };

  CommonFloor.applyNonFilterClass = function() {
    var flag;
    flag = 0;
    if (CommonFloor.defaults['type'] !== "") {
      flag = 1;
    }
    $.each(CommonFloor.defaults['apartment'], function(index, value) {
      if (value !== "" && !(_.isEmpty(value))) {
        return flag = 1;
      }
    });
    $.each(CommonFloor.defaults['plot'], function(index, value) {
      if (value !== "" && !(_.isEmpty(value))) {
        return flag = 1;
      }
    });
    $.each(CommonFloor.defaults['villa'], function(index, value) {
      if (value !== "" && !(_.isEmpty(value))) {
        return flag = 1;
      }
    });
    $.each(CommonFloor.defaults['common'], function(index, value) {
      if (value !== "") {
        return flag = 1;
      }
    });
    if (flag === 0) {
      $('.villa,.plot,.apartment').each(function(ind, item) {
        var id;
        id = parseInt(item.id);
        return $('#' + id).attr('style', ' stroke-width: 0px; stroke-dasharray: 320 0;stroke-dashoffset: 0;transform: rotateY(0deg) scale(1);-webkit-transform: rotateY(0deg) scale(1);');
      });
      $('.building').each(function(ind, item) {
        var id;
        id = parseInt(item.id);
        return $('#' + id).attr('style', ' stroke-width: 0px; stroke-dasharray: 320 0;stroke-dashoffset: 0;transform: rotateY(0deg) scale(1);-webkit-transform: rotateY(0deg) scale(1);');
      });
    }
    return flag;
  };

  CommonFloor.resetCollections = function() {
    var apartments, buildings, bunglows, plots, unitTypes;
    apartments = [];
    bunglows = [];
    unitTypes = [];
    plots = [];
    buildings = [];
    unitCollection.each(function(item) {
      var building, property, unitType;
      unitType = unitTypeMasterCollection.findWhere({
        'id': item.get('unit_type_id')
      });
      if (item.get('building_id') !== 0) {
        building = buildingMasterCollection.findWhere({
          'id': item.get('building_id')
        });
        buildings.push(building);
      }
      property = window.propertyTypes[unitType.get('property_type_id')];
      if (s.decapitalize(property) === 'apartments' || s.decapitalize(property) === 'penthouses') {
        apartments.push(apartmentVariantMasterCollection.get(item.get('unit_variant_id')));
      }
      if (s.decapitalize(property) === 'villas/Bungalows') {
        bunglows.push(bunglowVariantMasterCollection.get(item.get('unit_variant_id')));
      }
      if (s.decapitalize(property) === 'plots') {
        plots.push(plotVariantMasterCollection.get(item.get('unit_variant_id')));
      }
      return unitTypes.push(unitType);
    });
    apartmentVariantCollection.reset(apartments);
    bunglowVariantCollection.reset(bunglows);
    plotVariantCollection.reset(plots);
    unitTypeCollection.reset(unitTypes);
    buildingCollection.reset(buildings);
    return unitCollection.reset(unitCollection.toArray());
  };

  CommonFloor.filterBudget = function() {
    var budget;
    CommonFloor.resetCollections();
    budget = [];
    unitCollection.each(function(item) {
      var unitPrice;
      unitPrice = parseFloat(window.unit.getFilterUnitDetails(item.get('id'))[3]);
      if (unitPrice >= parseFloat(CommonFloor.defaults['common']['price_min']) && unitPrice <= parseFloat(CommonFloor.defaults['common']['price_max'])) {
        return budget.push(item);
      }
    });
    return unitCollection.reset(budget);
  };

  CommonFloor.filterFloor = function() {
    var floorArr;
    CommonFloor.resetCollections();
    floorArr = [];
    unitCollection.each(function(item) {
      var floor;
      floor = item.get('floor');
      if (floor >= parseInt(CommonFloor.defaults['common']['floor_min']) && floor <= parseInt(CommonFloor.defaults['common']['floor_max'])) {
        return floorArr.push(item);
      }
    });
    return unitCollection.reset(floorArr);
  };

  CommonFloor.filterArea = function() {
    var areaArr;
    CommonFloor.resetCollections();
    areaArr = [];
    unitCollection.each(function(item) {
      var area;
      area = item.get('area');
      if (area >= parseFloat(CommonFloor.defaults['common']['area_min']) && area <= parseFloat(CommonFloor.defaults['common']['area_max'])) {
        return areaArr.push(item);
      }
    });
    return unitCollection.reset(areaArr);
  };

  CommonFloor.getFilters = function() {
    var area, area_max, area_min, facings, filters, floor, floor_max, floor_min, flooring, main, max_price, min_price, price, results, status, type, typeArr, unitTypes, unitVariants, views;
    unitTypes = [];
    unitVariants = [];
    results = [];
    flooring = [];
    type = [];
    filters = [];
    price = [];
    area = [];
    type = [];
    status = [];
    floor = [];
    main = [];
    views = [];
    facings = [];
    if (CommonFloor.defaults['common']['price_max'] !== "") {
      min_price = window.numDifferentiation(CommonFloor.defaults['common']['price_min']);
      max_price = window.numDifferentiation(CommonFloor.defaults['common']['price_max']);
      price.push({
        'name': min_price + '-' + max_price,
        'type': '',
        'id': 'budget',
        'id_name': 'filter_budget',
        'classname': 'budget'
      });
    }
    if (CommonFloor.defaults['common']['area_max'] !== "") {
      area_min = CommonFloor.defaults['common']['area_min'];
      area_max = CommonFloor.defaults['common']['area_max'];
      area.push({
        'name': area_min + '-' + area_max,
        'type': project.get('measurement_units'),
        'id': 'area',
        'id_name': 'filter_area',
        'classname': 'area'
      });
    }
    if (CommonFloor.defaults['common']['floor_max'] !== "") {
      floor_min = CommonFloor.defaults['common']['floor_min'];
      floor_max = CommonFloor.defaults['common']['floor_max'];
      floor.push({
        'name': 'Floor ' + floor_min + '-' + floor_max,
        'type': '',
        'id': 'floor',
        'id_name': 'filter_floor',
        'classname': 'floor'
      });
    }
    if (CommonFloor.defaults['common']['availability'] !== "") {
      status.push({
        'name': 'Available',
        'classname': 'types',
        'id': 'available',
        'id_name': 'filter_available'
      });
    }
    if (CommonFloor.defaults['common']['views'] !== "") {
      $.each(CommonFloor.defaults['common']['views'].split(','), function(index, value) {
        return views.push({
          'name': value,
          'classname': 'views',
          'id': value,
          'id_name': 'filter_' + value
        });
      });
    }
    if (CommonFloor.defaults['common']['facings'] !== "") {
      $.each(CommonFloor.defaults['common']['facings'].split(','), function(index, value) {
        return facings.push({
          'name': value,
          'classname': 'facings',
          'id': value,
          'id_name': 'filter_' + value
        });
      });
    }
    if (CommonFloor.defaults['type'] !== "") {
      typeArr = CommonFloor.defaults['type'].split(',');
      $.each(typeArr, function(index, value) {
        var name;
        name = s.capitalize(value);
        name = name + '(s)';
        if (value === 'apartment') {
          name = 'Apartment(s)/Penthouse(s)';
          filters = CommonFloor.getApartmentFilters();
        }
        if (value === 'villa') {
          filters = CommonFloor.getVillaFilters();
        }
        if (value === 'plot') {
          filters = CommonFloor.getPlotFilters();
        }
        $.each(filters, function(index, value) {
          if (value.length === 0) {
            return filters = _.omit(filters, index);
          }
        });
        if (Object.keys(filters).length === 0) {
          filters = [];
        }
        return type.push({
          'name': name,
          'classname': 'types',
          'id': value,
          'id_name': 'filter_' + value,
          'filters': filters
        });
      });
    }
    main.push({
      'filters': type,
      'area': area,
      'price': price,
      'floor': floor,
      'status': status,
      'views': views,
      'facings': facings
    });
    return main;
  };

  CommonFloor.getStepFilters = function() {
    var area, area_max, area_min, facings, filters, floor, floor_max, floor_min, flooring, main, max_price, min_price, price, results, status, type, unitTypes, unitVariants, views;
    unitTypes = [];
    unitVariants = [];
    results = [];
    flooring = [];
    type = [];
    filters = [];
    price = [];
    area = [];
    type = [];
    status = [];
    floor = [];
    main = [];
    views = [];
    facings = [];
    if (CommonFloor.defaults['common']['price_max'] !== "") {
      min_price = window.numDifferentiation(CommonFloor.defaults['common']['price_min']);
      max_price = window.numDifferentiation(CommonFloor.defaults['common']['price_max']);
      price.push({
        'name': min_price + '-' + max_price,
        'type': '',
        'id': 'budget',
        'id_name': 'filter_budget',
        'classname': 'budget'
      });
    }
    if (CommonFloor.defaults['common']['area_max'] !== "") {
      area_min = CommonFloor.defaults['common']['area_min'];
      area_max = CommonFloor.defaults['common']['area_max'];
      area.push({
        'name': area_min + '-' + area_max,
        'type': project.get('measurement_units'),
        'id': 'area',
        'id_name': 'filter_area',
        'classname': 'area'
      });
    }
    if (CommonFloor.defaults['common']['floor_max'] !== "") {
      floor_min = CommonFloor.defaults['common']['floor_min'];
      floor_max = CommonFloor.defaults['common']['floor_max'];
      floor.push({
        'name': 'Floor ' + floor_min + '-' + floor_max,
        'type': '',
        'id': 'floor',
        'id_name': 'filter_floor',
        'classname': 'floor'
      });
    }
    if (CommonFloor.defaults['common']['availability'] !== "") {
      status.push({
        'name': 'Available',
        'classname': 'types',
        'id': 'available',
        'id_name': 'filter_available'
      });
    }
    if (CommonFloor.defaults['common']['views'] !== "") {
      $.each(CommonFloor.defaults['common']['views'].split(','), function(index, value) {
        return views.push({
          'name': value,
          'classname': 'views',
          'id': value,
          'id_name': 'filter_' + value
        });
      });
    }
    if (CommonFloor.defaults['common']['facings'] !== "") {
      $.each(CommonFloor.defaults['common']['facings'].split(','), function(index, value) {
        return facings.push({
          'name': value,
          'classname': 'facings',
          'id': value,
          'id_name': 'filter_' + value
        });
      });
    }
    filters = CommonFloor.getApartmentFilters();
    if (Object.keys(filters).length === 0) {
      filters = [];
    }
    type.push({
      'filters': filters
    });
    main.push({
      'area': area,
      'price': price,
      'floor': floor,
      'status': status,
      'views': views,
      'facings': facings,
      'filters': type
    });
    return main;
  };

  CommonFloor.getFilters111 = function() {
    var area, filters, floor, flooring, price, results, status, type, typeArr, unitTypes, unitVariants, villaFilters;
    unitTypes = [];
    unitVariants = [];
    results = [];
    flooring = [];
    villaFilters = CommonFloor.getVillaFilters();
    $.merge(unitTypes, villaFilters.unitTypes);
    $.merge(unitVariants, villaFilters.unitVariants);
    $.merge(flooring, villaFilters.flooring);
    price = [];
    area = [];
    type = [];
    status = [];
    floor = [];
    if (CommonFloor.defaults['type'] !== "") {
      typeArr = CommonFloor.defaults['type'].split(',');
      $.each(typeArr, function(index, value) {
        var name;
        name = s.capitalize(value);
        name = name + '(s)';
        if (value === 'apartement') {
          name = 'Apartment(s)/Penthouse(s)';
        }
        return type.push({
          'name': name,
          'classname': 'types',
          'id': value,
          'id_name': 'filter_' + value
        });
      });
    }
    filters = {
      'type': type,
      'unitTypes': unitTypes,
      'unitVariants': unitVariants,
      'price': price,
      'area': area,
      'status': status,
      'floor': floor,
      'flooring': flooring
    };
    $.each(filters, function(index, value) {
      if (value.length === 0) {
        return filters = _.omit(filters, index);
      }
    });
    $.each(results, function(index, value) {
      if (value.count === 0) {
        return results = _.omit(results, index);
      }
    });
    return [filters, results];
  };

  CommonFloor.getVillaFilters = function() {
    var filters, flooring, status, unitTypes, unitVariants, unit_type, unit_variant;
    unitVariants = [];
    unit_variant = '';
    unitTypes = [];
    unit_type = '';
    status = [];
    flooring = [];
    $.each(CommonFloor.defaults['villa'], function(ind, val) {
      var param_val_arr;
      if (val !== "" && ind !== 'attributes') {
        param_val_arr = val.split(',');
        return $.each(param_val_arr, function(index, value) {
          if (value !== "" && ind === 'unit_variant_id') {
            if (!_.isUndefined(bunglowVariantMasterCollection.get(parseInt(value)))) {
              unit_variant = bunglowVariantMasterCollection.findWhere({
                'id': parseInt(value)
              });
              unitVariants.push({
                'typename': 'villa',
                'name': unit_variant.get('unit_variant_name'),
                'type': '(V)',
                'classname': 'variant_names',
                'id': unit_variant.get('id'),
                'id_name': 'filter_varinat_name' + unit_variant.get('id'),
                'index': ''
              });
            }
          }
          if (value !== "" && ind === 'unit_type_id' && $.inArray(parseInt(value), bunglowVariantMasterCollection.getVillaUnitTypes()) > -1) {
            unit_type = unitTypeMasterCollection.findWhere({
              'id': parseInt(value)
            });
            return unitTypes.push({
              'typename': 'villa',
              'name': unit_type.get('name'),
              'type': '(V)',
              'classname': 'unit_types',
              'id': unit_type.get('id'),
              'id_name': 'filter_unit_type' + unit_type.get('id'),
              'index': ''
            });
          }
        });
      } else if (val !== "" && ind === 'attributes') {
        return $.each(val, function(ind1, val1) {
          var temp_var;
          temp_var = val1.split(',');
          return $.each(temp_var, function(indexkey, valkey) {
            var temp;
            if ($.isNumeric(valkey)) {
              temp = parseInt(valkey);
            } else {
              temp = valkey;
            }
            if (valkey !== "" && $.inArray(temp, bunglowVariantMasterCollection.getVillaAttributes()) > -1) {
              return flooring.push({
                'typename': 'villa',
                'name': valkey,
                'type': '(V)',
                'classname': 'filter_flooring',
                'id': valkey,
                'id_name': 'filter_' + valkey,
                'index': ind1
              });
            }
          });
        });
      }
    });
    filters = {
      'unitVariants': unitVariants,
      'unitTypes': unitTypes,
      'flooring': flooring
    };
    return filters;
  };

  CommonFloor.getApartmentFilters = function() {
    var filters, flooring, status, unitTypes, unitVariants, unit_type, unit_variant;
    unitVariants = [];
    unit_variant = '';
    unitTypes = [];
    unit_type = '';
    status = [];
    flooring = [];
    $.each(CommonFloor.defaults['apartment'], function(ind, val) {
      var param_val_arr;
      if (val !== "" && ind !== 'attributes') {
        param_val_arr = val.split(',');
        return $.each(param_val_arr, function(index, value) {
          var type, unitTypeModel;
          if (value !== "" && ind === 'unit_variant_id') {
            if (!_.isUndefined(apartmentVariantMasterCollection.get(parseInt(value)))) {
              unit_variant = apartmentVariantMasterCollection.findWhere({
                'id': parseInt(value)
              });
              unitTypeModel = unitTypeMasterCollection.findWhere({
                'id': parseInt(unit_variant.get('unit_type_id'))
              });
              type = 'A';
              if (window.propertyTypes[unitTypeModel.get('property_type_id')] === 'Penthouses') {
                type = 'PH';
              }
              unitVariants.push({
                'typename': 'apartment',
                'name': unit_variant.get('unit_variant_name'),
                'type': '(' + type + ')',
                'classname': 'variant_names',
                'id': unit_variant.get('id'),
                'id_name': 'filter_varinat_name' + unit_variant.get('id'),
                'index': ''
              });
            }
          }
          if (value !== "" && ind === 'unit_type_id' && $.inArray(parseInt(value), apartmentVariantMasterCollection.getApartmentUnitTypes()) > -1) {
            unit_type = unitTypeMasterCollection.findWhere({
              'id': parseInt(value)
            });
            type = 'A';
            if (window.propertyTypes[unit_type.get('property_type_id')] === 'Penthouses') {
              type = 'PH';
            }
            return unitTypes.push({
              'typename': 'apartment',
              'name': unit_type.get('name'),
              'type': '(' + type + ')',
              'classname': 'unit_types',
              'id': unit_type.get('id'),
              'id_name': 'filter_unit_type' + unit_type.get('id'),
              'index': ''
            });
          }
        });
      } else if (val !== "" && ind === 'attributes') {
        return $.each(val, function(ind1, val1) {
          var temp_var;
          temp_var = val1.split(',');
          return $.each(temp_var, function(indexkey, valkey) {
            var attributes, temp;
            if ($.isNumeric(valkey)) {
              temp = parseInt(valkey);
            } else {
              temp = valkey;
            }
            attributes = apartmentVariantMasterCollection.getApartmentAttributes();
            if (valkey !== "" && $.inArray(temp, attributes[0]) > -1) {
              return flooring.push({
                'typename': 'apartment',
                'name': valkey,
                'type': '(A)',
                'classname': 'filter_flooring',
                'id': valkey,
                'id_name': 'filter_' + valkey,
                'index': ind1
              });
            }
          });
        });
      }
    });
    filters = {
      'unitVariants': unitVariants,
      'unitTypes': unitTypes,
      'flooring': flooring
    };
    return filters;
  };

  CommonFloor.getPlotFilters = function() {
    var filters, flooring, status, unitTypes, unitVariants, unit_type, unit_variant;
    unitVariants = [];
    unit_variant = '';
    unitTypes = [];
    unit_type = '';
    status = [];
    flooring = [];
    $.each(CommonFloor.defaults['plot'], function(ind, val) {
      var param_val_arr;
      if (val !== "" && ind !== 'attributes') {
        param_val_arr = val.split(',');
        return $.each(param_val_arr, function(index, value) {
          if (value !== "" && ind === 'unit_variant_id') {
            if (!_.isUndefined(plotVariantMasterCollection.get(parseInt(value)))) {
              unit_variant = plotVariantMasterCollection.findWhere({
                'id': parseInt(value)
              });
              unitVariants.push({
                'typename': 'plot',
                'name': unit_variant.get('unit_variant_name'),
                'type': '(P)',
                'classname': 'variant_names',
                'id': unit_variant.get('id'),
                'id_name': 'filter_varinat_name' + unit_variant.get('id'),
                'index': ''
              });
            }
          }
          if (value !== "" && ind === 'unit_type_id' && $.inArray(parseInt(value), plotVariantMasterCollection.getPlotUnitTypes()) > -1) {
            unit_type = unitTypeMasterCollection.findWhere({
              'id': parseInt(value)
            });
            return unitTypes.push({
              'typename': 'plot',
              'name': unit_type.get('name'),
              'type': '(P)',
              'classname': 'unit_types',
              'id': unit_type.get('id'),
              'id_name': 'filter_unit_type' + unit_type.get('id'),
              'index': ''
            });
          }
        });
      } else if (val !== "" && ind === 'attributes') {
        return $.each(val, function(ind1, val1) {
          var temp_var;
          temp_var = val1.split(',');
          return $.each(temp_var, function(indexkey, valkey) {
            var temp;
            if ($.isNumeric(valkey)) {
              temp = parseInt(valkey);
            } else {
              temp = valkey;
            }
            if (valkey !== "" && $.inArray(temp, plotVariantMasterCollection.getPlotAttributes()) > -1) {
              return flooring.push({
                'typename': 'plot',
                'name': valkey,
                'type': '(P)',
                'classname': 'filter_flooring',
                'id': valkey,
                'id_name': 'filter_' + valkey,
                'index': ind1
              });
            }
          });
        });
      }
    });
    filters = {
      'unitVariants': unitVariants,
      'unitTypes': unitTypes,
      'flooring': flooring
    };
    return filters;
  };

  CommonFloor.getStatus = function() {
    var status, status_arr;
    status = [];
    status_arr = [];
    unitMasterCollection.each(function(item) {
      if (($.inArray(item.get('availability'), status_arr)) === -1) {
        status_arr.push(item.get('availability'));
        return status.push({
          'id': item.get('availability'),
          'name': s.humanize(item.get('availability'))
        });
      }
    });
    return status;
  };

  CommonFloor.getStatusFilters = function() {
    var response, status, statusColl, statusIds;
    status = [];
    response = CommonFloor.getStatus();
    statusColl = new Backbone.Collection(response);
    statusIds = statusColl.pluck('id');
    $.each(CommonFloor.defaults, function(ind, val) {
      var param_val_arr;
      if (ind === 'availability' && val !== "") {
        param_val_arr = val.split(',');
        return $.each(param_val_arr, function(index, value) {
          if (value !== "" && ind === 'availability' && $.inArray(value, statusIds) > -1) {
            return status.push(s.humanize(value));
          }
        });
      }
    });
    return {
      'status': status
    };
  };

  CommonFloor.filterBuilding = function(id) {
    var collection;
    collection = unitCollection.where({
      'building_id': id
    });
    unitCollection.reset(collection);
    CommonFloor.resetCollections();
    unitTempCollection.reset(unitCollection.toArray());
    return window.building_id = id;
  };

  CommonFloor.getUnitsProperty = function(unitModel) {
    var property, temp, text, type, unitType;
    unitType = unitTypeMasterCollection.findWhere({
      'id': unitModel.get('unit_type_id')
    });
    property = window.propertyTypes[unitType.get('property_type_id')];
    text = '';
    type = '';
    window.tempColl = unitCollection.clone();
    if (s.decapitalize(property) === 'apartments') {
      temp = [];
      $.each(apartmentVariantCollection.getApartmentUnits(), function(index, value) {
        if (value.get('availability') === 'available') {
          return temp.push(value);
        }
      });
      window.tempColl.reset(temp);
      text = 'Similar ' + s.decapitalize(property) + ' based on your filters';
      type = 'apartment';
    }
    if (s.decapitalize(property) === 'penthouses') {
      temp = [];
      $.each(apartmentVariantCollection.getPenthouseUnits(), function(index, value) {
        if (value.get('availability') === 'available') {
          return temp.push(value);
        }
      });
      window.tempColl.reset(temp);
      text = 'Similar ' + s.decapitalize(property) + ' based on your filters';
      type = s.decapitalize(property);
    }
    if (s.decapitalize(property) === 'villas/Bungalows') {
      temp = [];
      $.each(bunglowVariantCollection.getBunglowUnits(), function(index, value) {
        if (value.get('availability') === 'available') {
          return temp.push(value);
        }
      });
      window.tempColl.reset(temp);
      text = 'Similar ' + s.decapitalize(property) + ' based on your filters';
      type = 'villa';
    }
    if (s.decapitalize(property) === 'plots') {
      temp = [];
      $.each(plotVariantCollection.getPlotUnits(), function(index, value) {
        if (value.get('availability') === 'available') {
          return temp.push(value);
        }
      });
      window.tempColl.reset(temp);
      text = 'Similar ' + s.decapitalize(property) + ' based on your filters';
      type = s.decapitalize(property);
    }
    return [window.tempColl, text, type];
  };

  CommonFloor.getApartmentsInView = function() {
    var newUnits, units;
    units = [];
    newUnits = [];
    $('.apartment').each(function(index, value) {
      var id;
      id = parseInt(value.id);
      return units.push(value.id);
    });
    newUnits = $.map(units, function(item) {
      return parseInt(item);
    });
    return newUnits;
  };

  CommonFloor.applyOnViewClass = function() {
    var classview, units, viewUnits;
    viewUnits = CommonFloor.getApartmentsInView();
    classview = '';
    units = unitCollection.toArray();
    $.each(units, function(index, value) {
      var id;
      id = parseInt(value.id);
      if ($.inArray(id, viewUnits) === -1) {
        $('#apartment' + id).addClass('onview');
        return $('#apartment' + id).hide();
      } else {
        $('#apartment' + id).removeClass('onview');
        return $('#apartment' + id).show();
      }
    });
    return $('#inview').bootstrapToggle('on');
  };

  CommonFloor.filterFlooringAttributes = function() {
    var flooring;
    flooring = [];
    unitCollection.each(function(item) {
      var arr, attributes, unitDetails, unitVarinat;
      unitDetails = window.unit.getUnitDetails(item.get('id'));
      unitVarinat = unitDetails[0];
      attributes = unitVarinat.get('variant_attributes').flooring;
      arr = CommonFloor.defaults['flooring'].split(',');
      if ($.inArray(attributes, arr) > -1) {
        return flooring.push(item);
      }
    });
    return unitCollection.reset(flooring);
  };

  CommonFloor.filterNew = function() {
    var collection, paramkey, params, temp;
    collection = [];
    temp = [];
    params = CommonFloor.defaults['type'].split(',');
    if (CommonFloor.defaults['type'] === "") {
      $.merge(collection, unitCollection.toArray());
    }
    $.each(params, function(ind, val) {
      if (val === 'villa') {
        unitCollection.reset(unitMasterCollection.toArray());
        temp = CommonFloor.filterVillas();
      }
      if (val === 'apartment') {
        unitCollection.reset(unitMasterCollection.toArray());
        temp = CommonFloor.filterApartments();
      }
      if (val === 'plot') {
        unitCollection.reset(unitMasterCollection.toArray());
        temp = CommonFloor.filterPlots();
      }
      return $.merge(collection, temp);
    });
    unitCollection.reset(collection);
    if (CommonFloor.defaults['common']['price_max'] !== "") {
      CommonFloor.filterBudget();
    }
    if (CommonFloor.defaults['common']['area_max'] !== "") {
      CommonFloor.filterArea();
    }
    if (CommonFloor.defaults['common']['floor_max'] !== "") {
      CommonFloor.filterFloor();
    }
    if (CommonFloor.defaults['common']['views'] !== "") {
      CommonFloor.filterViews();
    }
    if (CommonFloor.defaults['common']['facings'] !== "") {
      CommonFloor.filterFacings();
    }
    if (CommonFloor.defaults['common']['availability'] !== "") {
      paramkey = {};
      paramkey['availability'] = 'available';
      temp = unitCollection.where(paramkey);
      unitCollection.reset(temp);
    }
    CommonFloor.applyFliterClass();
    return CommonFloor.resetCollections();
  };

  CommonFloor.filterStepNew = function() {
    var collection, paramkey, temp;
    collection = [];
    temp = [];
    temp = CommonFloor.filterApartments();
    $.merge(collection, temp);
    unitCollection.reset(collection);
    if (CommonFloor.defaults['common']['price_max'] !== "") {
      CommonFloor.filterBudget();
    }
    if (CommonFloor.defaults['common']['area_max'] !== "") {
      CommonFloor.filterArea();
    }
    if (CommonFloor.defaults['common']['floor_max'] !== "") {
      CommonFloor.filterFloor();
    }
    if (CommonFloor.defaults['common']['views'] !== "") {
      CommonFloor.filterViews();
    }
    if (CommonFloor.defaults['common']['facings'] !== "") {
      CommonFloor.filterFacings();
    }
    if (CommonFloor.defaults['common']['availability'] !== "") {
      paramkey = {};
      paramkey['availability'] = 'available';
      temp = unitCollection.where(paramkey);
      unitCollection.reset(temp);
    }
    CommonFloor.applyFliterClass();
    return CommonFloor.resetCollections();
  };

  CommonFloor.filterVillas = function() {
    var collection, newColl, tempColl;
    collection = [];
    collection = CommonFloor.resetProperyType('villa');
    newColl = new Backbone.Collection(collection);
    tempColl = [];
    $.each(CommonFloor.defaults['villa'], function(index, value) {
      var attributes, param_val, temp;
      temp = [];
      if (value !== "" && index === 'attributes' && !_.isEmpty(value)) {
        attributes = bunglowVariantCollection.getBunglowUnits();
        if (temp.length === 0) {
          temp = bunglowVariantCollection.getBunglowUnits();
        }
        $.each(CommonFloor.defaults['villa']['attributes'], function(ind1, val1) {
          if (val1 !== "") {
            return attributes = CommonFloor.filterVillaAttributes(ind1, val1);
          }
        });
        newColl.reset(attributes);
      }
      if (value !== "" && index !== 'attributes') {
        param_val = value.split(',');
        $.each(param_val, function(key, key_val) {
          var paramkey;
          paramkey = {};
          paramkey[index] = parseInt(key_val);
          tempColl = unitCollection.where(paramkey);
          if (tempColl.length === 0) {
            return temp = [];
          } else {
            return $.merge(temp, unitCollection.where(paramkey));
          }
        });
        unitCollection.reset(temp);
        return newColl.reset(temp);
      }
    });
    return newColl.toArray();
  };

  CommonFloor.filterVillaAttributes = function(ind1, val1) {
    var flooring, newtempColl, tem, tempColl;
    flooring = [];
    tempColl = bunglowVariantCollection.getBunglowUnits();
    newtempColl = _.intersection(tempColl, unitCollection.toArray());
    $.each(newtempColl, function(item, value) {
      var arr, temp, unitDetails, unitVarinat, val, valkey;
      unitDetails = window.unit.getUnitDetails(value.get('id'));
      unitVarinat = unitDetails[0];
      valkey = unitVarinat.get('variant_attributes');
      val = _.propertyOf(valkey)(ind1);
      arr = val1.split(',');
      if (_.isUndefined(val)) {
        return;
      }
      if (_.isArray(val)) {
        $.each(val, function(ind1, val1) {
          var temp;
          if (_.isString(val1)) {
            temp = val1;
          } else {
            temp = val1.toString();
          }
          if ($.inArray(temp, arr) > -1) {
            return flooring.push(value);
          }
        });
      } else {
        if (_.isString(val)) {
          temp = val;
        } else {
          temp = val.toString();
        }
        if ($.inArray(temp, arr) > -1) {
          flooring.push(value);
        }
      }
      return unitCollection.reset(flooring);
    });
    tem = unitCollection.toArray();
    return tem;
  };

  CommonFloor.filterApartments = function() {
    var collection, newColl, tempColl;
    collection = [];
    collection = CommonFloor.resetProperyType('apartment');
    newColl = new Backbone.Collection(collection);
    tempColl = [];
    $.each(CommonFloor.defaults['apartment'], function(index, value) {
      var attributes, param_val, temp;
      temp = [];
      if (value !== "" && index === 'attributes' && !_.isEmpty(value)) {
        attributes = [];
        $.merge(attributes, apartmentVariantCollection.getApartmentUnits());
        $.merge(attributes, apartmentVariantCollection.getPenthouseUnits());
        if (temp.length === 0) {
          temp = apartmentVariantCollection.getApartmentUnits();
        }
        $.each(CommonFloor.defaults['apartment']['attributes'], function(ind1, val1) {
          if (val1 !== "") {
            return attributes = CommonFloor.filterApartmentAttributes(ind1, val1);
          }
        });
        newColl.reset(attributes);
      }
      if (value !== "" && index !== 'attributes') {
        param_val = value.split(',');
        $.each(param_val, function(key, key_val) {
          var paramkey;
          paramkey = {};
          paramkey[index] = parseInt(key_val);
          tempColl = unitCollection.where(paramkey);
          if (tempColl.length === 0) {
            return temp = [];
          } else {
            return $.merge(temp, unitCollection.where(paramkey));
          }
        });
        unitCollection.reset(temp);
        return newColl.reset(temp);
      }
    });
    return newColl.toArray();
  };

  CommonFloor.filterApartmentAttributes = function(ind1, val1) {
    var flooring, newtempColl, tem, tempColl;
    flooring = [];
    tempColl = [];
    $.merge(tempColl, apartmentVariantCollection.getApartmentUnits());
    $.merge(tempColl, apartmentVariantCollection.getPenthouseUnits());
    newtempColl = _.intersection(tempColl, unitCollection.toArray());
    $.each(newtempColl, function(item, value) {
      var arr, temp, unitDetails, unitVarinat, val, valkey;
      unitDetails = window.unit.getUnitDetails(value.get('id'));
      unitVarinat = unitDetails[0];
      valkey = unitVarinat.get('variant_attributes');
      val = _.propertyOf(valkey)(ind1);
      arr = val1.split(',');
      if (_.isUndefined(val)) {
        return;
      }
      if (_.isArray(val)) {
        $.each(val, function(ind1, val1) {
          var temp;
          if (_.isString(val1)) {
            temp = val1;
          } else {
            temp = val1.toString();
          }
          if ($.inArray(temp, arr) > -1) {
            return flooring.push(value);
          }
        });
      } else {
        if (_.isString(val)) {
          temp = val;
        } else {
          temp = val.toString();
        }
        if ($.inArray(temp, arr) > -1) {
          flooring.push(value);
        }
      }
      return unitCollection.reset(flooring);
    });
    tem = unitCollection.toArray();
    return tem;
  };

  CommonFloor.filterPlots = function() {
    var collection, newColl, tempColl;
    collection = [];
    collection = CommonFloor.resetProperyType('plot');
    newColl = new Backbone.Collection(collection);
    tempColl = [];
    $.each(CommonFloor.defaults['plot'], function(index, value) {
      var attributes, param_val, temp;
      temp = [];
      if (value !== "" && index === 'attributes' && !_.isEmpty(value)) {
        attributes = plotVariantCollection.getPlotUnits();
        if (temp.length === 0) {
          temp = plotVariantCollection.getPlotUnits();
        }
        $.each(CommonFloor.defaults['plot']['attributes'], function(ind1, val1) {
          if (val1 !== "") {
            return attributes = CommonFloor.filterPlotAttributes(ind1, val1);
          }
        });
        newColl.reset(attributes);
      }
      if (value !== "" && index !== 'attributes') {
        param_val = value.split(',');
        $.each(param_val, function(key, key_val) {
          var paramkey;
          paramkey = {};
          paramkey[index] = parseInt(key_val);
          tempColl = unitCollection.where(paramkey);
          if (tempColl.length === 0) {
            return temp = [];
          } else {
            return $.merge(temp, unitCollection.where(paramkey));
          }
        });
        unitCollection.reset(temp);
        return newColl.reset(temp);
      }
    });
    return newColl.toArray();
  };

  CommonFloor.filterPlotAttributes = function(ind1, val1) {
    var flooring, newtempColl, tem, tempColl;
    flooring = [];
    tempColl = plotVariantCollection.getPlotUnits();
    newtempColl = _.intersection(tempColl, unitCollection.toArray());
    $.each(newtempColl, function(item, value) {
      var arr, temp, unitDetails, unitVarinat, val, valkey;
      unitDetails = window.unit.getUnitDetails(value.get('id'));
      unitVarinat = unitDetails[0];
      valkey = unitVarinat.get('variant_attributes');
      val = _.propertyOf(valkey)(ind1);
      arr = val1.split(',');
      if (_.isUndefined(val)) {
        return;
      }
      if (_.isArray(val)) {
        $.each(val, function(ind1, val1) {
          var temp;
          if (_.isString(val1)) {
            temp = val1;
          } else {
            temp = val1.toString();
          }
          if ($.inArray(temp, arr) > -1) {
            return flooring.push(value);
          }
        });
      } else {
        if (_.isString(val)) {
          temp = val;
        } else {
          temp = val.toString();
        }
        if ($.inArray(temp, arr) > -1) {
          flooring.push(value);
        }
      }
      return unitCollection.reset(flooring);
    });
    tem = unitCollection.toArray();
    return tem;
  };

  CommonFloor.removeStepFilters = function() {
    $.each(CommonFloor.defaults['apartment'], function(index, value) {
      var actualTypes, new_types, step_types, types, value_Arr;
      if (value !== "") {
        step_types = CommonFloor.defaults['step_three'][index].split(',');
        types = step_types.map(function(item) {
          return parseInt(item);
        });
        value_Arr = value.split(',');
        new_types = value_Arr.map(function(item) {
          return parseInt(item);
        });
        actualTypes = _.difference(new_types, types);
        CommonFloor.defaults['apartment'][index] = actualTypes.join(',');
        return CommonFloor.defaults['step_three'][index] = "";
      }
    });
    $.each(CommonFloor.defaults['common'], function(index, value) {
      return CommonFloor.defaults['common'][index] = "";
    });
    unitCollection.reset(unitMasterCollection.toArray());
    CommonFloor.resetCollections();
    return CommonFloor.filterNew();
  };

  $(window).bind('hashchange', function() {
    CommonFloor.defaults['type'] = "";
    $.each(CommonFloor.defaults['villa'], function(index, value) {
      return CommonFloor.defaults['villa'][index] = "";
    });
    $.each(CommonFloor.defaults['plot'], function(index, value) {
      return CommonFloor.defaults['plot'][index] = "";
    });
    $.each(CommonFloor.defaults['apartment'], function(index, value) {
      return CommonFloor.defaults['apartment'][index] = "";
    });
    $.each(CommonFloor.defaults['common'], function(index, value) {
      return CommonFloor.defaults['common'][index] = "";
    });
    unitCollection.reset(unitMasterCollection.toArray());
    CommonFloor.resetCollections();
    CommonFloor.filterNew();
    return clearTimeout(window.renderLoopInterval);
  });

  CommonFloor.filterViews = function() {
    var temp;
    CommonFloor.resetCollections();
    temp = [];
    unitCollection.each(function(item) {
      var views;
      views = item.get('views');
      return $.each(views, function(ind, val) {
        if ($.inArray(val, CommonFloor.defaults['common']['views'].split(',')) > -1 && val !== "") {
          return temp.push(item);
        }
      });
    });
    return unitCollection.reset(temp);
  };

  CommonFloor.filterFacings = function() {
    var temp;
    CommonFloor.resetCollections();
    temp = [];
    unitCollection.each(function(item) {
      var facings;
      facings = item.get('direction');
      if ($.inArray(facings, CommonFloor.defaults['common']['facings'].split(',')) > -1 && facings !== "") {
        return temp.push(item);
      }
    });
    return unitCollection.reset(temp);
  };

}).call(this);

//# sourceMappingURL=../../frontend/common/common.js.map
(function() {
  var CenterView, LeftView, TopView,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  CommonFloor.ProjectLayoutView = (function(superClass) {
    extend(ProjectLayoutView, superClass);

    function ProjectLayoutView() {
      return ProjectLayoutView.__super__.constructor.apply(this, arguments);
    }

    ProjectLayoutView.prototype.template = '#project-template';

    return ProjectLayoutView;

  })(Marionette.LayoutView);

  CommonFloor.ProjectCtrl = (function(superClass) {
    extend(ProjectCtrl, superClass);

    function ProjectCtrl() {
      return ProjectCtrl.__super__.constructor.apply(this, arguments);
    }

    ProjectCtrl.prototype.initialize = function() {
      var id, region;
      id = PROJECTID;
      project.setProjectAttributes(id);
      if (jQuery.isEmptyObject(project.toJSON())) {
        region = new Marionette.Region({
          el: '#noFound-template'
        });
        return this.show(new CommonFloor.NothingFoundView);
      } else {
        return this.show(new CommonFloor.ProjectLayoutView);
      }
    };

    return ProjectCtrl;

  })(Marionette.RegionController);

  TopView = (function(superClass) {
    extend(TopView, superClass);

    function TopView() {
      return TopView.__super__.constructor.apply(this, arguments);
    }

    TopView.prototype.template = Handlebars.compile('<div class="row"> <div class="col-md-12 col-xs-12 col-sm-12 animated fadeIn"> <h2 class="proj-name"><small>{{i10n "explore"}}</small> {{project_title}}</h2> <!--<div class="pull-right"> <div class="toggle_radio"> <input type="radio" checked class="toggle_option" id="first_toggle" name="toggle_option"> <input type="radio" class="toggle_option" id="second_toggle" name="toggle_option"> <input type="radio" class="toggle_option" id="third_toggle" name="toggle_option"> <label for="first_toggle"><p>Morning</p></label> <label for="second_toggle"><p>Afternoon</p></label> <label for="third_toggle"><p>Evening</p></label> <div class="toggle_option_slider"> </div> </div> </div>--> <!--<span class="header-cta"> Call us on 89555444 </span>--> <div class="clearfix"></div> </div> </div>');

    TopView.prototype.className = 'container-fluid';

    return TopView;

  })(Marionette.ItemView);

  CommonFloor.TopCtrl = (function(superClass) {
    extend(TopCtrl, superClass);

    function TopCtrl() {
      return TopCtrl.__super__.constructor.apply(this, arguments);
    }

    TopCtrl.prototype.initialize = function() {
      return this.show(new TopView({
        model: project
      }));
    };

    return TopCtrl;

  })(Marionette.RegionController);

  LeftView = (function(superClass) {
    extend(LeftView, superClass);

    function LeftView() {
      return LeftView.__super__.constructor.apply(this, arguments);
    }

    LeftView.prototype.template = Handlebars.compile('<div class="hidden"> <div id="proj_info"> <div class="big-tooltip"> <div class="svg-info not-available"> <div class="action-bar"> <h5>{{i10n "project_by"}}</h5> <img src="{{logo}}" class="img-responsive builder-logo"> </div> <h5 class="pull-left m-t-0">{{address}}</h5> <div class="details"> {{#propertyTypes}} <div> {{prop_type}} <span class="text-muted">({{unit_types}})</span> </div> {{/propertyTypes}} <div class="text-muted text-default"> Click arrow to move forward</div> </div> <div class="circle action_button"> <span class="arrow-up icon-chevron-right"></span> </div> </div> </div> </div> <div class="proj-info" style="width:140px;height:170px;"> <div class="proj-logo section"> <h3 class="m-t-10"><strong>{{i10n "project_by"}}</strong></h3> <img src="{{logo}}" class="img-responsive builder-logo"> </div> <hr class="embossed" /> <div class="proj-details"> <h3 class="m-t-0"><strong>{{i10n "project_details"}}</strong></h3> <!--<span class="icon-map-marker"></span> <strong>Address: </strong><br>--> {{address}} </div> <hr class="embossed m-b-0" /> {{#propertyTypes}} <div class="prop-types {{prop_type}}"> <!--<h4 class="m-b-5 m-t-0 text-primary">{{prop_type}}</h4> <span>{{i10n "project_type"}}:</span> {{prop_type}} <p> <span>{{i10n "starting_area"}}:</span> {{starting_area}}' + project.get('measurement_units') + '</p>--> <span class="prop-icon"></span> <div class="unit-types"> {{i10n "unit_types"}}:<br> <span>{{unit_types}}</span> </div> <!--<p> <span>Available:</span> {{#availability}} {{count}}	{{status}} {{/availability}} </p> <p> <span>{{i10n "starting_price"}}:</span>  {{starting_price}} </p>--> </div> {{/propertyTypes}} </div> <!--<div class="info-slider"> <div class="text-center"> <img src="../images/marker-img.png" class="img-responsive marker-img"> {{i10n "know_your_neighbour"}} </div> </div>--> </div>');

    LeftView.prototype.serializeData = function() {
      var availability, data, properties, propertyTypes, propertyTypesData;
      data = LeftView.__super__.serializeData.call(this);
      propertyTypesData = this.model.get('project_property_types');
      properties = this.model.get('property_types');
      propertyTypes = [];
      availability = [];
      $.each(propertyTypesData, function(index, value) {
        $.each(value.availability, function(ind, val) {
          return availability.push({
            'status': s.capitalize(ind),
            'count': val
          });
        });
        return propertyTypes.push({
          'prop_type': s.capitalize(properties[index]),
          'unit_types': value.unit_types.join(', '),
          'starting_area': value.starting_area,
          'starting_price': window.numDifferentiation(value.starting_price),
          'availability': availability
        });
      });
      data.propertyTypes = propertyTypes;
      return data;
    };

    return LeftView;

  })(Marionette.ItemView);

  CommonFloor.LeftCtrl = (function(superClass) {
    extend(LeftCtrl, superClass);

    function LeftCtrl() {
      return LeftCtrl.__super__.constructor.apply(this, arguments);
    }

    LeftCtrl.prototype.initialize = function() {
      return this.show(new LeftView({
        model: project
      }));
    };

    return LeftCtrl;

  })(Marionette.RegionController);

  CenterView = (function(superClass) {
    extend(CenterView, superClass);

    function CenterView() {
      return CenterView.__super__.constructor.apply(this, arguments);
    }

    CenterView.prototype.template = Handlebars.compile('<div class="col-md-12 col-sm-12 col-xs-12 us-right-content animated fadeIn"> <div class="step1-container"> <div class="img-loader "> <div class="square" ></div> <div class="square"></div> <div class="square last"></div> <div class="square clear"></div> <div class="square"></div> <div class="square last"></div> <div class="square clear"></div> <div class="square "></div> <div class="square last"></div> </div> <div class="step1-wrapper animated fadeIn hidden"> <img src="../../projects/3/google_earth/step1.jpg" class="firstimage img-responsive earth-img" /> <div class="svg-area"></div> </div> </div> </div>');

    CenterView.prototype.ui = {
      svgContainer: '.step1-container'
    };

    CenterView.prototype.events = {
      'click .step1-marker': function(e) {
        $('.step1-wrapper').attr('class', 'zoom');
        $('.step1').addClass('animated fadeOut');
        $('.step1-marker').tooltipster('hide');
        return setTimeout(function(x) {
          return CommonFloor.checkPropertyType();
        }, 100);
      },
      'mouseover .amenity': function(e) {
        var html;
        html = '<div class="row"> <div class="col-sm-12 b-r"> <h4 class="text-warning margin-none">' + $(e.currentTarget).attr('data-amenity-title') + '</h4> <h6 class="text-muted">' + $(e.currentTarget).attr('data-amenity-desc') + '</h6> </div> </div>';
        return $('.amenity').tooltipster('content', html);
      }
    };

    CenterView.prototype.onShow = function() {
      var PATH, img, windowHeight, windowWidth;
      PATH = BASEURL + '/projects/' + PROJECTID + '/google_earth/map.svg';
      windowHeight = $(window).innerHeight() - 56;
      $('.step1-container').css('height', windowHeight);
      $('.step1-container').css('min-width', windowHeight * 2);
      windowWidth = $(window).innerWidth();
      $('.earth-img').css('width', this.ui.svgContainer.width());
      img = this.model.get('step_one').svg;
      $('.firstimage').attr('src', img);
      return $('.firstimage').load(function() {
        $('.img-loader').addClass('hidden');
        return $('.svg-area').load(PATH, function() {
          $('.step1-wrapper').removeClass('hidden');
          $('.step1-marker').tooltipster({
            theme: 'tooltipster-shadow',
            contentAsHTML: true,
            onlyOne: true,
            arrow: false,
            offsetX: 180,
            interactive: true,
            animation: 'fade',
            content: $('#proj_info').html(),
            functionReady: function(e) {
              var svgHeight, svgWidth, tooltipHeight;
              $('.action_button').on('click', function(e) {
                $('.img-loader').removeClass('hidden');
                $('.step1-wrapper').attr('class', 'zoom');
                $('.step1').addClass('animated fadeOut');
                $('.step1-marker').tooltipster('hide');
                return setTimeout(function(x) {
                  return CommonFloor.checkPropertyType();
                }, 100);
              });
              tooltipHeight = $('.tooltipster-content').height() + 10;
              $('.action-bar').css('min-height', tooltipHeight);
              svgHeight = $(window).innerHeight() - 56;
              svgWidth = svgHeight * 2;
              if ($(window).width() < 1025) {
                $('.step1-container').css('min-height', svgHeight);
                $('.step1-container').css('min-width', svgWidth);
                return $('.svg-area').css('min-width', svgWidth);
              }
            }
          });
          $('.step1-marker').tooltipster('show');
          $('.amenity').tooltipster({
            theme: 'tooltipster-shadow marker-tooltip',
            contentAsHTML: true,
            onlyOne: true,
            arrow: false,
            trigger: 'hover'
          });
          return $('.unassign').attr('style', "opacity: 0;fill-opacity: 0;");
        });
      });
    };

    return CenterView;

  })(Marionette.ItemView);

  CommonFloor.CenterCtrl = (function(superClass) {
    extend(CenterCtrl, superClass);

    function CenterCtrl() {
      return CenterCtrl.__super__.constructor.apply(this, arguments);
    }

    CenterCtrl.prototype.initialize = function() {
      return this.show(new CenterView({
        model: project
      }));
    };

    return CenterCtrl;

  })(Marionette.RegionController);

}).call(this);

//# sourceMappingURL=../../frontend/project/project.controller.js.map
(function() {
  var TopMasterView, api,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  api = "";

  CommonFloor.ProjectMasterView = (function(superClass) {
    extend(ProjectMasterView, superClass);

    function ProjectMasterView() {
      return ProjectMasterView.__super__.constructor.apply(this, arguments);
    }

    ProjectMasterView.prototype.template = '#project-view-template';

    return ProjectMasterView;

  })(Marionette.LayoutView);

  CommonFloor.ProjectMasterCtrl = (function(superClass) {
    extend(ProjectMasterCtrl, superClass);

    function ProjectMasterCtrl() {
      return ProjectMasterCtrl.__super__.constructor.apply(this, arguments);
    }

    ProjectMasterCtrl.prototype.initialize = function() {
      if (jQuery.isEmptyObject(project.toJSON())) {
        project.setProjectAttributes(PROJECTID);
        CommonFloor.checkPropertyType();
      }
      if (bunglowVariantMasterCollection.length === 0 && apartmentVariantMasterCollection.length === 0 && plotVariantMasterCollection.length === 0) {
        return this.show(new CommonFloor.NothingFoundView);
      } else {
        return this.show(new CommonFloor.ProjectMasterView);
      }
    };

    return ProjectMasterCtrl;

  })(Marionette.RegionController);

  TopMasterView = (function(superClass) {
    extend(TopMasterView, superClass);

    function TopMasterView() {
      return TopMasterView.__super__.constructor.apply(this, arguments);
    }

    TopMasterView.prototype.template = Handlebars.compile('<div class="container-fluid animated fadeIn"> <div class="row"> <div class="col-md-12 col-xs-12 col-sm-12"> <div class="breadcrumb-bar"> <a class="unit_back" href="#"></a> </div> <div class="header-info"> <h2 class="pull-left proj-name">{{project_title}}</h2> <div class="proj-type-count"> {{#types}} <h2 class="pull-left">{{count.length}}</h2><p class="pull-left">{{type}}</p> {{/types}} </div> <div class="pull-left filter-result full"> <ul  id="flexiselDemo1"> {{#area}} <li> <div class="filter-pill"> {{name}} {{type}} <span class="icon-cross " id="{{id_name}}" data-id="{{id}}" data-type="{{typename}}"></span> </div> </li> {{/area}} {{#budget}} <li> <div class="filter-pill"> <span class="icon-rupee-icn"></span>{{name}} {{type}}</span> <span class="icon-cross " id="{{id_name}}" data-id="{{id}}" data-type="{{typename}}"></span> </div> </li> {{/budget}} {{#views}} <li> <div class="filter-pill"> {{name}}  <span class="icon-cross {{classname}}" id="{{id_name}}" data-id="{{id}}" ></span> </div> </li> {{/views}} {{#facings}} <li> <div class="filter-pill"> {{name}} <span class="icon-cross {{classname}}" id="{{id_name}}" data-id="{{id}}" ></span> </div> </li> {{/facings}} {{#status}} <li> <div class="filter-pill"> {{name}} {{type}} <span class="icon-cross " id="{{id_name}}" data-id="{{id}}" data-type="{{typename}}"></span> </div> </li> {{/status}} {{#each  filters}} <li> <div class="filter-title"> {{name}}  <span class="icon-cross {{classname}}" id="{{id_name}}" data-id="{{id}}" data-index="{{index}}"></span> </div> </li> {{#filters}} {{#each this}} {{#each this}} <li> <div class="filter-pill"> {{name}} <span class="icon-cross {{classname}}" id="{{id_name}}" data-id="{{id}}"  data-index="{{index}}"  data-type="{{typename}}"></span> </div> </li>{{/each}} {{/each}} {{/filters}} {{/each}} </ul> <!--{{#each  filters}} {{#each this}} <div class="filter-pill"  > {{this.name}}{{this.type}} <span class="icon-cross {{classname}}" id="{{id_name}}" data-id="{{id}}"  ></span> </div> {{/each}}{{/each }}--> </div> <div class="clearfix"></div> </div> </div> </div> </div>');

    TopMasterView.prototype.ui = {
      unitBack: '.unit_back',
      unitTypes: '.unit_types',
      priceMin: '.price_min',
      priceMax: '.price_max',
      apply: '.apply',
      variantNames: '.variant_names',
      area: '#filter_area',
      budget: '#filter_budget',
      types: '.types',
      status: '#filter_available',
      filter_flooring: '.filter_flooring',
      views: '.views',
      facings: '.facings'
    };

    TopMasterView.prototype.serializeData = function() {
      var data, main, response, status;
      data = TopMasterView.__super__.serializeData.call(this);
      status = CommonFloor.getStatusFilters();
      if (status.length !== 0) {
        data.status = status;
      }
      main = CommonFloor.getFilters();
      data.filters = main[0].filters;
      data.area = main[0].area;
      data.budget = main[0].price;
      data.status = main[0].status;
      data.views = main[0].views;
      data.facings = main[0].facings;
      response = CommonFloor.propertyTypes();
      data.types = response;
      return data;
    };

    TopMasterView.prototype.events = function() {
      return {
        'click @ui.unitBack': function(e) {
          e.preventDefault();
          unitCollection.reset(unitMasterCollection.toArray());
          CommonFloor.resetCollections();
          CommonFloor.filterNew();
          unitCollection.trigger('available');
          return CommonFloor.navigate('/', true);
        },
        'click @ui.types': function(e) {
          var arr, index;
          arr = CommonFloor.defaults['type'].split(',');
          index = arr.indexOf($(e.currentTarget).attr('data-id'));
          arr.splice(index, 1);
          CommonFloor.defaults['type'] = arr.join(',');
          if ($(e.currentTarget).attr('data-id') === 'villa') {
            this.removeVillaFilters();
          }
          if ($(e.currentTarget).attr('data-id') === 'apartment') {
            this.removeAptFilters();
          }
          if ($(e.currentTarget).attr('data-id') === 'plot') {
            this.removePlotFilters();
          }
          this.trigger('render:view');
          unitCollection.reset(unitMasterCollection.toArray());
          CommonFloor.resetCollections();
          CommonFloor.filterNew();
          return unitCollection.trigger('available');
        },
        'click @ui.unitTypes': function(e) {
          var type, types;
          types = [];
          type = $(e.currentTarget).attr('data-type');
          if (CommonFloor.defaults[type]['unit_type_id'] !== "") {
            types = CommonFloor.defaults[type]['unit_type_id'].split(',');
            types = types.map(function(item) {
              return parseInt(item);
            });
          }
          types = _.without(types, parseInt($(e.currentTarget).attr('data-id')));
          CommonFloor.defaults[type]['unit_type_id'] = types.join(',');
          unitCollection.reset(unitMasterCollection.toArray());
          CommonFloor.resetCollections();
          CommonFloor.filterNew();
          unitCollection.trigger('available');
          return this.trigger('render:view');
        },
        'click @ui.variantNames': function(e) {
          var type, types;
          types = [];
          type = $(e.currentTarget).attr('data-type');
          if (CommonFloor.defaults[type]['unit_variant_id'] !== "") {
            types = CommonFloor.defaults[type]['unit_variant_id'].split(',');
            types = types.map(function(item) {
              return parseInt(item);
            });
          }
          types = _.without(types, parseInt($(e.currentTarget).attr('data-id')));
          CommonFloor.defaults[type]['unit_variant_id'] = types.join(',');
          unitCollection.reset(unitMasterCollection.toArray());
          CommonFloor.resetCollections();
          CommonFloor.filterNew();
          unitCollection.trigger('available');
          return this.trigger('render:view');
        },
        'click @ui.status': function(e) {
          CommonFloor.defaults['common']['availability'] = "";
          unitCollection.reset(unitMasterCollection.toArray());
          CommonFloor.resetCollections();
          CommonFloor.filterNew();
          unitCollection.trigger('available');
          return this.trigger('render:view');
        },
        'click @ui.area': function(e) {
          CommonFloor.defaults['common']['area_max'] = "";
          CommonFloor.defaults['common']['area_min'] = "";
          unitCollection.reset(unitMasterCollection.toArray());
          CommonFloor.resetCollections();
          CommonFloor.filterNew();
          unitCollection.trigger('available');
          return this.trigger('render:view');
        },
        'click @ui.budget': function(e) {
          CommonFloor.defaults['common']['price_max'] = "";
          CommonFloor.defaults['common']['price_min'] = "";
          unitCollection.reset(unitMasterCollection.toArray());
          CommonFloor.resetCollections();
          CommonFloor.filterNew();
          unitCollection.trigger('available');
          return this.trigger('render:view');
        },
        'click @ui.filter_flooring': function(e) {
          var index, type, types;
          types = [];
          type = $(e.currentTarget).attr('data-type');
          index = $(e.currentTarget).attr('data-index');
          if (CommonFloor.defaults[type]['attributes'][index] !== "") {
            types = CommonFloor.defaults[type]['attributes'][index].split(',');
          }
          console.log(types = _.without(types, $(e.currentTarget).attr('data-id')));
          CommonFloor.defaults[type]['attributes'][index] = types.join(',');
          unitCollection.reset(unitMasterCollection.toArray());
          CommonFloor.resetCollections();
          CommonFloor.filterNew();
          unitCollection.trigger('available');
          return this.trigger('render:view');
        },
        'click @ui.facings': function(e) {
          var types;
          types = CommonFloor.defaults['common']['facings'].split(',');
          types = _.without(types, $(e.currentTarget).attr('data-id'));
          CommonFloor.defaults['common']['facings'] = types.join(',');
          unitCollection.reset(unitMasterCollection.toArray());
          CommonFloor.resetCollections();
          CommonFloor.filterNew();
          unitCollection.trigger('available');
          return this.trigger('render:view');
        },
        'click @ui.views': function(e) {
          var types;
          types = CommonFloor.defaults['common']['views'].split(',');
          types = _.without(types, $(e.currentTarget).attr('data-id'));
          CommonFloor.defaults['common']['views'] = types.join(',');
          unitCollection.reset(unitMasterCollection.toArray());
          CommonFloor.resetCollections();
          CommonFloor.filterNew();
          unitCollection.trigger('available');
          return this.trigger('render:view');
        }
      };
    };

    TopMasterView.prototype.onShow = function() {
      var response;
      $("#flexiselDemo1").flexisel({
        visibleItems: 11,
        animationSpeed: 200,
        autoPlay: false,
        autoPlaySpeed: 1000,
        clone: false,
        enableResponsiveBreakpoints: true,
        responsiveBreakpoints: {
          portrait: {
            changePoint: 480,
            visibleItems: 5
          },
          landscape: {
            changePoint: 640,
            visibleItems: 6
          },
          tablet: {
            changePoint: 768,
            visibleItems: 3
          }
        }
      });
      response = CommonFloor.propertyTypes();
      if (response.length === 0) {
        return $('.proj-type-count').html('<p class="p-l-15">No results found</p>');
      }
    };

    TopMasterView.prototype.removeVillaFilters = function() {
      var unitTypes, unitTypesArr, unitVariants, unitVariantsArr, unitsArr, unittypes, variants;
      variants = [];
      unittypes = [];
      unitsArr = bunglowVariantCollection.getBunglowMasterUnits();
      $.each(unitsArr, function(index, value) {
        var unitDetails;
        unitDetails = window.unit.getUnitDetails(value.id);
        variants.push(parseInt(unitDetails[0].get('id')));
        return unittypes.push(parseInt(unitDetails[1].get('id')));
      });
      unitTypes = CommonFloor.defaults['villa']['unit_type_id'].split(',');
      unitTypesArr = unitTypes.map(function(item) {
        return parseInt(item);
      });
      $.each(unittypes, function(index, value) {
        if ($.inArray(parseInt(value), unitTypesArr) > -1) {
          return unitTypes = _.without(unitTypesArr, parseInt(value));
        }
      });
      CommonFloor.defaults['villa']['unit_type_id'] = unitTypes.join(',');
      unitVariants = CommonFloor.defaults['villa']['unit_variant_id'].split(',');
      unitVariantsArr = unitVariants.map(function(item) {
        return parseInt(item);
      });
      $.each(variants, function(index, value) {
        if ($.inArray(parseInt(value), unitVariantsArr) > -1) {
          return unitVariants = _.without(unitVariantsArr, parseInt(value));
        }
      });
      return CommonFloor.defaults['villa']['unit_variant_id'] = unitVariants.join(',');
    };

    TopMasterView.prototype.removeAptFilters = function() {
      var unitTypes, unitTypesArr, unitVariants, unitVariantsArr, unitsArr, unittypes, variants;
      variants = [];
      unittypes = [];
      unitsArr = apartmentVariantCollection.getApartmentMasterUnits();
      $.each(unitsArr, function(index, value) {
        var unitDetails;
        unitDetails = window.unit.getUnitDetails(value.id);
        variants.push(parseInt(unitDetails[0].get('id')));
        return unittypes.push(parseInt(unitDetails[1].get('id')));
      });
      unitTypes = CommonFloor.defaults['villa']['unit_type_id'].split(',');
      unitTypesArr = unitTypes.map(function(item) {
        return parseInt(item);
      });
      $.each(unittypes, function(index, value) {
        if ($.inArray(parseInt(value), unitTypesArr) > -1) {
          return unitTypes = _.without(unitTypesArr, parseInt(value));
        }
      });
      CommonFloor.defaults['villa']['unit_type_id'] = unitTypes.join(',');
      unitVariants = CommonFloor.defaults['villa']['unit_variant_id'].split(',');
      unitVariantsArr = unitVariants.map(function(item) {
        return parseInt(item);
      });
      $.each(variants, function(index, value) {
        if ($.inArray(parseInt(value), unitVariantsArr) > -1) {
          return unitVariants = _.without(unitVariantsArr, parseInt(value));
        }
      });
      return CommonFloor.defaults['villa']['unit_variant_id'] = unitVariants.join(',');
    };

    TopMasterView.prototype.removePlotFilters = function() {
      var unitTypes, unitTypesArr, unitVariants, unitVariantsArr, unitsArr, unittypes, variants;
      variants = [];
      unittypes = [];
      unitsArr = plotVariantCollection.getPlotMasterUnits();
      $.each(unitsArr, function(index, value) {
        var unitDetails;
        unitDetails = window.unit.getUnitDetails(value.id);
        variants.push(parseInt(unitDetails[0].get('id')));
        return unittypes.push(parseInt(unitDetails[1].get('id')));
      });
      unitTypes = CommonFloor.defaults['villa']['unit_type_id'].split(',');
      unitTypesArr = unitTypes.map(function(item) {
        return parseInt(item);
      });
      $.each(unittypes, function(index, value) {
        if ($.inArray(parseInt(value), unitTypesArr) > -1) {
          return unitTypes = _.without(unitTypesArr, parseInt(value));
        }
      });
      CommonFloor.defaults['villa']['unit_type_id'] = unitTypes.join(',');
      unitVariants = CommonFloor.defaults['villa']['unit_variant_id'].split(',');
      unitVariantsArr = unitVariants.map(function(item) {
        return parseInt(item);
      });
      $.each(variants, function(index, value) {
        if ($.inArray(parseInt(value), unitVariantsArr) > -1) {
          return unitVariants = _.without(unitVariantsArr, parseInt(value));
        }
      });
      return CommonFloor.defaults['villa']['unit_variant_id'] = unitVariants.join(',');
    };

    return TopMasterView;

  })(Marionette.ItemView);

  CommonFloor.TopMasterCtrl = (function(superClass) {
    extend(TopMasterCtrl, superClass);

    function TopMasterCtrl() {
      return TopMasterCtrl.__super__.constructor.apply(this, arguments);
    }

    TopMasterCtrl.prototype.initialize = function() {
      this.renderToppView();
      return unitCollection.bind("available", this.renderToppView, this);
    };

    TopMasterCtrl.prototype.renderToppView = function() {
      this.view = new TopMasterView({
        model: project
      });
      this.listenTo(this.view, "render:view", this.loadController);
      return this.show(this.view);
    };

    TopMasterCtrl.prototype.loadController = function() {
      window.unitTypes = [];
      window.unitVariants = [];
      window.variantNames = [];
      window.price = '';
      window.area = '';
      window.type = [];
      this.region = new Marionette.Region({
        el: '#filterregion'
      });
      return new CommonFloor.FilterMasterCtrl({
        region: this.region
      });
    };

    return TopMasterCtrl;

  })(Marionette.RegionController);

  CommonFloor.LeftMasterCtrl = (function(superClass) {
    extend(LeftMasterCtrl, superClass);

    function LeftMasterCtrl() {
      return LeftMasterCtrl.__super__.constructor.apply(this, arguments);
    }

    LeftMasterCtrl.prototype.initialize = function() {
      this.renderLeftMasterView();
      return unitCollection.bind("available", this.renderLeftMasterView, this);
    };

    LeftMasterCtrl.prototype.renderLeftMasterView = function() {
      var data, region, response, units;
      response = CommonFloor.checkListView();
      if (response.count.length === 0) {
        region = new Marionette.Region({
          el: '#leftregion'
        });
        new CommonFloor.NoUnitsCtrl({
          region: region
        });
        return;
      }
      if (response.type === 'bunglows') {
        units = bunglowVariantCollection.getBunglowUnits();
        data = {};
        data.units = units;
        data.type = 'villa';
        this.region = new Marionette.Region({
          el: '#leftregion'
        });
        new CommonFloor.MasterBunglowListCtrl({
          region: this.region
        });
      }
      if (response.type === 'building') {
        units = buildingCollection;
        data = {};
        data.units = units;
        data.type = 'building';
        this.region = new Marionette.Region({
          el: '#leftregion'
        });
        new CommonFloor.MasterBuildingListCtrl({
          region: this.region
        });
      }
      if (response.type === 'plot') {
        units = plotVariantCollection.getPlotUnits();
        data = {};
        data.units = units;
        data.type = 'plot';
        this.region = new Marionette.Region({
          el: '#leftregion'
        });
        return new CommonFloor.MasterPlotListCtrl({
          region: this.region
        });
      }
    };

    return LeftMasterCtrl;

  })(Marionette.RegionController);

  CommonFloor.CenterMasterView = (function(superClass) {
    extend(CenterMasterView, superClass);

    function CenterMasterView() {
      return CenterMasterView.__super__.constructor.apply(this, arguments);
    }

    CenterMasterView.prototype.template = Handlebars.compile('<div class="col-md-12 col-sm-12 col-xs-12 us-right-content mobile visible animated fadeIn"> <div class="legend c clearfix"> <ul> <!--<li class="available">AVAILABLE</li>--> <li class="sold">N/A</li> <!--<li class="blocked">BLOCKED</li> <li class="na">Available</li>--> </ul> </div> <div class="zoom-controls master-zoom"> <div class="zoom-in"></div> <div class="zoom-out"></div> </div> <div id="view_toggle" class="toggle-view-button list"></div> <div id="trig" class="toggle-button hidden">List View</div> <div class=" master b animated fadeIn"> <!--<div class="controls mapView"> <div class="toggle"> <a href="#/master-view" class="map active">Map</a><a href="#/list-view" class="list">List</a> </div> </div>--> <div id="svg_loader" class="img-loader"> <div class="square" ></div> <div class="square"></div> <div class="square last"></div> <div class="square clear"></div> <div class="square"></div> <div class="square last"></div> <div class="square clear"></div> <div class="square "></div> <div class="square last"></div> </div> <div id="spritespin"></div> <div class="svg-maps animated fadeIn hidden"> <img class="first_image" /> <div class="region inactive"></div> <div class="tooltip-overlay hidden"></div> </div> <div id="rotate_loader" class="cf-loader hidden"></div> </div> <div class="rotate rotate-controls hidden"> <div id="prev" class="rotate-left">Left</div> <span class="rotate-text">Rotate</span> <div id="next" class="rotate-right">Right</div> </div> </div>');

    CenterMasterView.prototype.ui = {
      svgContainer: '.master',
      trig: '#trig',
      viewtog: '#view_toggle',
      plotunit: '.plot'
    };

    CenterMasterView.prototype.initialize = function() {
      this.currentBreakPoint = 0;
      this.breakPoints = [];
      return this["class"] = '';
    };

    CenterMasterView.prototype.events = {
      'click @ui.viewtog': function(e) {
        $('.us-left-content').toggleClass('not-visible visible');
        return $('.us-right-content').toggleClass('not-visible visible');
      },
      'click #prev': function() {
        return this.setDetailIndex(this.currentBreakPoint - 1);
      },
      'click #next': function() {
        return this.setDetailIndex(this.currentBreakPoint + 1);
      },
      'click .villa': function(e) {
        var id, unit;
        e.preventDefault();
        id = parseInt(e.currentTarget.id);
        unit = unitCollection.findWhere({
          id: id
        });
        if (!(_.isUndefined(unit)) && unit.get('availability') === 'available') {
          return CommonFloor.navigate('/unit-view/' + id, true);
        }
      },
      'click @ui.plotunit': function(e) {
        var id, unit;
        e.preventDefault();
        id = parseInt(e.currentTarget.id);
        unit = unitCollection.findWhere({
          id: id
        });
        if (!(_.isUndefined(unit)) && unit.get('availability') === 'available') {
          return CommonFloor.navigate('/unit-view/' + id, true);
        }
      },
      'click .building': function(e) {
        var building, id, units;
        e.preventDefault();
        id = parseInt(e.currentTarget.id);
        building = buildingCollection.findWhere({
          id: id
        });
        console.log(units = unitCollection.where({
          'building_id': id
        }));
        if (units.length === 0) {
          return;
        }
        $('#spritespin').addClass('zoom');
        $('.us-right-content').addClass('fadeOut');
        $('.cf-loader').removeClass('hidden');
        if (building !== void 0 && units.length !== 0) {
          if (Object.keys(building.get('building_master')).length === 0) {
            return CommonFloor.navigate('/building/' + id + '/apartments', true);
          } else {
            return CommonFloor.navigate('/building/' + id + '/master-view', true);
          }
        }
      },
      'mouseout .villa': function(e) {
        var availability, id, unit;
        id = parseInt(e.currentTarget.id);
        unit = unitCollection.findWhere({
          id: id
        });
        if (unit !== void 0) {
          availability = unit.get('availability');
          availability = s.decapitalize(availability);
          return $('#unit' + id).attr('class', 'unit blocks ' + availability);
        }
      },
      'mouseout .plot': function(e) {
        var availability, id, unit;
        id = parseInt(e.currentTarget.id);
        unit = unitCollection.findWhere({
          id: id
        });
        if (unit !== void 0) {
          availability = unit.get('availability');
          availability = s.decapitalize(availability);
          return $('#unit' + id).attr('class', 'bldg blocks ' + availability);
        }
      },
      'mouseout .building': function(e) {
        var building, id;
        id = parseInt(e.currentTarget.id);
        building = buildingCollection.findWhere({
          id: id
        });
        if (building !== void 0) {
          $('.building').attr('class', 'layer building');
          return $('#bldg' + id).attr('class', 'bldg blocks');
        }
      },
      'mouseover .villa': function(e) {
        var availability, html, id, price, response, unit, unitMaster;
        id = parseInt(e.currentTarget.id);
        html = "";
        unit = unitCollection.findWhere({
          id: id
        });
        unitMaster = unitMasterCollection.findWhere({
          id: id
        });
        if (unit === void 0 && unitMaster !== void 0) {
          html = '<div class="svg-info"> <div class="action-bar2"> <div class="txt-dft"></div> </div> <h5 class="pull-left"> Not in selection </h5> </div>';
          $('.layer').tooltipster('content', html);
          return;
        }
        response = window.unit.getUnitDetails(id);
        price = window.numDifferentiation(response[3]);
        availability = unit.get('availability');
        availability = s.decapitalize(availability);
        if (unit === void 0 || availability === 'archive') {
          html += '<div class="svg-info"> <div class="action-bar2"> <div class="txt-dft"></div> </div> <h5 class="pull-left">Villa details not entered </h5> </div>';
          $('.layer').tooltipster('content', html);
          return;
        }
        html = "";
        html += '<div class="svg-info ' + availability + ' "> <div class="action-bar"> <div class="villa"></div> </div> <div class="pull-left"> <h4 class="m-t-0">' + unit.get('unit_name') + '</h4> <div class="details"> <ul> <li> <h5 class="inline-block">' + response[1].get('name') + '</h5> <span> - ' + response[0].get('super_built_up_area') + ' ' + project.get('measurement_units') + '</span> <!--<label>Variant</label> - ' + response[0].get('unit_variant_name') + '--> </li> </ul> <h5 class="price text-primary m-b-0">' + s.capitalize(availability) + '</h5> </div> </div>';
        if (availability === 'available') {
          html += '<a href="#unit-view/' + id + '" class="view-unit"> <div class="circle"> <span class="arrow-up icon-chevron-right"></span> </div> </a> </div>';
        } else {
          html += '</div>';
        }
        $('#' + id).attr('class', 'layer villa  ' + availability);
        $('#unit' + id).attr('class', 'unit blocks ' + availability + '  active');
        $('.units').mCustomScrollbar("scrollTo", '#unit' + id);
        return $('#' + id).tooltipster('content', html);
      },
      'mouseover .plot': function(e) {
        var availability, html, id, price, response, unit, unitMaster;
        id = parseInt(e.currentTarget.id);
        html = "";
        unit = unitCollection.findWhere({
          id: id
        });
        unitMaster = unitMasterCollection.findWhere({
          id: id
        });
        if (unit === void 0 && unitMaster !== void 0) {
          html = '<div class="svg-info"> <div class="action-bar2"> <div class="txt-dft"></div> </div> <h5 class="pull-left"> Not in selection </h5> </div>';
          $('.layer').tooltipster('content', html);
          return;
        }
        response = window.unit.getUnitDetails(id);
        price = window.numDifferentiation(response[3]);
        availability = unit.get('availability');
        availability = s.decapitalize(availability);
        if (unit === void 0 || availability === 'archive') {
          html += '<div class="svg-info"> <div class="action-bar2"> <div class="txt-dft"></div> </div> <h5 class="pull-left"> Plot details not entered </h5> </div>';
          $('.layer').tooltipster('content', html);
          return;
        }
        html = "";
        html += '<div class="svg-info ' + availability + ' "> <div class="action-bar"> <div class="plot"></div> </div> <div class="pull-left"> <h4 class="m-t-0">' + unit.get('unit_name') + '</h4> <div class="details"> <ul> <li> <h5 class="inline-block">' + response[1].get('name') + '</h5> <span> - ' + response[0].get('super_built_up_area') + ' ' + project.get('measurement_units') + '</span> <!--<label>Variant</label> - ' + response[0].get('unit_variant_name') + '--> </li> </ul> <div class="price text-primary"> <span class="text-primary icon-rupee-icn"></span>' + price + '</div> <div class="price text-primary"> <span class="text-primary"></span>' + s.capitalize(availability) + '</div> </div> </div>';
        if (availability === 'available') {
          html += '<a href="#unit-view/' + id + '" class="view-unit"> <div class="circle"> <span class="arrow-up icon-chevron-right"></span> </div> </a> </div>';
        } else {
          html += '</div>';
        }
        $('#' + id).attr('class', 'layer plot ' + availability);
        $('#unit' + id).attr('class', 'bldg blocks active');
        $('.units').mCustomScrollbar("scrollTo", '#unit' + id);
        return $('#' + id).tooltipster('content', html);
      },
      'mouseover .amenity': function(e) {
        var html;
        html = '<div class="row"> <div class="col-sm-12 b-r"> <h4 class="text-warning margin-none">' + $(e.currentTarget).attr('data-amenity-title') + '</h4> <h6 class="text-muted">' + $(e.currentTarget).attr('data-amenity-desc') + '</h6> </div> </div>';
        return $('.amenity').tooltipster('content', html);
      },
      'mouseover .building': function(e) {
        var availability, buildingMaster, buildingModel, floors, html, id, minprice, price, response, unit, unitTypes, url;
        id = parseInt(e.currentTarget.id);
        buildingModel = buildingCollection.findWhere({
          'id': id
        });
        buildingMaster = buildingMasterCollection.findWhere({
          'id': id
        });
        if (buildingModel === void 0 && buildingMaster !== void 0) {
          html = '<div class="svg-info"> <div class="action-bar2"> <div class="txt-dft"></div> </div> <h5 class="pull-left"> Not in selection </h5> </div>';
          $('.layer').tooltipster('content', html);
          return;
        }
        if (buildingModel === void 0) {
          html = '<div class="svg-info"> <div class="action-bar2"> <div class="txt-dft"></div> </div> <h5 class="pull-left"> Building details not entered </h5> </div>';
          $('.layer').tooltipster('content', html);
          return;
        }
        floors = buildingModel.get('no_of_floors');
        unitTypes = building.getUnitTypes(id);
        response = building.getUnitTypesCount(id, unitTypes);
        minprice = building.getMinimumCost(id);
        price = window.numDifferentiation(minprice);
        unit = unitCollection.where({
          'building_id': id,
          'availability': 'available'
        });
        if (unit.length > 0) {
          availability = ' available';
        } else {
          availability = ' sold';
        }
        html = '<div class="svg-info ' + availability + ' "> <div class="action-bar"> <div class="building"></div> </div> <div class="pull-left"> <h4 class="m-t-0 m-b-5">' + buildingModel.get('building_name') + '	<label class="text-muted">(' + floors + ' floors)</label></h4> <div class="details"> <div class="price"> Starting from <span class="text-primary"><span class="icon-rupee-icn"></span> ' + price + '</span> </div> <ul class="bldg">';
        $.each(response, function(index, value) {
          return html += '<li> <h5 class="m-t-0 m-b-0">' + value.name + '</h5> <span>' + value.units + ' Available</span> </li>';
        });
        if (unit.length > 0) {
          if (Object.keys(buildingModel.get('building_master')).length === 0) {
            url = '/building/' + id + '/apartments';
          } else {
            url = '/building/' + id + '/master-view';
          }
          html += '</ul> </div> <a href="#' + url + '" class="view-unit"> <div class="circle"> <span class="arrow-up icon-chevron-right"></span> </div> </a>';
        }
        html += '</div></div>';
        $('.layer').tooltipster('content', html);
        $('#bldg' + id).attr('class', 'bldg blocks active');
        $('.units').mCustomScrollbar("scrollTo", '#bldg' + id);
        return $('#' + id).attr('class', 'layer building active_bldg');
      },
      'mousedown .layer': function(e) {
        return e.preventDefault();
      },
      'mousedown .layer': function(e) {
        return e.preventDefault();
      }
    };

    CenterMasterView.prototype.onShow = function() {
      var breakpoints, first, svgs, that, transitionImages, windowHeight;
      windowHeight = $(window).innerHeight() - 56;
      $('.master').css('height', windowHeight);
      $('.master').css('min-width', windowHeight * 2);
      $('#spritespin').hide();
      that = this;
      transitionImages = [];
      svgs = {};
      breakpoints = project.get('breakpoints');
      $.each(breakpoints, function(index, value) {
        return svgs[value] = BASEURL + '/projects/' + PROJECTID + '/master/master-' + value + '.svg';
      });
      first = _.values(svgs);
      $.merge(transitionImages, project.get('project_master'));
      $('.first_image').attr('src', transitionImages[breakpoints[0]]);
      return $('.first_image').load(function() {
        return $('.region').load(first[0], function() {
          var response;
          $('#svg_loader').addClass('hidden');
          that.iniTooltip();
          CommonFloor.applyAvailabilClasses();
          CommonFloor.randomClass();
          CommonFloor.applyFliterClass();
          that.loadZoom();
          $('#trig').removeClass('hidden');
          $('.svg-maps').removeClass('hidden');
          response = project.checkRotationView();
          $('.first_image').first().css('width', that.ui.svgContainer.width());
          $('.unassign').attr('style', "opacity: 0;fill-opacity: 0;");
          if (response === 1) {
            $('#rotate_loader').removeClass('hidden');
            return that.initializeRotate(transitionImages, svgs);
          }
        }).addClass('active').removeClass('inactive');
      });
    };

    CenterMasterView.prototype.setDetailIndex = function(index) {
      $('.region').empty();
      $('.region').addClass('inactive').removeClass('active');
      this.currentBreakPoint = index;
      if (this.currentBreakPoint < 0) {
        this.currentBreakPoint = this.breakPoints.length - 1;
      }
      if (this.currentBreakPoint >= this.breakPoints.length) {
        this.currentBreakPoint = 0;
      }
      return api.playTo(this.breakPoints[this.currentBreakPoint], {
        nearest: true
      });
    };

    CenterMasterView.prototype.initializeRotate = function(transitionImages, svgs) {
      var frames, spin, that, width;
      frames = transitionImages;
      this.breakPoints = project.get('breakpoints');
      this.currentBreakPoint = 0;
      width = this.ui.svgContainer.width();
      $('.svg-maps > div').first().removeClass('inactive').addClass('active').css('width', width);
      spin = $('#spritespin');
      spin.spritespin({
        source: frames,
        width: this.ui.svgContainer.width(),
        sense: -1,
        height: this.ui.svgContainer.width() / 2,
        animate: false
      });
      that = this;
      api = spin.spritespin("api");
      spin.bind("onFrame", function() {
        var data, url;
        data = api.data;
        data.frame;
        if (data.frame === data.stopFrame) {
          url = svgs[data.frame];
          return $('.region').load(url, function() {
            that.iniTooltip();
            CommonFloor.applyAvailabilClasses();
            CommonFloor.randomClass();
            CommonFloor.applyFliterClass();
            that.loadZoom();
            return $('.unassign').attr('style', "opacity: 0;fill-opacity: 0;");
          }).addClass('active').removeClass('inactive');
        }
      });
      return spin.bind("onLoad", function() {
        var first, response, url;
        first = _.values(svgs);
        url = first[0];
        $('#trig').removeClass('hidden');
        response = project.checkRotationView();
        if (response === 1) {
          $('.first_image').remove();
          $('.rotate').removeClass('hidden');
          $('#spritespin').show();
          $('#rotate_loader').addClass('hidden');
        }
        return $('.region').load(url, function() {
          that.iniTooltip();
          CommonFloor.applyAvailabilClasses();
          that.loadZoom();
          CommonFloor.randomClass();
          CommonFloor.applyFliterClass();
          $('.unassign').attr('style', "opacity: 0;fill-opacity: 0;");
          return $('.svg-maps svg').css('height', width / 2);
        }).addClass('active').removeClass('inactive');
      });
    };

    CenterMasterView.prototype.iniTooltip = function() {
      $('.layer').tooltipster({
        theme: 'tooltipster-shadow',
        contentAsHTML: true,
        onlyOne: true,
        arrow: false,
        offsetX: 50,
        offsetY: -10,
        interactive: true,
        trigger: 'hover',
        functionReady: function(e) {
          return $('.view-unit').on('click', function(e) {
            $('.layer').tooltipster('hide');
            $('svg').attr('class', 'zoom');
            $('#spritespin').addClass('zoom');
            $('.us-right-content').addClass('fadeOut');
            return $('.cf-loader').removeClass('hidden');
          });
        }
      });
      return $('.amenity').tooltipster({
        theme: 'tooltipster-shadow marker-tooltip',
        contentAsHTML: true,
        onlyOne: true,
        arrow: false,
        trigger: 'hover'
      });
    };

    CenterMasterView.prototype.loadZoom = function() {
      $('.master').panzoom({
        contain: 'invert',
        minScale: 1,
        maxScale: 2.4,
        increment: 0.4,
        $zoomIn: $('.zoom-in'),
        $zoomOut: $('.zoom-out')
      });
      return $('.master polygon').on('mousedown touchstart', function(e) {
        return e.stopImmediatePropagation();
      });
    };

    return CenterMasterView;

  })(Marionette.ItemView);

  CommonFloor.CenterMasterCtrl = (function(superClass) {
    extend(CenterMasterCtrl, superClass);

    function CenterMasterCtrl() {
      return CenterMasterCtrl.__super__.constructor.apply(this, arguments);
    }

    CenterMasterCtrl.prototype.initialize = function() {
      return this.show(new CommonFloor.CenterMasterView({
        model: project
      }));
    };

    return CenterMasterCtrl;

  })(Marionette.RegionController);

}).call(this);

//# sourceMappingURL=../../frontend/project-master-view/project.master.controller.js.map
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  CommonFloor.FilterMsterView = (function(superClass) {
    extend(FilterMsterView, superClass);

    function FilterMsterView() {
      return FilterMsterView.__super__.constructor.apply(this, arguments);
    }

    FilterMsterView.prototype.template = Handlebars.compile('<a href="javascript:void(0)" class="text-primary filters-clear clear">Clear Filters </a> <button class="btn btn-primary filter-button filter-toggle" type="button"> <span class="icon"></span> </button> <div class="filters-wrapper"> <div class="filters-content"> <div class="property_type clearfix"> <h6 class="">PROPERTY TYPE</h6> <div class="filter-chkbox-block"> {{#types}} <div class="-lbl "> <input type="checkbox" class="custom-chckbx addCft types {{name}}" id="{{id}}" value="{{type}}" data-value="{{name}}"" > <label for="{{id}}" class="-lbl  "> {{type}} <span class="arrow-right desktop"></span> </label> <span class="arrow-right mobile"></span> </div> {{/types}} </div> </div> <div class="viewLabel"> <h6 class="">VIEWS</h6> <div class="filter-chkbox-block"> {{#views}} <input type="checkbox" class="custom-chckbx addCft views " id="{{id}}" value="{{id}}"  > <label for="{{id}}" class="-lbl  ">{{name}}</label> {{/views}} </div> </div> <div class="facingLabel"> <h6 class="">FACINGS</h6> <div class="filter-chkbox-block"> {{#facings}} <input type="checkbox" class="custom-chckbx addCft facings " id="{{id}}" value="{{id}}"  > <label for="{{id}}" class="-lbl  ">{{name}}</label> {{/facings}} </div> </div> <div class="areaLabel"> <h6 class="">AREA ({{measurement_units}})</h6> <div class="range-container"> <input type="text" id="area" name="area" value="" /> </div>                     </div> <div class="budgetLabel"> <h6 class="">BUDGET ( <span class="icon-rupee-icn"></span> )</h6> <div class="range-container"> <input type="text" id="budget" name="budget" value="" /> </div>                     </div> <div class=""> <h6 class="availability">AVAILABILITY</h6> <div class="filter-chkbox-block"> <input type="checkbox" name="available"  class="custom-chckbx addCft status" id="available" value="available"> <label for="available" class="-lbl">Show Available Units Only</label> </div>                     </div> </div> </div> <!--<div class="filters-bottom"> <a href="#">+ More Filters</a> </div>--> </div> <div class="filters-wrapper-hover  filters-wrapper villa-wrapper"> <div class="arrow-left"> </div> <button class="btn btn-primary filter-button back_btn" type="button"> <span class="icon"></span> Back </button> {{#villas}} <div class="villa_unitTypes"> <h6 class="unit_type_filter">UNIT TYPE</h6> <div class="filter-chkbox-block"> {{#unitTypes}} <input type="checkbox" class="custom-chckbx addCft unit_types" id="unit_type{{id}}" value="unit_type{{id}}" value="1" data-value={{id}} data-type="villa"> <label for="unit_type{{id}}" class="-lbl">{{name}}</label> {{/unitTypes}} </div> </div> <div class="villa_unitVariantNames"> <h6 class="unit_type_filter">UNIT VARIANTS</h6> <div class="filter-chkbox-block"> {{#unitVariantNames}} <input type="checkbox" class="custom-chckbx addCft variant_names" id="varinat_name{{id}}" value="varinat_name{{id}}" value="1" data-value={{id}} data-type="villa" > <label for="varinat_name{{id}}" class="-lbl">{{name}}</label> {{/unitVariantNames}} </div> </div> {{#flooring}} <div class=""> <h6 class="unit_type_filter">{{label}}</h6> <div class="filter-chkbox-block"> {{#value}} <input type="checkbox" class="custom-chckbx addCft {{classname}}" id="{{id}}" value="{{id}}" value="1" data-value="{{name}}" data-index="{{index}}" data-type="villa" > <label for="{{id}}" class="-lbl">{{name}}</label> {{/value}} </div> </div> {{/flooring}} {{/villas}}</div> <div class="filters-wrapper-hover  filters-wrapper apartment-wrapper"> <div class="arrow-left"> </div> <button class="btn btn-primary filter-button back_btn" type="button"> <span class="icon"></span> Back </button> {{#apartments}} <div class="apartment_unitTypes"> <h6 class="unit_type_filter">UNIT TYPE</h6> <div class="filter-chkbox-block"> {{#unitTypes}} <input type="checkbox" class="custom-chckbx addCft unit_types" id="unit_type{{id}}" value="unit_type{{id}}" value="1" data-value={{id}}  data-type="apartment"> <label for="unit_type{{id}}" class="-lbl">{{name}}</label> {{/unitTypes}} </div> </div> <div class="apartment_unitVariantNames"> <h6 class="unit_type_filter">UNIT VARIANTS</h6> <div class="filter-chkbox-block"> {{#unitVariantNames}} <input type="checkbox" class="custom-chckbx addCft variant_names" id="varinat_name{{id}}" value="varinat_name{{id}}" value="1" data-value={{id}} data-type="apartment"> <label for="varinat_name{{id}}" class="-lbl">{{name}}</label> {{/unitVariantNames}} </div> </div> {{#flooring}} <div class=""> <h6 class="unit_type_filter">{{label}}</h6> <div class="filter-chkbox-block"> {{#value}} <input type="checkbox" class="custom-chckbx addCft {{classname}}" id="{{id}}" value="{{id}}" value="1" data-value="{{name}}" data-index="{{index}}" data-type="apartment" > <label for="{{id}}" class="-lbl">{{name}}</label> {{/value}} </div> </div> {{/flooring}} {{/apartments}}</div> <div class="filters-wrapper-hover  filters-wrapper plot-wrapper"> <div class="arrow-left"> </div> <button class="btn btn-primary filter-button back_btn" type="button"> <span class="icon"></span> Back </button> {{#plots}} <div class="plot_unitTypes"> <h6 class="unit_type_filter">UNIT TYPE</h6> <div class="filter-chkbox-block"> {{#unitTypes}} <input type="checkbox" class="custom-chckbx addCft unit_types" id="unit_type{{id}}" value="unit_type{{id}}" value="1" data-value={{id}} data-type="plot"> <label for="unit_type{{id}}" class="-lbl">{{name}}</label> {{/unitTypes}} </div> </div> <div class="plot_unitVariantNames"> <h6 class="unit_type_filter">UNIT VARIANTS</h6> <div class="filter-chkbox-block"> {{#unitVariantNames}} <input type="checkbox" class="custom-chckbx addCft variant_names" id="varinat_name{{id}}" value="varinat_name{{id}}" value="1" data-value={{id}} data-type="plot"> <label for="varinat_name{{id}}" class="-lbl">{{name}}</label> {{/unitVariantNames}} </div> </div> {{#flooring}} <div class=""> <h6 class="unit_type_filter">{{label}}</h6> <div class="filter-chkbox-block"> {{#value}} <input type="checkbox" class="custom-chckbx addCft {{classname}}" id="{{id}}" value="{{id}}" value="1" data-value="{{name}}" data-index="{{index}}" data-type="plot" > <label for="{{id}}" class="-lbl">{{name}}</label> {{/value}} </div> </div> {{/flooring}} {{/plots}}</div></div>');

    FilterMsterView.prototype.ui = {
      unitTypes: '.unit_types',
      priceMin: '.price_min',
      priceMax: '.price_max',
      status: '.status',
      apply: '.apply',
      variantNames: '.variant_names',
      area: '#area',
      budget: '#budget',
      types: '.types',
      clear: '.clear',
      flooring: '.attributes',
      villa: '.villa',
      apt: '.apartment',
      plot: '.plot',
      villaWrapper: '.villa-wrapper',
      aptWrapper: '.apartment-wrapper',
      plotWrapper: '.plot-wrapper',
      villaCheck: '.villa-check',
      aptCheck: '.apartment-check',
      plotCheck: '.plot-check',
      back_btn: '.back_btn',
      back_btn: '.back_btn',
      facings: '.facings',
      views: '.views'
    };

    FilterMsterView.prototype.initialize = function() {
      this.price = '';
      return this.area = '';
    };

    FilterMsterView.prototype.events = {
      'click @ui.clear': function(e) {
        CommonFloor.defaults['type'] = "";
        $.each(CommonFloor.defaults['villa'], function(index, value) {
          CommonFloor.defaults['villa'][index] = "";
          if (index === 'attributes') {
            return CommonFloor.defaults['villa'][index] = {};
          }
        });
        $.each(CommonFloor.defaults['apartment'], function(index, value) {
          CommonFloor.defaults['apartment'][index] = "";
          if (index === 'attributes') {
            return CommonFloor.defaults['apartment'][index] = {};
          }
        });
        $.each(CommonFloor.defaults['plot'], function(index, value) {
          CommonFloor.defaults['plot'][index] = "";
          if (index === 'attributes') {
            return CommonFloor.defaults['plot'][index] = {};
          }
        });
        $.each(CommonFloor.defaults['common'], function(index, value) {
          return CommonFloor.defaults['common'][index] = "";
        });
        unitCollection.reset(unitMasterCollection.toArray());
        CommonFloor.resetCollections();
        CommonFloor.filterNew();
        unitCollection.trigger('available');
        this.loadSelectedFilters();
        this.price = $("#budget").data("ionRangeSlider");
        this.area = $("#area").data("ionRangeSlider");
        this.price.destroy();
        this.area.destroy();
        return this.loadClearFilter();
      },
      'mouseover @ui.villaCheck,@ui.villaWrapper': function(e) {
        return $(".villa-wrapper").addClass("visible");
      },
      'mouseout @ui.villaCheck,@ui.villaWrapper': function(e) {
        return $(".villa-wrapper").removeClass("visible");
      },
      'mouseover @ui.aptCheck,@ui.aptWrapper': function(e) {
        return $(".apartment-wrapper").addClass("visible");
      },
      'mouseout @ui.aptCheck,@ui.aptWrapper': function(e) {
        return $(".apartment-wrapper").removeClass("visible");
      },
      'mouseover @ui.plotCheck,@ui.plotWrapper': function(e) {
        return $(".plot-wrapper").addClass("visible");
      },
      'mouseout @ui.plotCheck,@ui.plotWrapper': function(e) {
        return $(".plot-wrapper").removeClass("visible");
      },
      'click @ui.villa': function(e) {
        var types;
        types = [];
        if (CommonFloor.defaults['type'] !== "") {
          types = CommonFloor.defaults['type'].split(',');
        }
        if ($(e.currentTarget).is(':checked')) {
          $(e.currentTarget).parent().addClass('villa-check');
          $(e.currentTarget).parent().addClass("villa-btn");
          $('.villa-wrapper').addClass("visible");
          types.push($(e.currentTarget).attr('data-value'));
        } else {
          $(e.currentTarget).parent().removeClass('villa-check');
          $(e.currentTarget).parent().removeClass('villa-btn');
          $('.villa-wrapper').removeClass('visible');
          types = _.without(types, $(e.currentTarget).attr('data-value'));
        }
        types = _.uniq(types);
        CommonFloor.defaults['type'] = types.join(',');
        unitCollection.reset(unitMasterCollection.toArray());
        CommonFloor.resetCollections();
        this.loadSelectedFilters();
        CommonFloor.filterNew();
        return unitCollection.trigger('available');
      },
      'click @ui.apt': function(e) {
        var types;
        types = [];
        if (CommonFloor.defaults['type'] !== "") {
          types = CommonFloor.defaults['type'].split(',');
        }
        if ($(e.currentTarget).is(':checked')) {
          $(e.currentTarget).parent().addClass('apartment-check');
          $(e.currentTarget).parent().addClass("apartment-btn");
          $('.apartment-wrapper').addClass("visible");
          types.push($(e.currentTarget).attr('data-value'));
        } else {
          $(e.currentTarget).parent().removeClass('apartment-check');
          $(e.currentTarget).parent().removeClass('apartment-btn');
          $('.apartment-wrapper').removeClass('visible');
          types = _.without(types, $(e.currentTarget).attr('data-value'));
        }
        types = _.uniq(types);
        CommonFloor.defaults['type'] = types.join(',');
        unitCollection.reset(unitMasterCollection.toArray());
        CommonFloor.resetCollections();
        this.loadSelectedFilters();
        CommonFloor.filterNew();
        return unitCollection.trigger('available');
      },
      'click @ui.plot': function(e) {
        var types;
        types = [];
        if (CommonFloor.defaults['type'] !== "") {
          types = CommonFloor.defaults['type'].split(',');
        }
        if ($(e.currentTarget).is(':checked')) {
          $(e.currentTarget).parent().addClass('plot-check');
          $(e.currentTarget).parent().addClass("plot-btn");
          $('.plot-wrapper').addClass("visible");
          types.push($(e.currentTarget).attr('data-value'));
        } else {
          $(e.currentTarget).parent().removeClass('plot-check');
          $(e.currentTarget).parent().removeClass('plot-btn');
          $('.plot-wrapper').removeClass('visible');
          types = _.without(types, $(e.currentTarget).attr('data-value'));
        }
        types = _.uniq(types);
        CommonFloor.defaults['type'] = types.join(',');
        unitCollection.reset(unitMasterCollection.toArray());
        CommonFloor.resetCollections();
        this.loadSelectedFilters();
        CommonFloor.filterNew();
        return unitCollection.trigger('available');
      },
      'click @ui.unitTypes': function(e) {
        var type, types;
        types = [];
        type = $(e.currentTarget).attr('data-type');
        if (CommonFloor.defaults[type]['unit_type_id'] !== "") {
          types = CommonFloor.defaults[type]['unit_type_id'].split(',');
          types = types.map(function(item) {
            return parseInt(item);
          });
        }
        if ($(e.currentTarget).is(':checked')) {
          types.push(parseInt($(e.currentTarget).attr('data-value')));
        } else {
          types = _.without(types, parseInt($(e.currentTarget).attr('data-value')));
        }
        types = _.uniq(types);
        CommonFloor.defaults[type]['unit_type_id'] = types.join(',');
        unitCollection.reset(unitMasterCollection.toArray());
        CommonFloor.resetCollections();
        CommonFloor.filterNew();
        return unitCollection.trigger('available');
      },
      'click @ui.variantNames': function(e) {
        var type, types;
        types = [];
        type = $(e.currentTarget).attr('data-type');
        if (CommonFloor.defaults[type]['unit_variant_id'] !== "") {
          types = CommonFloor.defaults[type]['unit_variant_id'].split(',');
          types = types.map(function(item) {
            return parseInt(item);
          });
        }
        if ($(e.currentTarget).is(':checked')) {
          types.push(parseInt($(e.currentTarget).attr('data-value')));
        } else {
          types = _.without(types, parseInt($(e.currentTarget).attr('data-value')));
        }
        types = _.uniq(types);
        CommonFloor.defaults[type]['unit_variant_id'] = types.join(',');
        unitCollection.reset(unitMasterCollection.toArray());
        CommonFloor.resetCollections();
        CommonFloor.filterNew();
        return unitCollection.trigger('available');
      },
      'click @ui.status': function(e) {
        if ($(e.currentTarget).is(':checked')) {
          CommonFloor.defaults['common']['availability'] = e.currentTarget.id;
        } else {
          CommonFloor.defaults['common']['availability'] = "";
        }
        unitCollection.reset(unitMasterCollection.toArray());
        CommonFloor.resetCollections();
        CommonFloor.filterNew();
        return unitCollection.trigger('available');
      },
      'change @ui.area': function(e) {
        CommonFloor.defaults['common']['area_max'] = parseFloat($(e.target).val().split(';')[1]);
        CommonFloor.defaults['common']['area_min'] = parseFloat($(e.target).val().split(';')[0]);
        unitCollection.reset(unitMasterCollection.toArray());
        CommonFloor.resetCollections();
        CommonFloor.filterNew();
        return unitCollection.trigger('available');
      },
      'change @ui.budget': function(e) {
        CommonFloor.defaults['common']['price_max'] = parseFloat($(e.target).val().split(';')[1]);
        CommonFloor.defaults['common']['price_min'] = parseFloat($(e.target).val().split(';')[0]);
        unitCollection.reset(unitMasterCollection.toArray());
        CommonFloor.resetCollections();
        CommonFloor.filterNew();
        return unitCollection.trigger('available');
      },
      'click @ui.views': function(e) {
        var types;
        types = [];
        if (CommonFloor.defaults['common']['views'] !== "") {
          types = CommonFloor.defaults['common']['views'].split(',');
        }
        if ($(e.currentTarget).is(':checked')) {
          types.push($(e.currentTarget).val());
        } else {
          types = _.without(types, $(e.currentTarget).val());
        }
        types = _.uniq(types);
        CommonFloor.defaults['common']['views'] = types.join(',');
        unitCollection.reset(unitMasterCollection.toArray());
        CommonFloor.resetCollections();
        CommonFloor.filterNew();
        return unitCollection.trigger('available');
      },
      'click @ui.facings': function(e) {
        var types;
        types = [];
        if (CommonFloor.defaults['common']['facings'] !== "") {
          types = CommonFloor.defaults['common']['facings'].split(',');
        }
        if ($(e.currentTarget).is(':checked')) {
          types.push($(e.currentTarget).val());
        } else {
          types = _.without(types, $(e.currentTarget).val());
        }
        types = _.uniq(types);
        CommonFloor.defaults['common']['facings'] = types.join(',');
        unitCollection.reset(unitMasterCollection.toArray());
        CommonFloor.resetCollections();
        CommonFloor.filterNew();
        return unitCollection.trigger('available');
      },
      'click @ui.flooring': function(e) {
        var index, type, types;
        types = [];
        type = $(e.currentTarget).attr('data-type');
        index = $(e.currentTarget).attr('data-index');
        if (!_.has(CommonFloor.defaults[type]['attributes'], index)) {
          CommonFloor.defaults[type]['attributes'][index] = '';
        }
        if (CommonFloor.defaults[type]['attributes'][index] !== "") {
          types = CommonFloor.defaults[type]['attributes'][index].split(',');
        }
        if ($(e.currentTarget).is(':checked')) {
          types.push($(e.currentTarget).attr('data-value'));
        } else {
          types = _.without(types, $(e.currentTarget).attr('data-value'));
        }
        types = _.uniq(types);
        CommonFloor.defaults[type]['attributes'][index] = types.join(',');
        unitCollection.reset(unitMasterCollection.toArray());
        CommonFloor.resetCollections();
        CommonFloor.filterNew();
        return unitCollection.trigger('available');
      },
      'click .filter-toggle': function(e) {
        return $('.fliters-container').toggleClass('closed');
      },
      'click .back_btn': function(e) {
        return $('.filters-wrapper-hover').removeClass('visible');
      }
    };

    FilterMsterView.prototype.villaFilters = function() {
      var area, budget, id, unitsArr, unittypesArray, unittypesColl;
      budget = [];
      area = [];
      id = [];
      unitsArr = [];
      unittypesColl = _.pluck(unitTypeCollection.toArray(), 'id');
      unittypesArray = unittypesColl.map(function(item) {
        return parseInt(item);
      });
      $.merge(unitsArr, plotVariantCollection.getPlotUnits());
      $.merge(unitsArr, apartmentVariantCollection.getApartmentUnits());
      $.merge(unitsArr, bunglowVariantCollection.getBunglowUnits());
      $.each(unitsArr, function(index, value) {
        var unitDetails;
        unitDetails = window.unit.getUnitDetails(value.id);
        budget.push(parseFloat(unitDetails[3]));
        area.push(parseFloat(unitDetails[0].get('super_built_up_area')));
        return id.push(parseInt(unitDetails[0].get('id')));
      });
      $(this.ui.unitTypes).each(function(ind, item) {
        $('#' + item.id).attr('disabled', false);
        $('#' + item.id).attr('checked', false);
        if ($.inArray(parseInt($(item).attr('data-value')), unittypesArray) === -1) {
          $('#' + item.id).prop('checked', false);
          return $('#' + item.id).attr('disabled', true);
        }
      });
      return $(this.ui.variantNames).each(function(ind, item) {
        $('#' + item.id).attr('checked', false);
        $('#' + item.id).attr('disabled', false);
        if ($.inArray(parseInt($(item).attr('data-value')), id) === -1) {
          $('#' + item.id).prop('checked', false);
          return $('#' + item.id).attr('disabled', true);
        }
      });
    };

    FilterMsterView.prototype.apartmentFilters = function() {
      var area, budget, id, unitsArr, unittypesArray, unittypesColl;
      budget = [];
      area = [];
      id = [];
      unitsArr = [];
      unittypesColl = _.pluck(unitTypeCollection.toArray(), 'id');
      unittypesArray = unittypesColl.map(function(item) {
        return parseInt(item);
      });
      $.merge(unitsArr, plotVariantCollection.getPlotUnits());
      $.merge(unitsArr, apartmentVariantCollection.getApartmentUnits());
      $.merge(unitsArr, bunglowVariantCollection.getBunglowUnits());
      $.each(unitsArr, function(index, value) {
        var unitDetails;
        unitDetails = window.unit.getUnitDetails(value.id);
        budget.push(parseFloat(unitDetails[3]));
        area.push(parseFloat(unitDetails[0].get('super_built_up_area')));
        return id.push(parseInt(unitDetails[0].get('id')));
      });
      $(this.ui.unitTypes).each(function(ind, item) {
        $('#' + item.id).attr('checked', false);
        $('#' + item.id).attr('disabled', false);
        if ($.inArray(parseInt($(item).attr('data-value')), unittypesArray) === -1) {
          $('#' + item.id).prop('checked', false);
          return $('#' + item.id).attr('disabled', true);
        }
      });
      return $(this.ui.variantNames).each(function(ind, item) {
        $('#' + item.id).attr('checked', false);
        $('#' + item.id).attr('disabled', false);
        if ($.inArray(parseInt($(item).attr('data-value')), id) === -1) {
          $('#' + item.id).prop('checked', false);
          return $('#' + item.id).attr('disabled', true);
        }
      });
    };

    FilterMsterView.prototype.plotFilters = function() {
      var area, budget, id, unitsArr, unittypesArray, unittypesColl;
      budget = [];
      area = [];
      id = [];
      unitsArr = [];
      unittypesColl = _.pluck(unitTypeCollection.toArray(), 'id');
      unittypesArray = unittypesColl.map(function(item) {
        return parseInt(item);
      });
      $.merge(unitsArr, plotVariantCollection.getPlotUnits());
      $.merge(unitsArr, apartmentVariantCollection.getApartmentUnits());
      $.merge(unitsArr, bunglowVariantCollection.getBunglowUnits());
      $.each(unitsArr, function(index, value) {
        var unitDetails;
        unitDetails = window.unit.getUnitDetails(value.id);
        budget.push(parseFloat(unitDetails[3]));
        area.push(parseFloat(unitDetails[0].get('super_built_up_area')));
        return id.push(parseInt(unitDetails[0].get('id')));
      });
      $(this.ui.unitTypes).each(function(ind, item) {
        $('#' + item.id).attr('checked', false);
        $('#' + item.id).attr('disabled', false);
        if ($.inArray(parseInt($(item).attr('data-value')), unittypesArray) === -1) {
          $('#' + item.id).prop('checked', false);
          return $('#' + item.id).attr('disabled', true);
        }
      });
      return $(this.ui.variantNames).each(function(ind, item) {
        $('#' + item.id).attr('checked', false);
        $('#' + item.id).attr('disabled', false);
        if ($.inArray(parseInt($(item).attr('data-value')), id) === -1) {
          $('#' + item.id).prop('checked', false);
          return $('#' + item.id).attr('disabled', true);
        }
      });
    };

    FilterMsterView.prototype.serializeData = function() {
      var data;
      data = FilterMsterView.__super__.serializeData.call(this);
      data.villas = Marionette.getOption(this, 'villas');
      data.unitVariants = Marionette.getOption(this, 'unitVariants');
      data.apartments = Marionette.getOption(this, 'apartments');
      data.plots = Marionette.getOption(this, 'plots');
      data.types = Marionette.getOption(this, 'types');
      data.views = Marionette.getOption(this, 'views');
      data.facings = Marionette.getOption(this, 'facings');
      return data;
    };

    FilterMsterView.prototype.onShow = function() {
      var area, budget, max, min, priceMax, priceMin, sub, subArea, subBudget, types;
      this.hideLabels();
      $('.filters-content').mCustomScrollbar({
        theme: 'cf-scroll'
      });
      $('.filters-wrapper-hover').mCustomScrollbar({
        theme: 'cf-scroll'
      });
      budget = [];
      area = [];
      $.each(unitMasterCollection.toArray(), function(index, value) {
        var unitDetails;
        unitDetails = window.unit.getUnitDetails(value.id);
        budget.push(parseFloat(unitDetails[3]));
        return area.push(parseFloat(unitDetails[0].get('super_built_up_area')));
      });
      min = _.min(area);
      max = _.max(area);
      subArea = (max - min) / 20;
      subArea = subArea.toFixed(0);
      sub = subArea % 5;
      subArea = subArea - sub;
      if (CommonFloor.defaults['common']['area_min'] !== "") {
        $("#area").ionRangeSlider({
          type: "double",
          min: min,
          max: max,
          from: CommonFloor.defaults['common']['area_min']
        }, {
          to: CommonFloor.defaults['common']['area_max']
        }, {
          step: subArea,
          grid: false
        });
      } else {
        $("#area").ionRangeSlider({
          type: "double",
          min: min,
          max: max,
          step: subArea,
          grid: false
        });
      }
      priceMin = _.min(budget);
      priceMax = _.max(budget);
      subBudget = (priceMax - priceMin) / 20;
      subBudget = subBudget.toFixed(0);
      if (CommonFloor.defaults['common']['price_min'] !== "") {
        $("#budget").ionRangeSlider({
          type: "double",
          min: priceMin,
          max: priceMax,
          from: CommonFloor.defaults['common']['price_min'],
          to: CommonFloor.defaults['common']['price_max'],
          grid: false,
          step: subBudget,
          prettify: function(num) {
            return window.numDifferentiation(num);
          }
        });
      } else {
        $("#budget").ionRangeSlider({
          type: "double",
          min: priceMin,
          max: priceMax,
          grid: false,
          step: subBudget,
          prettify: function(num) {
            return window.numDifferentiation(num);
          }
        });
      }
      types = Marionette.getOption(this, 'types');
      return this.loadSelectedFilters();
    };

    FilterMsterView.prototype.hideLabels = function() {
      var apartments, budget, facings, plots, types, unitVariants, views, villas;
      villas = Marionette.getOption(this, 'villas');
      apartments = Marionette.getOption(this, 'apartments');
      plots = Marionette.getOption(this, 'plots');
      views = Marionette.getOption(this, 'views');
      facings = Marionette.getOption(this, 'facings');
      budget = Marionette.getOption(this, 'budget');
      unitVariants = Marionette.getOption(this, 'unitVariants');
      types = Marionette.getOption(this, 'types');
      $.each(villas[0], function(index, value) {
        if (value.length === 0) {
          return $('.villa_' + index).hide();
        }
      });
      $.each(apartments[0], function(index, value) {
        if (value.length === 0) {
          return $('.apartment_' + index).hide();
        }
      });
      $.each(plots[0], function(index, value) {
        if (value.length === 0) {
          return $('.plot_' + index).hide();
        }
      });
      if (views.length === 0) {
        $('.viewLabel').hide();
      }
      if (facings.length === 0) {
        $('.facingLabel').hide();
      }
      if (budget.length === 0) {
        $('.budgetLabel').hide();
      }
      if (unitVariants.length === 0) {
        $('.areaLabel').hide();
      }
      if (types.length === 0) {
        return $('.property_type').hide();
      }
    };

    FilterMsterView.prototype.loadClearFilter = function() {
      var area, budget, max, min, priceMax, priceMin, sub, subArea, subBudget, submax, submin;
      budget = [];
      area = [];
      $.each(unitMasterCollection.toArray(), function(index, value) {
        var unitDetails;
        unitDetails = window.unit.getUnitDetails(value.id);
        budget.push(parseFloat(unitDetails[3]));
        return area.push(parseFloat(unitDetails[0].get('super_built_up_area')));
      });
      min = _.min(area);
      submin = min % 5;
      min = min - submin;
      max = _.max(area);
      submax = max % 5;
      max = max - submax;
      subArea = (max - min) / 20;
      subArea = subArea.toFixed(0);
      sub = subArea % 5;
      subArea = subArea - sub;
      priceMin = _.min(budget);
      priceMax = _.max(budget);
      subBudget = (priceMax - priceMin) / 20;
      subBudget = subBudget.toFixed(0);
      $('#area').val(min + ";" + max);
      $('#budget').val(priceMin + ";" + priceMax);
      $("#area").ionRangeSlider({
        type: "double",
        min: min,
        max: max,
        step: subArea,
        grid: false
      });
      $("#budget").ionRangeSlider({
        type: "double",
        min: priceMin,
        max: priceMax,
        grid: false,
        step: subBudget,
        prettify: function(num) {
          return window.numDifferentiation(num);
        }
      });
      $(this.ui.villa).parent().removeClass('villa-check');
      $(this.ui.villa).parent().removeClass('villa-wrapper');
      $(this.ui.villa).parent().removeClass('villa-btn');
      $(this.ui.apt).parent().removeClass('apartment-check');
      $(this.ui.apt).parent().removeClass('apartment-wrapper');
      $(this.ui.apt).parent().removeClass('apartment-btn');
      $(this.ui.plot).parent().removeClass('plot-check');
      $(this.ui.plot).parent().removeClass('plot-wrapper');
      return $(this.ui.plotplot).parent().removeClass('plot-btn');
    };

    FilterMsterView.prototype.loadSelectedFilters = function() {
      var aptValues, attributes, facings, id, plotValues, pt_types, types, typesArray, unitTypes, unitVariants, unitVariantsArray, unitsArr, unittypesArray, unittypesColl, views, villValues;
      types = [];
      pt_types = Marionette.getOption(this, 'types');
      types = CommonFloor.defaults['type'].split(',');
      if (pt_types.length === 1) {
        types.push(pt_types[0].type);
      }
      unittypesArray = [];
      unitTypes = [];
      $.merge(unitTypes, CommonFloor.defaults['villa']['unit_type_id'].split(','));
      $.merge(unitTypes, CommonFloor.defaults['apartment']['unit_type_id'].split(','));
      $.merge(unitTypes, CommonFloor.defaults['plot']['unit_type_id'].split(','));
      unitVariantsArray = [];
      unitVariants = [];
      $.merge(unitVariants, CommonFloor.defaults['villa']['unit_variant_id'].split(','));
      $.merge(unitVariants, CommonFloor.defaults['apartment']['unit_variant_id'].split(','));
      $.merge(unitVariants, CommonFloor.defaults['plot']['unit_variant_id'].split(','));
      attributes = [];
      villValues = _.values(CommonFloor.defaults['villa']['attributes']);
      aptValues = _.values(CommonFloor.defaults['apartment']['attributes']);
      plotValues = _.values(CommonFloor.defaults['plot']['attributes']);
      $.merge(attributes, villValues);
      $.merge(attributes, aptValues);
      $.merge(attributes, plotValues);
      views = [];
      $.merge(views, CommonFloor.defaults['common']['views'].split(','));
      facings = [];
      $.merge(facings, CommonFloor.defaults['common']['facings'].split(','));
      typesArray = [];
      id = [];
      unitsArr = [];
      unittypesColl = [];
      $.each(types, function(index, value) {
        if (value === 'Villas') {
          $.merge(unitsArr, bunglowVariantMasterCollection.getBunglowMasterUnits());
        }
        if (value === 'Apartments/Penthouse') {
          $.merge(unitsArr, apartmentVariantMasterCollection.getApartmentMasterUnits());
        }
        if (value === 'Plots') {
          $.merge(unitsArr, plotVariantMasterCollection.getPlotMasterUnits());
        }
        if (value === "") {
          $.merge(unitsArr, bunglowVariantMasterCollection.getBunglowUnits());
          $.merge(unitsArr, apartmentVariantMasterCollection.getApartmentUnits());
          return $.merge(unitsArr, plotVariantMasterCollection.getPlotUnits());
        }
      });
      $.each(unitsArr, function(index, value) {
        var unitDetails;
        unitDetails = window.unit.getUnitDetails(value.id);
        id.push(parseInt(unitDetails[0].get('id')));
        return unittypesColl.push(parseFloat(unitDetails[1].get('id')));
      });
      unittypesColl = _.uniq(unittypesColl);
      $(this.ui.unitTypes).each(function(ind, item) {
        $('#' + item.id).prop('checked', true);
        $('#' + item.id).attr('disabled', false);
        if ($.inArray($(item).attr('data-value'), unitTypes) === -1) {
          $('#' + item.id).prop('checked', false);
          return $('#' + item.id).attr('disabled', false);
        }
      });
      $(this.ui.variantNames).each(function(ind, item) {
        $('#' + item.id).prop('checked', true);
        $('#' + item.id).attr('disabled', false);
        if ($.inArray($(item).attr('data-value'), unitVariants) === -1) {
          $('#' + item.id).prop('checked', false);
          return $('#' + item.id).attr('disabled', false);
        }
      });
      $(this.ui.types).each(function(ind, item) {
        var type;
        $('#' + item.id).prop('checked', true);
        $('#' + item.id).attr('disabled', false);
        if ($.inArray($('#' + item.id).attr('data-value'), types) === -1) {
          return $('#' + item.id).prop('checked', false);
        } else {
          type = $('#' + item.id).attr('data-value');
          $('#' + item.id).parent().addClass(type + '-check');
          return $('#' + item.id).parent().addClass(type + '-btn');
        }
      });
      $(this.ui.flooring).each(function(ind, item) {
        $('#' + item.id).prop('checked', true);
        $('#' + item.id).attr('disabled', false);
        if ($.inArray($(item).attr('data-value'), attributes) === -1) {
          $('#' + item.id).prop('checked', false);
          return $('#' + item.id).attr('disabled', false);
        }
      });
      $(this.ui.views).each(function(ind, item) {
        $('#' + item.id).prop('checked', true);
        $('#' + item.id).attr('disabled', false);
        if ($.inArray($(item).val(), views) === -1) {
          $('#' + item.id).prop('checked', false);
          return $('#' + item.id).attr('disabled', false);
        }
      });
      $(this.ui.facings).each(function(ind, item) {
        $('#' + item.id).prop('checked', true);
        $('#' + item.id).attr('disabled', false);
        if ($.inArray($(item).val(), facings) === -1) {
          $('#' + item.id).prop('checked', false);
          return $('#' + item.id).attr('disabled', false);
        }
      });
      this.ui.status.prop('checked', false);
      if (CommonFloor.defaults['common']['availability'] !== "") {
        return this.ui.status.prop('checked', true);
      }
    };

    return FilterMsterView;

  })(Marionette.ItemView);

  CommonFloor.FilterMasterCtrl = (function(superClass) {
    extend(FilterMasterCtrl, superClass);

    function FilterMasterCtrl() {
      return FilterMasterCtrl.__super__.constructor.apply(this, arguments);
    }

    FilterMasterCtrl.prototype.initialize = function() {
      var apartmentFilters, budget, data, facings, plotFilters, types, unitVariants, view, views, viewsFacingsArr, villaFilters;
      unitVariants = [];
      budget = [];
      views = [];
      facings = [];
      villaFilters = this.getVillaFilters();
      if (villaFilters.length !== 0) {
        $.merge(unitVariants, villaFilters[0].unitVariants);
        $.merge(budget, villaFilters[0].budget);
      }
      apartmentFilters = this.getApartmentFilters();
      if (apartmentFilters.length !== 0) {
        $.merge(unitVariants, apartmentFilters[0].unitVariants);
        $.merge(budget, apartmentFilters[0].budget);
      }
      plotFilters = this.getPlotFilters();
      if (plotFilters.length !== 0) {
        $.merge(unitVariants, plotFilters[0].unitVariants);
        $.merge(budget, plotFilters[0].budget);
      }
      if ($.inArray('budget', project.get('filters').defaults) === -1 || _.isUndefined(project.get('filters').defaults)) {
        budget = [];
      }
      if ($.inArray('area', project.get('filters').defaults) === -1 || _.isUndefined(project.get('filters').defaults)) {
        unitVariants = [];
      }
      viewsFacingsArr = this.getViewsFacings();
      views = viewsFacingsArr[0];
      facings = viewsFacingsArr[1];
      data = CommonFloor.masterPropertyTypes();
      types = $.grep(data, function(e) {
        if (_.has(project.get('filters'), s.capitalize(e.name)) && e.count.length > 0) {
          return e;
        }
      });
      $.each(types, function(index, value) {
        value['id'] = value.type;
        if (value.type === 'Apartments') {
          value.type = 'Apartments/Penthouse';
          value.type_name = '(A)/(PH)';
          return value['id'] = 'Apartments';
        }
      });
      this.view = view = new CommonFloor.FilterMsterView({
        model: project,
        'villas': villaFilters,
        'unitVariants': _.uniq(unitVariants),
        'apartments': apartmentFilters,
        'budget': budget,
        'types': types,
        'plots': plotFilters,
        'views': views,
        'facings': facings
      });
      return this.show(this.view);
    };

    FilterMasterCtrl.prototype.getVillaFilters = function() {
      var budget, filters, flooring, flooringAttributes, newtemp, temp, unitTypes, unitVariantNames, unitVariants, unit_types, unitsArr;
      filters = [];
      unitTypes = [];
      unit_types = [];
      unitVariants = [];
      unitVariantNames = [];
      flooringAttributes = [];
      budget = [];
      flooring = [];
      temp = [];
      newtemp = [];
      bunglowVariantMasterCollection.each(function(item) {
        var unitTypeModel, units;
        units = unitMasterCollection.where({
          'unit_variant_id': item.get('id')
        });
        if (units.length !== 0) {
          unitTypeModel = unitTypeMasterCollection.findWhere({
            'id': item.get('unit_type_id')
          });
          if ($.inArray(item.get('unit_type_id'), unit_types) === -1) {
            unit_types.push(parseInt(unitTypeModel.get('id')));
            unitTypes.push({
              'id': unitTypeModel.get('id'),
              'name': unitTypeModel.get('name'),
              'type': 'V'
            });
          }
          unitVariants.push(item.get('super_built_up_area'));
          return unitVariantNames.push({
            'id': item.get('id'),
            'name': item.get('unit_variant_name'),
            'type': 'V'
          });
        }
      });
      if (!_.isUndefined(project.get('filters').Villa)) {
        $.each(project.get('filters').Villa, function(index, value) {
          if (value !== 'unitTypes' && value !== 'unitVariantNames') {
            temp = [];
            flooring = [];
            bunglowVariantMasterCollection.each(function(item) {
              var units;
              units = unitMasterCollection.where({
                'unit_variant_id': item.get('id')
              });
              if (units.length !== 0) {
                return $.each(item.get('variant_attributes'), function(ind, val) {
                  if (ind === value && val !== "") {
                    if (_.isArray(val)) {
                      return $.each(val, function(ind1, val1) {
                        if ($.inArray(val1, flooring) === -1) {
                          flooring.push(val1);
                          return temp.push({
                            'name': val1,
                            'index': value,
                            'id': 'villa' + s.replaceAll(val1, " ", "_"),
                            'dataId': s.replaceAll(val1, " ", "_"),
                            'classname': 'attributes',
                            'label': ind,
                            type: 'V'
                          });
                        }
                      });
                    } else {
                      if ($.inArray(val, flooring) === -1) {
                        flooring.push(val);
                        return temp.push({
                          'name': val,
                          'index': value,
                          'id': 'villa' + s.replaceAll(val, " ", "_"),
                          'dataId': s.replaceAll(val, " ", "_"),
                          'classname': 'attributes',
                          'label': ind,
                          type: 'V'
                        });
                      }
                    }
                  }
                });
              }
            });
            if (temp.length !== 0) {
              return newtemp.push({
                'label': value.toUpperCase(),
                'value': temp,
                'index': value
              });
            }
          }
        });
        unitsArr = bunglowVariantMasterCollection.getBunglowMasterUnits();
        $.each(unitsArr, function(index, value) {
          var unitDetails;
          unitDetails = window.unit.getUnitDetails(value.id);
          return budget.push(parseFloat(unitDetails[3]));
        });
      }
      filters.push({
        'unitTypes': unitTypes,
        'unitVariants': unitVariants,
        'unitVariantNames': unitVariantNames,
        'flooring': newtemp,
        'budget': budget
      });
      $.each(filters[0], function(index, value) {
        if ($.inArray(index, project.get('filters').Villa) === -1 && index !== 'budget' && index !== 'unitVariants' && index !== 'flooring') {
          filters[0][index] = [];
        }
        if (index === 'flooring') {
          return $.each(value, function(ind, val) {
            if ($.inArray(val.index, project.get('filters').Villa) === -1) {
              return value[ind] = [];
            }
          });
        }
      });
      console.log(filters);
      return filters;
    };

    FilterMasterCtrl.prototype.getApartmentFilters = function() {
      var budget, filters, flooring, flooringAttributes, newtemp, temp, unitTypes, unitVariantNames, unitVariants, unit_types, unitsArr;
      filters = [];
      unitTypes = [];
      unit_types = [];
      unitVariants = [];
      unitVariantNames = [];
      budget = [];
      flooringAttributes = [];
      flooring = [];
      temp = [];
      newtemp = [];
      apartmentVariantMasterCollection.each(function(item) {
        var type, unitTypeModel, units;
        units = unitMasterCollection.where({
          'unit_variant_id': item.get('id')
        });
        if (units.length !== 0) {
          unitTypeModel = unitTypeMasterCollection.findWhere({
            'id': item.get('unit_type_id')
          });
          type = 'A';
          if (window.propertyTypes[unitTypeModel.get('property_type_id')] === 'Penthouses') {
            type = 'PH';
          }
          if ($.inArray(item.get('unit_type_id'), unit_types) === -1) {
            unit_types.push(parseInt(unitTypeModel.get('id')));
            unitTypes.push({
              'id': unitTypeModel.get('id'),
              'name': unitTypeModel.get('name'),
              'type': type
            });
          }
          unitVariants.push(item.get('super_built_up_area'));
          return unitVariantNames.push({
            'id': item.get('id'),
            'name': item.get('unit_variant_name'),
            'type': type
          });
        }
      });
      if (!_.isUndefined(project.get('filters').Apartment)) {
        $.each(project.get('filters').Apartment, function(index, value) {
          if (value !== 'unitTypes' && value !== 'unitVariantNames') {
            temp = [];
            flooring = [];
            apartmentVariantMasterCollection.each(function(item) {
              var units;
              units = unitMasterCollection.where({
                'unit_variant_id': item.get('id')
              });
              if (units.length !== 0) {
                return $.each(item.get('variant_attributes'), function(ind, val) {
                  if (ind === value && val !== "") {
                    if (_.isArray(val)) {
                      return $.each(val, function(ind1, val1) {
                        if ($.inArray(val1, flooring) === -1) {
                          flooring.push(val1);
                          return temp.push({
                            'name': val1,
                            'index': value,
                            'id': 'apt' + s.replaceAll(val1, " ", "_"),
                            'dataId': s.replaceAll(val1, " ", "_"),
                            'classname': 'attributes',
                            'label': ind,
                            type: 'A'
                          });
                        }
                      });
                    } else {
                      if ($.inArray(val, flooring) === -1) {
                        flooring.push(val);
                        return temp.push({
                          'name': val,
                          'index': value,
                          'id': 'apt' + s.replaceAll(val, " ", "_"),
                          'dataId': s.replaceAll(val, " ", "_"),
                          'classname': 'attributes',
                          'label': ind,
                          type: 'A'
                        });
                      }
                    }
                  }
                });
              }
            });
            if (temp.length !== 0) {
              return newtemp.push({
                'label': value.toUpperCase(),
                'value': temp,
                'index': value
              });
            }
          }
        });
      }
      unitsArr = apartmentVariantMasterCollection.getApartmentMasterUnits();
      $.each(unitsArr, function(index, value) {
        var unitDetails;
        unitDetails = window.unit.getUnitDetails(value.id);
        return budget.push(parseFloat(unitDetails[3]));
      });
      filters.push({
        'unitTypes': unitTypes,
        'unitVariants': unitVariants,
        'unitVariantNames': unitVariantNames,
        'flooring': newtemp,
        'budget': budget
      });
      $.each(filters[0], function(index, value) {
        if ($.inArray(index, project.get('filters').Apartment) === -1 && index !== 'budget' && index !== 'unitVariants' && index !== 'flooring') {
          filters[0][index] = [];
        }
        if (index === 'flooring') {
          return $.each(value, function(ind, val) {
            if ($.inArray(val.index, project.get('filters').Apartment) === -1) {
              return filters[0][index] = [];
            }
          });
        }
      });
      return filters;
    };

    FilterMasterCtrl.prototype.getPlotFilters = function() {
      var budget, filters, flooring, flooringAttributes, newtemp, temp, unitTypes, unitVariantNames, unitVariants, unit_types, unitsArr;
      filters = [];
      unitTypes = [];
      unit_types = [];
      unitVariants = [];
      unitVariantNames = [];
      flooringAttributes = [];
      budget = [];
      flooring = [];
      temp = [];
      newtemp = [];
      plotVariantMasterCollection.each(function(item) {
        var unitTypeModel, units;
        units = unitMasterCollection.where({
          'unit_variant_id': item.get('id')
        });
        if (units.length !== 0) {
          unitTypeModel = unitTypeMasterCollection.findWhere({
            'id': item.get('unit_type_id')
          });
          if ($.inArray(item.get('unit_type_id'), unit_types) === -1) {
            unit_types.push(parseInt(unitTypeModel.get('id')));
            unitTypes.push({
              'id': unitTypeModel.get('id'),
              'name': unitTypeModel.get('name'),
              'type': 'P'
            });
          }
          unitVariants.push(item.get('size'));
          return unitVariantNames.push({
            'id': item.get('id'),
            'name': item.get('unit_variant_name'),
            'type': 'P'
          });
        }
      });
      if (!_.isUndefined(project.get('filters').Plot)) {
        $.each(project.get('filters').Plot, function(index, value) {
          if (value !== 'unitTypes' && value !== 'unitVariantNames') {
            temp = [];
            flooring = [];
            plotVariantMasterCollection.each(function(item) {
              var units;
              units = unitMasterCollection.where({
                'unit_variant_id': item.get('id')
              });
              if (units.length !== 0) {
                return $.each(item.get('variant_attributes'), function(ind, val) {
                  if (ind === value && val !== "") {
                    if (_.isArray(val)) {
                      return $.each(val, function(ind1, val1) {
                        if ($.inArray(val1, flooring) === -1) {
                          flooring.push(val1);
                          return temp.push({
                            'name': val1,
                            'index': value,
                            'id': 'plot' + s.replaceAll(val1, " ", "_"),
                            'dataId': s.replaceAll(val1, " ", "_"),
                            'classname': 'attributes',
                            'label': ind,
                            type: 'P'
                          });
                        }
                      });
                    } else {
                      if ($.inArray(val, flooring) === -1) {
                        flooring.push(val);
                        return temp.push({
                          'name': val,
                          'index': value,
                          'id': 'plot' + s.replaceAll(val, " ", "_"),
                          'dataId': s.replaceAll(val, " ", "_"),
                          'classname': 'attributes',
                          'label': ind,
                          type: 'P'
                        });
                      }
                    }
                  }
                });
              }
            });
            if (temp.length !== 0) {
              return newtemp.push({
                'label': value.toUpperCase(),
                'value': temp,
                'index': value
              });
            }
          }
        });
      }
      unitsArr = plotVariantMasterCollection.getPlotMasterUnits();
      $.each(unitsArr, function(index, value) {
        var unitDetails;
        unitDetails = window.unit.getUnitDetails(value.id);
        return budget.push(parseFloat(unitDetails[3]));
      });
      filters.push({
        'unitTypes': unitTypes,
        'unitVariants': unitVariants,
        'unitVariantNames': unitVariantNames,
        'flooring': newtemp,
        'budget': budget
      });
      $.each(filters[0], function(index, value) {
        if ($.inArray(index, project.get('filters').Plot) === -1 && index !== 'budget' && index !== 'unitVariants' && index !== 'flooring') {
          filters[0][index] = [];
        }
        if (index === 'flooring') {
          return $.each(value, function(ind, val) {
            if ($.inArray(val.index, project.get('filters').Plot) === -1) {
              return value[ind] = [];
            }
          });
        }
      });
      return filters;
    };

    FilterMasterCtrl.prototype.getViewsFacings = function() {
      var facings, facingsArr, viewArr, views;
      views = [];
      viewArr = [];
      facingsArr = [];
      _.each(unitCollection.toArray(), function(item) {
        return $.merge(views, item.get('views'));
      });
      views = _.uniq(views);
      views = views.sort();
      $.each(views, function(ind, val) {
        return viewArr.push({
          'id': val,
          'name': val
        });
      });
      facings = ['North', 'South', 'East', 'West', 'North-East', 'North-West', 'South-East', 'South-West'];
      $.each(facings, function(ind, val) {
        return facingsArr.push({
          'id': val,
          'name': val
        });
      });
      if ($.inArray('views', project.get('filters').defaults) === -1 || _.isUndefined(project.get('filters').defaults)) {
        viewArr = [];
      }
      if ($.inArray('direction', project.get('filters').defaults) === -1 || _.isUndefined(project.get('filters').defaults)) {
        facingsArr = [];
      }
      return [viewArr, facingsArr];
    };

    return FilterMasterCtrl;

  })(Marionette.RegionController);

}).call(this);

//# sourceMappingURL=../../frontend/project-master-view/project.master.filter.controller.js.map
(function() {
  var CenterUnitView, LeftUnitView, TopUnitView,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  CommonFloor.UnitView = (function(superClass) {
    extend(UnitView, superClass);

    function UnitView() {
      return UnitView.__super__.constructor.apply(this, arguments);
    }

    UnitView.prototype.template = '#unit-view-template';

    return UnitView;

  })(Marionette.LayoutView);

  CommonFloor.UnitCtrl = (function(superClass) {
    extend(UnitCtrl, superClass);

    function UnitCtrl() {
      return UnitCtrl.__super__.constructor.apply(this, arguments);
    }

    UnitCtrl.prototype.initialize = function() {
      if (jQuery.isEmptyObject(project.toJSON())) {
        project.setProjectAttributes(PROJECTID);
        CommonFloor.loadJSONData();
      }
      if (bunglowVariantMasterCollection.length === 0 && apartmentVariantMasterCollection.length === 0 && plotVariantMasterCollection.length === 0) {
        return this.show(new CommonFloor.NothingFoundView);
      } else {
        return this.show(new CommonFloor.UnitView);
      }
    };

    return UnitCtrl;

  })(Marionette.RegionController);

  TopUnitView = (function(superClass) {
    extend(TopUnitView, superClass);

    function TopUnitView() {
      return TopUnitView.__super__.constructor.apply(this, arguments);
    }

    TopUnitView.prototype.template = Handlebars.compile('<div class="container-fluid animated fadeIn"> <div class="row"> <div class="col-md-12 col-xs-12 col-sm-12"> <div class="breadcrumb-bar"> <a class="unit_back" href="#"></a> </div> <div class="header-info"> <h2 class="pull-left proj-name">{{project_title}} - {{unit_name}}</h2> </div> <div class="pull-right"> <form action="{{bookingPortalUrl}}" method="POST"> <input type="hidden" value = "{{id}}" name="unit_id"> <button type="submit" class="btn btn-primary cf-btn-primary">Book Now - &#8377; {{unitBookingAmount}}</button> </form> </div> <div class="clearfix"></div> </div> </div> </div>');

    TopUnitView.prototype.ui = {
      unitBack: '.unit_back'
    };

    TopUnitView.prototype.serializeData = function() {
      var data, response, unit, unitid, url;
      data = TopUnitView.__super__.serializeData.call(this);
      url = Backbone.history.fragment;
      unitid = parseInt(url.split('/')[1]);
      response = window.unit.getUnitDetails(unitid);
      unit = unitCollection.findWhere({
        id: unitid
      });
      data.project_title = project.get('project_title');
      data.unitBookingAmount = window.numDifferentiation(unit.get('booking_amount'));
      data.bookingPortalUrl = window.bookingPortalUrl;
      return data;
    };

    TopUnitView.prototype.events = function() {
      return {
        'click @ui.unitBack': function(e) {
          var buildingModel, building_id, previousRoute, property, unit, unitType, unitid, url;
          e.preventDefault();
          previousRoute = CommonFloor.router.previous();
          url = Backbone.history.fragment;
          unitid = parseInt(url.split('/')[1]);
          unit = unitCollection.findWhere({
            id: unitid
          });
          unitType = unitTypeMasterCollection.findWhere({
            'id': unit.get('unit_type_id')
          });
          property = window.propertyTypes[unitType.get('property_type_id')];
          if (s.decapitalize(property) === 'penthouses' || s.decapitalize(property) === 'apartments') {
            buildingModel = buildingCollection.findWhere({
              'id': unit.get('building_id')
            });
            building_id = buildingModel.get('id');
            if (Object.keys(buildingModel.get('building_master')).length === 0) {
              return CommonFloor.navigate('/building/' + building_id + '/apartments', true);
            } else {
              return CommonFloor.navigate('/building/' + building_id + '/master-view', true);
            }
          } else {
            if (Object.keys(project.get('project_master')).length === 0) {
              return CommonFloor.navigate('/list-view', true);
            } else {
              return CommonFloor.navigate('/master-view', true);
            }
          }
        }
      };
    };

    return TopUnitView;

  })(Marionette.ItemView);

  CommonFloor.TopUnitCtrl = (function(superClass) {
    extend(TopUnitCtrl, superClass);

    function TopUnitCtrl() {
      return TopUnitCtrl.__super__.constructor.apply(this, arguments);
    }

    TopUnitCtrl.prototype.initialize = function() {
      var response, unit, unitid, url;
      url = Backbone.history.fragment;
      unitid = parseInt(url.split('/')[1]);
      unit = unitCollection.findWhere({
        id: unitid
      });
      response = window.unit.getUnitDetails(unitid);
      unit.set('type', s.capitalize(response[2]));
      return this.show(new TopUnitView({
        model: unit
      }));
    };

    return TopUnitCtrl;

  })(Marionette.RegionController);

  LeftUnitView = (function(superClass) {
    extend(LeftUnitView, superClass);

    function LeftUnitView() {
      return LeftUnitView.__super__.constructor.apply(this, arguments);
    }

    LeftUnitView.prototype.template = Handlebars.compile('<div class="col-md-4 col-lg-3 col-xs-12 col-sm-12 search-left-content animated fadeIn"> <div class="unit-details"> <div class="row detail-list"> <div class="col-sm-6 col-xs-6 text-center"> <span class="facts-icon icon-total-units"></span> <div class="unit-label m-t-10"> <h3>{{unit_variant}}</h3> <h6 class="text-muted">Unit Variant</h6> </div> </div> <div class="col-sm-6 col-xs-6 text-center"> <span class="facts-icon icon-BHKtype"></span> <div class="unit-label m-t-10"> <h3>{{type}}</h3> <h6 class="text-muted">Unit Type</h6> </div> </div> </div> <div class="row detail-list"> <div class="col-sm-6 col-xs-6 text-center"> <span class="facts-icon icon-BHK-area-2"></span> <div class="unit-label m-t-10"> <h3>{{area}} {{measurement_units}}</h3> <h6 class="text-muted">Area</h6> </div> </div> <div class="col-sm-6 col-xs-6 text-center"> <span class="facts-icon icon-rupee-icn"></span> <div class="unit-label m-t-10"> <h3 class="price">{{price}}</h3> <h6 class="text-muted">Price</h6> </div> </div> </div> <div class="advncd-filter-wrp"> <div class="blck-wrap title-row"> <h5 class="bold property {{classname}}">{{property_type}}</h5> </div> {{#attributes}} <div class="row"> <div class="col-sm-12"> <h6><span class="text-muted">{{attribute}}:</span> {{value}}</h6> </div> </div> {{/attributes}} </div> <div class=" title-row"> <div class="panel-group" id="accordion" role="tablist" aria-multiselectable="true"> {{#levels}} <div class="panel panel-default"> <div class="panel-heading" role="tab" id="headingTwo"> <a class="accordion-toggle collapsed text-primary panel-title m-b-5 block" data-toggle="collapse" data-parent="#accordion" href="#{{id}}" aria-expanded="false" > <h4 class="inline-block"> {{level_name}} </h4> </a> </div> <div id="{{id}}" class="panel-collapse collapse collapseLevel" role="tabpanel" aria-labelledby="headingTwo"> <div class="panel-body"> {{#rooms}} <div class="room-attr"> <div class="m-b-15"> <h5 class="m-b-5">{{room_name}}</h5> {{#attributes}} <div class=""><span>{{attribute}}</span>: {{value}}</div> {{/attributes}} </div> </div> {{/rooms}} </div> </div> </div> {{/levels}} </div> </div> </div> <div class="clearfix"></div> <div class="similar-section"> <h5 class="bold m-b-15">{{similarUnitsText}}</h5> {{#similarUnits}} <div class="m-b-15 clearfix"> <div class="sim-icon"> <div class="alert "> <i class="{{type}}-ico"></i> </div> </div> <div class="sim-details"> <h5><a href="' + BASEURL + '/project/' + PROJECTID + '/#unit-view/{{id}}">{{unit_name}}</a> </h5> {{unit_type}} ({{area}} {{units}})<br> {{variant}}<br> <span class="text-primary"><span class="icon-rupee-icn"></span>{{price}}</span> </div> </div> {{/similarUnits}} </div> </div> </div>');

    LeftUnitView.prototype.serializeData = function() {
      var attributes, data, floor, response, similarUnits, temp, unit, unitid, url;
      data = LeftUnitView.__super__.serializeData.call(this);
      url = Backbone.history.fragment;
      unitid = parseInt(url.split('/')[1]);
      response = window.unit.getUnitDetails(unitid);
      unit = unitCollection.findWhere({
        id: unitid
      });
      floor = response[0].get('floor');
      attributes = [];
      if (response[2] === 'apartment' || response[2] === 'Penthouse') {
        attributes.push({
          'attribute': 'Floor',
          'value': unit.get('floor')
        });
      }
      if (response[4] !== null) {
        $.each(response[4], function(index, value) {
          return attributes.push({
            'attribute': s.capitalize(index),
            'value': value
          });
        });
      }
      similarUnits = this.getSimilarUnits(unit);
      temp = [];
      $.each(similarUnits[0], function(index, value) {
        var res;
        res = window.unit.getUnitDetails(value.get('id'));
        return temp.push({
          'unit_name': value.get('unit_name'),
          'unit_type': res[1].get('name'),
          'price': window.numDifferentiation(res[3]),
          'area': res[0].get('super_built_up_area'),
          'variant': res[0].get('unit_variant_name'),
          'id': value.get('id'),
          'type': similarUnits[2],
          'units': project.get('measurement_units')
        });
      });
      data.area = response[0].get('super_built_up_area');
      data.type = response[1].get('name');
      data.unit_variant = response[0].get('unit_variant_name');
      data.levels = this.generateLevels(floor, response, unit);
      data.attributes = attributes;
      data.similarUnits = temp;
      data.similarUnitsText = similarUnits[1];
      data.measurement_units = project.get('measurement_units');
      data.property_type = s.capitalize(response[2] + ' Attribute(s)');
      data.classname = 'hidden';
      data.unitSellingAmount = Marionette.getOption(this, 'unitSellingAmount');
      if (attributes.length !== 0) {
        data.classname = '';
      }
      return data;
    };

    LeftUnitView.prototype.getSimilarUnits = function(unit) {
      var i, text, unitColl, unitModel, unitid, units, unitsArr, url;
      units = [];
      i = 0;
      url = Backbone.history.fragment;
      unitid = parseInt(url.split('/')[1]);
      unitModel = unitMasterCollection.findWhere({
        'id': unitid
      });
      unitColl = CommonFloor.getUnitsProperty(unitModel);
      unitsArr = unitColl[0];
      text = unitColl[1];
      $.each(unitsArr.toArray(), function(index, value) {
        if (value.get('id') !== unitid && value.get('availability') === 'available') {
          units.push(value);
          i++;
        }
        if (i === 3) {
          return false;
        }
      });
      if (unitsArr.length === 1) {
        text = '';
      }
      if (units.length === 0) {
        text = '';
      }
      return [units, text, unitColl[2]];
    };

    LeftUnitView.prototype.generateLevels = function(floor, response, unit) {
      var levels;
      levels = [];
      $.each(floor, function(index, value) {
        var level_id, level_name, rooms;
        rooms = [];
        level_name = 'Level  ' + index;
        if (response[2] === 'apartment') {
          level_name = 'Room details';
        }
        $.each(value.rooms_data, function(ind, val) {
          var attributes;
          attributes = [];
          $.each(val.atributes, function(ind_att, val_att) {
            if (val_att.attribute_value !== "") {
              return attributes.push({
                'attribute': s.capitalize(val_att.attribute_key),
                'value': val_att.attribute_value
              });
            }
          });
          return rooms.push({
            'room_name': val.room_name,
            'attributes': attributes
          });
        });
        if (rooms.length > 0) {
          level_id = s.replaceAll(level_name, " ", "_");
          return levels.push({
            'level_name': level_name,
            'rooms': rooms,
            'id': level_id
          });
        }
      });
      return levels;
    };

    LeftUnitView.prototype.onShow = function() {
      var response, unitModel, unitid, url;
      url = Backbone.history.fragment;
      unitid = parseInt(url.split('/')[1]);
      response = window.unit.getUnitDetails(unitid);
      unitModel = unitMasterCollection.findWhere({
        'id': unitid
      });
      $('.price').text(window.numDifferentiation(unitModel.get('selling_amount')));
      if (response[2] === 'apartment') {
        return $('.collapseLevel').collapse('show');
      }
    };

    return LeftUnitView;

  })(Marionette.ItemView);

  CommonFloor.LeftUnitCtrl = (function(superClass) {
    extend(LeftUnitCtrl, superClass);

    function LeftUnitCtrl() {
      return LeftUnitCtrl.__super__.constructor.apply(this, arguments);
    }

    LeftUnitCtrl.prototype.initialize = function() {
      var unitid, url;
      url = Backbone.history.fragment;
      unitid = parseInt(url.split('/')[1]);
      return this.show(new LeftUnitView);
    };

    return LeftUnitCtrl;

  })(Marionette.RegionController);

  CenterUnitView = (function(superClass) {
    extend(CenterUnitView, superClass);

    function CenterUnitView() {
      return CenterUnitView.__super__.constructor.apply(this, arguments);
    }

    CenterUnitView.prototype.template = Handlebars.compile('<div class="col-md-8 col-lg-9 col-sm-12 col-xs-12 us-right-content single-unit unit-slides animated fadeIn"> <div class=""> <div class="liquid-slider slider" id="slider-id"> <div class="ls-wrapper ls-responsive"> <div class="ls-nav"> <ul> <li class="external "> <h4 class="title">External 3D</h4> </li> <li class="twoD"> <h4 class="title">2D Layout</h4> </li> <li class="threeD"> <h4 class="title">3D Layout</h4> </li> <li class="gallery"> <h4 class="title">Gallery</h4> </li> <li class="master hidden"> <h4 class="title">Position</h4> </li> <li class="booking"> <h4 class="title">Payment Plan</h4> </li> </ul> </div> <div class="price-mode-dropdown hidden"> <div class="plan-select form-inline"> <!--h5 class="inline-block">Payment Plan: </h5--> <select class="form-control" id="paymentplan"> <option value="payment_plan_breakdown"> Payment Plan Breakdown </option> <option value="price_breakup"> Price Breakup </option> </select> </div> <div class="plan-amount text-right"> <h5 class="inline-block">Total Sale Value: </h5> <h4 class="inline-block bold text-primary"><span class="rec" data-d-group="2" data-m-dec=""><span class="icon-rupee-icn"></span> {{totalSaleValue}}</span></h4> </div> <div class="clearfix"></div> </div> </div> <div class="liquid-slider slider"> <div class="panel-wrapper"> <div class="level "> <img class="firstimage animated fadeIn img-responsive" src=""/> <div class="images animated fadeIn text-center"> </div> </div> </div> </div> <div class="single-unit"> <div class="prev"></div> <div class="next"></div> </div> </div> </div> </div>');

    CenterUnitView.prototype.ui = {
      imagesContainer: '.us-right-content'
    };

    CenterUnitView.prototype.serializeData = function() {
      var data, id, unit, unitPaymentPlan, url;
      data = CenterUnitView.__super__.serializeData.call(this);
      url = Backbone.history.fragment;
      id = url.split('/')[1];
      unit = unitCollection.findWhere({
        'id': parseInt(id)
      });
      unitPaymentPlan = Marionette.getOption(this, 'unitPaymentPlan');
      data.totalSaleValue = window.numDifferentiation(unit.get('selling_amount'));
      return data;
    };

    CenterUnitView.prototype.events = {
      'click .threeD': function(e) {
        var html, response;
        $('.price-mode-dropdown').addClass('hidden');
        $('.firstimage').hide();
        $('.images').empty();
        response = this.generateLevels();
        html = '';
        $.each(response[1], function(index, value) {
          return html += '<div class="layouts animated fadeIn"> <a class="fancybox" rel="3d" href="' + value + '" title="' + s.replaceAll(response[2][index], "_", " ") + '"> <img class="img" data-src="' + value + '" /> <div class="img-overlay"></div> <span>' + s.replaceAll(response[2][index], "_", " ") + '</span> </a> </div>';
        });
        $('.images').html(html);
        $('.img').lazyLoadXT({
          forceLoad: true,
          updateEvent: 'load',
          oncomplete: function() {
            $('.img').removeClass("lazy-hidden");
            return $('.img').addClass("lazy-loaded");
          }
        });
        $('.price-mode-dropdown').addClass('hidden');
        $('.threeD').addClass('current');
        $('.external').removeClass('current');
        $('.twoD').removeClass('current');
        $('.gallery').removeClass('current');
        $('.master').removeClass('current');
        return $('.booking').removeClass('current');
      },
      'click .twoD': function(e) {
        var html, response;
        $('.price-mode-dropdown').addClass('hidden');
        $('.firstimage').hide();
        $('.images').empty();
        response = this.generateLevels();
        html = '';
        $.each(response[0], function(index, value) {
          return html += '<div class="layouts animated fadeIn"> <a class="fancybox" rel="2d" href="' + value + '" title="' + s.replaceAll(response[2][index], "_", " ") + '"> <img class="img" data-src="' + value + '" /> <div class="img-overlay"></div> <span>' + s.replaceAll(response[2][index], "_", " ") + '</span> </a> </div>';
        });
        $('.images').html(html);
        $('.img').lazyLoadXT({
          forceLoad: true,
          updateEvent: 'load',
          oncomplete: function() {
            $('.img').removeClass("lazy-hidden");
            return $('.img').addClass("lazy-loaded");
          }
        });
        $('.price-mode-dropdown').addClass('hidden');
        $('.twoD').addClass('current');
        $('.external').removeClass('current');
        $('.threeD').removeClass('current');
        $('.gallery').removeClass('current');
        $('.master').removeClass('current');
        return $('.booking').removeClass('current');
      },
      'click .external': function(e) {
        var html, response;
        $('.price-mode-dropdown').addClass('hidden');
        $('.firstimage').hide();
        $('.images').empty();
        response = this.generateLevels();
        html = '';
        html += '<div class="external-wrapper"> <div id="rotate_loader" class="img-loader"> <div class="square" ></div> <div class="square"></div> <div class="square last"></div> <div class="square clear"></div> <div class="square"></div> <div class="square last"></div> <div class="square clear"></div> <div class="square "></div> <div class="square last"></div> </div> <div class="animated fadeIn hidden external-container"> <img class="img-responsive external-img" src="' + response[3].get('external3durl') + '" /> </div> </div>';
        $('.images').html(html);
        $('#rotate_loader').removeClass('hidden');
        $('.external-img').load(function() {
          $('#rotate_loader').addClass('hidden');
          return $('.external-container').removeClass('hidden');
        });
        $('.price-mode-dropdown').addClass('hidden');
        $('.external').addClass('current');
        $('.threeD').removeClass('current');
        $('.twoD').removeClass('current');
        $('.gallery').removeClass('current');
        $('.master').removeClass('current');
        return $('.booking').removeClass('current');
      },
      'click .gallery': function(e) {
        var html, response;
        $('.price-mode-dropdown').addClass('hidden');
        $('.images').empty();
        $('.firstimage').hide();
        response = this.generateLevels();
        html = '';
        $.each(response[3].get('galleryurl'), function(index, value) {
          return html += '<div class="animated fadeIn gallery-img"> <a class="fancybox" rel="gall" href="' + value + '"> <img class="img" data-src="' + value + '" /> </a> </div>';
        });
        $('.images').html(html);
        $('.img').lazyLoadXT({
          forceLoad: true,
          updateEvent: 'load',
          oncomplete: function() {
            $('.img').removeClass("lazy-hidden");
            return $('.img').addClass("lazy-loaded");
          }
        });
        $('.price-mode-dropdown').addClass('hidden');
        $('.gallery').addClass('current');
        $('.threeD').removeClass('current');
        $('.twoD').removeClass('current');
        $('.external').removeClass('current');
        $('.master').removeClass('current');
        return $('.booking').removeClass('current');
      },
      'click .master': function(e) {
        $('.price-mode-dropdown').addClass('hidden');
        $('.firstimage').show();
        $('.images').empty();
        this.loadMaster();
        $('.master').addClass('current');
        $('.gallery').removeClass('current');
        $('.threeD').removeClass('current');
        $('.twoD').removeClass('current');
        $('.external').removeClass('current');
        return $('.booking').removeClass('current');
      },
      'change #paymentplan': function(e) {
        var html, selectedMode, unitPaymentPlan, unitPlanMilestones, unitPriceSheet, unitPriceSheetComponents, unitTotalSaleValue;
        selectedMode = $('#paymentplan').val();
        $('.price-mode-dropdown').removeClass('hidden');
        unitPaymentPlan = Marionette.getOption(this, 'unitPaymentPlan');
        unitPriceSheet = Marionette.getOption(this, 'unitPriceSheet');
        $('.images').empty();
        $('.firstimage').hide();
        html = '';
        html += '<div class="invoice-items animated fadeIn"> <ul id="paymentTable">';
        if (selectedMode === "payment_plan_breakdown") {
          if (!unitPaymentPlan) {
            html += "No Data Found";
          } else {
            unitPlanMilestones = unitPaymentPlan.milestones;
            unitTotalSaleValue = unitPaymentPlan.total_sale_value;
            _.each(unitPlanMilestones, function(milestone, key) {
              var amount, perc;
              perc = window.calculatePerc(milestone.amount, unitTotalSaleValue);
              amount = window.numDifferentiation(milestone.amount);
              return html += '<li class="milestonePercent"> <span class="msPercent">' + perc + '%</span> </li> <li class="milestoneList"> <div class="msName">' + milestone.milestone + '</div> <div class="msVal"> <div> <span class="label">Cost Type:</span> <span class= "percentageValue10 label"  data-d-group= "2" data-m-dec=""> ' + milestone.cost_type + '</span> </div> <div> <span class="label">Due Date:</span> <span class= "service10 label"  data-d-group="2" data-m-dec=""> ' + milestone.milestone_date + '</span> </div> <div> Total Amount: <span class="total10" data-d-group="2" data-m-dec=""><span class="icon-rupee-icn"></span> ' + amount + '</span> </div> </div><span class="barBg" style="width:' + perc + '%"></span> </li> <div class="clearfix"></div>';
            });
          }
        } else if (selectedMode === "price_breakup") {
          if (!unitPriceSheet) {
            html += "No Data Found";
          } else {
            unitPriceSheetComponents = unitPriceSheet.components;
            unitTotalSaleValue = unitPriceSheet.total_sale_value;
            _.each(unitPriceSheetComponents, function(component, key) {
              var component_amt, perc;
              perc = window.calculatePerc(component.amount, unitTotalSaleValue);
              component_amt = window.numDifferentiation(component.amount);
              return html += '<li class="milestonePercent"> <span class="msPercent">' + perc + '%</span> </li> <li class="milestoneList"> <div class="msName">' + component.component_price_type + '</div> <div class="msVal"> <div> <span class="label">Cost Type:</span> <span class= "percentageValue10 label"  data-d-group= "2" data-m-dec=""> ' + component.cost_type + '</span> </div> <div> <span class="label">Sub Type:</span> <span class= "service10 label"  data-d-group="2" data-m-dec=""> ' + component.component_price_sub_type + '</span> </div> <div> Total Amount: <span class="total10" data-d-group="2" data-m-dec=""><span class="icon-rupee-icn"></span> ' + component_amt + '</span> </div> </div><span class="barBg" style="width:' + perc + '%"></span> </li> <div class="clearfix"></div>';
            });
          }
        }
        html += '</ul> </div>';
        return $('.images').html(html);
      },
      'click .booking': function(e) {
        var html, unitPaymentPlan, unitPlanMilestones, unitPriceSheet, unitPriceSheetComponents, unitTotalSaleValue;
        $('#paymentplan option[value="payment_plan_breakdown"]').attr('selected', 'selected');
        $('.price-mode-dropdown').removeClass('hidden');
        unitPaymentPlan = Marionette.getOption(this, 'unitPaymentPlan');
        unitPriceSheet = Marionette.getOption(this, 'unitPriceSheet');
        $('.images').empty();
        $('.firstimage').hide();
        html = '';
        html += '<div class="invoice-items animated fadeIn"> <ul id="paymentTable">';
        if (!unitPaymentPlan) {
          html += "No Data Found";
        } else {
          unitPlanMilestones = unitPaymentPlan.milestones;
          unitTotalSaleValue = unitPaymentPlan.total_sale_value;
          unitPriceSheetComponents = unitPriceSheet.components;
          _.each(unitPlanMilestones, function(milestone, key) {
            var amount, perc;
            perc = window.calculatePerc(milestone.amount, unitTotalSaleValue);
            amount = window.numDifferentiation(milestone.amount);
            return html += '<li class="milestonePercent"> <span class="msPercent">' + perc + '%</span> </li> <li class="milestoneList"> <div class="msName">' + milestone.milestone + '</div> <div class="msVal"> <div> <span class="label">Cost Type:</span> <span class= "percentageValue10 label"  data-d-group= "2" data-m-dec=""> ' + milestone.cost_type + '</span> </div> <div> <span class="label">Due Date:</span> <span class= "service10 label"  data-d-group="2" data-m-dec=""> ' + milestone.milestone_date + '</span> </div> <div> Total Amount: <span class="total10" data-d-group="2" data-m-dec=""><span class="icon-rupee-icn"></span> ' + amount + '</span> </div> </div><span class="barBg" style="width:' + perc + '%"></span> </li> <div class="clearfix"></div>';
          });
        }
        html += '</ul> </div>';
        $('.images').html(html);
        $('.booking').addClass('current');
        $('.master').removeClass('current');
        $('.gallery').removeClass('current');
        $('.threeD').removeClass('current');
        $('.twoD').removeClass('current');
        return $('.external').removeClass('current');
      },
      'mouseover .next,.prev': function(e) {
        var html, id, response, unitColl, unitModel;
        id = parseInt($(e.target).attr('data-id'));
        unitModel = unitCollection.findWhere({
          'id': id
        });
        response = window.unit.getUnitDetails(id);
        unitColl = CommonFloor.getUnitsProperty(unitModel);
        html = '<div class="svg-info"> <i class="' + unitColl[2] + '-ico"></i> <h5 class=" m-t-0">' + unitModel.get('unit_name') + '</h5> <div class="details"> <span>' + response[1].get('name') + '</span></br> <div class="text-primary"><span class="text-primary facts-icon icon-rupee-icn"></span>' + window.numDifferentiation(response[3]) + '</div> <!--<div>Area: <span>' + response[0].get('super_built_up_area') + ' ' + project.get('measurement_units') + '</span></div> <div>Variant: <span>' + response[0].get('unit_variant_name') + '</span></div>--> </div> </div>';
        return $(e.target).tooltipster('content', html);
      },
      'click .next,.prev': function(e) {
        var id, unitModel;
        id = parseInt($(e.target).attr('data-id'));
        unitModel = unitCollection.findWhere({
          'id': id
        });
        CommonFloor.navigate('/unit-view/' + id, true);
        return CommonFloor.router.storeRoute();
      }
    };

    CenterUnitView.prototype.onShow = function() {
      var building, flag, height, html, id, response, unit, url;
      flag = 0;
      this.getNextPrevUnit();
      response = this.generateLevels();
      html = '';
      $.each(response[0], function(index, value) {
        flag = 1;
        return html += '<div class="layouts animated fadeIn"> <a class="fancybox" href="' + value + '"> <img class="img" data-src="' + value + '" /> <div class="img-overlay"></div> <span>' + s.replaceAll(response[2][index], "_", " ") + '</span> </a> </div>';
      });
      $('.twoD').addClass('current');
      $('.threeD').removeClass('current');
      $('.external').removeClass('current');
      $('.gallery').removeClass('current');
      if (response[0].length === 0) {
        flag = 1;
        $.each(response[1], function(index, value) {
          return html += '<img data-src="' + value + '" /><span>' + s.replaceAll(response[2][index], "_", " ") + '</span>';
        });
        $('.threeD').addClass('current');
        $('.external').removeClass('current');
        $('.twoD').removeClass('current');
        $('.gallery').removeClass('current');
      }
      $('.images').html(html);
      $('.level').attr('class', 'level Level_0 ' + _.last(response[2]));
      if (response[4] === 'apartment') {
        $('.level').attr('class', 'level Level_0 apartment_level');
      }
      if (!_.isUndefined(response[3].get('external3durl'))) {
        flag = 1;
        html = '<div class="external-wrapper"> <div id="rotate_loader" class="img-loader"> <div class="square" ></div> <div class="square"></div> <div class="square last"></div> <div class="square clear"></div> <div class="square"></div> <div class="square last"></div> <div class="square clear"></div> <div class="square "></div> <div class="square last"></div> </div> <div class="animated fadeIn hidden external-container"> <img class=" img-responsive external-img"  src="' + response[3].get('external3durl') + '" /> </div> </div>';
        $('.images').html(html);
        $('.external').addClass('current');
        $('.threeD').removeClass('current');
        $('.twoD').removeClass('current');
        $('.gallery').removeClass('current');
      }
      if (response[0].length === 0) {
        $('.twoD').hide();
      }
      if (response[1].length === 0) {
        $('.threeD').hide();
      }
      if (_.isUndefined(response[3].get('external3durl'))) {
        $('.external').hide();
      }
      if (_.isUndefined(response[3].get('galleryurl'))) {
        $('.gallery').hide();
      }
      url = Backbone.history.fragment;
      id = url.split('/')[1];
      unit = unitCollection.findWhere({
        'id': parseInt(id)
      });
      building = buildingCollection.findWhere({
        'id': parseInt(unit.get('building_id'))
      });
      if (project.get('project_master').length !== 0 || building.get('building_master').length !== 0) {
        $('.master').removeClass('hidden');
      }
      if (response[0].length === 0 && response[1].length === 0 && _.isUndefined(response[3].get('external3durl'))) {
        $('.gallery').addClass('current');
        $('.threeD').removeClass('current');
        $('.twoD').removeClass('current');
        $('.external').removeClass('current');
        flag = 1;
        if (!_.isUndefined(response[3].get('galleryurl'))) {
          $.each(response[3].get('galleryurl'), function(index, value) {
            return html += '<div class="animated fadeIn"><img class="img" data-src="' + value + '" /></div>';
          });
        }
      }
      if (response[0].length === 0 && response[1].length === 0 && _.isUndefined(response[3].get('external3durl')) && _.isUndefined(response[3].get('galleryurl'))) {
        this.loadMaster();
        flag = 1;
        $('.master').addClass('current');
        $('.gallery').removeClass('current');
        $('.threeD').removeClass('current');
        $('.twoD').removeClass('current');
        $('.external').removeClass('current');
      }
      height = this.ui.imagesContainer.height();
      if ($(window).width() > 991) {
        $('.unit-details').mCustomScrollbar({
          theme: 'cf-scroll'
        });
      }
      $('.images').html(html);
      $('.external-img').load(function() {
        $('#rotate_loader').addClass('hidden');
        return $('.external-container').removeClass('hidden');
      });
      if (flag === 0) {
        console.log("add Booking markup");
        html = '<div class="invoice-items animated fadeIn"> <div class="row"> <div class="col-sm-5 form-inline m-b-20"> <h5 class="inline-block">Payment Plan: </h5><select class="form-control" id="paymentplans"> <option value="3363"> Payment Plan </option> <option value="3364"> Price Breakdown </option> </select> </div> <div class="col-sm-7 text-right"> <h5 class="inline-block">Booking Amount: </h5> <h4 class="inline-block bold text-primary"><span class="rec" data-d-group="2" data-m-dec=""><span class="icon-rupee-icn"></span> 3,53,952</span></h4> </div> </div> <ul id="paymentTable"> <li style="list-style: none"><span class="msPercent">4.5%</span></li> <li class="milestoneList milestoneReached"> <div class="msName"> Application </div> <div class="msVal discCol"> <div> <span class="label">Amount:</span> <span class= "percentageValue0 label"  data-d-group="2" data-m-dec=""><span class="icon-rupee-icn"></span> 3,43,343</span> </div> <div> <span class="label">Service Tax:</span> <span class= "service0 label"  data-d-group="2" data-m-dec=""><span class="icon-rupee-icn"></span> 10,609</span> </div> <div> Total: <span class="total0"  data-d-group= "2" data-m-dec=""><span class="icon-rupee-icn"></span> 3,53,952</span> </div> </div> <div class="msVal"> <div> <span class="label">Amount:</span> <span class= "percentageValue10 label"  data-d-group= "2" data-m-dec=""><span class="icon-rupee-icn"></span> 3,43,343</span> </div> <div> <span class="label">Service Tax:</span> <span class= "service10 label"  data-d-group="2" data-m-dec=""><span class="icon-rupee-icn"></span> 10,609</span> </div> <div> Total: <span class="total10" data-d-group="2" data-m-dec=""><span class="icon-rupee-icn"></span> 3,53,952</span> </div> </div><span class="barBg" style="width:4.5%"></span> </li> <li style="list-style: none; display: inline"> <div class="clearfix"></div><span class="msPercent">26%</span> </li> <li class="milestoneList"> <div class="msName"> Plinth </div> <div class="msVal discCol"> <div> <span class="label">Amount:</span> <span class= "percentageValue1 label"  data-d-group="2" data-m-dec=""><span class="icon-rupee-icn"></span> 19,83,761</span> </div> <div> <span class="label">Service Tax:</span> <span class= "service1 label"  data-d-group="2" data-m-dec=""><span class="icon-rupee-icn"></span> 61,298</span> </div> <div> Total: <span class="total1"  data-d-group= "2" data-m-dec=""><span class="icon-rupee-icn"></span> 20,45,059</span> </div> </div> <div class="msVal"> <div> <span class="label">Amount:</span> <span class= "percentageValue11 label"  data-d-group= "2" data-m-dec=""><span class="icon-rupee-icn"></span> 19,83,761</span> </div> <div> <span class="label">Service Tax:</span> <span class= "service11 label"  data-d-group="2" data-m-dec=""><span class="icon-rupee-icn"></span> 61,298</span> </div> <div> Total: <span class="total11" data-d-group="2" data-m-dec=""><span class="icon-rupee-icn"></span> 20,45,059</span> </div> </div><span class="barBg" style="width:26%"></span> </li> <li style="list-style: none; display: inline"> <div class="clearfix"></div><span class="msPercent">11%</span> </li> <li class="milestoneList"> <div class="msName"> 1st Slab </div> <div class="msVal discCol"> <div> <span class="label">Amount:</span> <span class= "percentageValue2 label"  data-d-group="2" data-m-dec=""><span class="icon-rupee-icn"></span> 8,39,284</span> </div> <div> <span class="label">Service Tax:</span> <span class= "service2 label"  data-d-group="2" data-m-dec=""><span class="icon-rupee-icn"></span> 25,934</span> </div> <div> Total: <span class="total2"  data-d-group= "2" data-m-dec=""><span class="icon-rupee-icn"></span> 8,65,218</span> </div> </div> <div class="msVal"> <div> <span class="label">Amount:</span> <span class= "percentageValue12 label"  data-d-group= "2" data-m-dec=""><span class="icon-rupee-icn"></span> 8,39,284</span> </div> <div> <span class="label">Service Tax:</span> <span class= "service12 label"  data-d-group="2" data-m-dec=""><span class="icon-rupee-icn"></span> 25,934</span> </div> <div> Total: <span class="total12" data-d-group="2" data-m-dec=""><span class="icon-rupee-icn"></span> 8,65,218</span> </div> </div><span class="barBg" style="width:11%"></span> </li> <li style="list-style: none; display: inline"> <div class="clearfix"></div><span class="msPercent">11%</span> </li> <li class="milestoneList"> <div class="msName"> 3rd Slab </div> <div class="msVal discCol"> <div> <span class="label">Amount:</span> <span class= "percentageValue3 label"  data-d-group="2" data-m-dec=""><span class="icon-rupee-icn"></span> 8,39,284</span> </div> <div> <span class="label">Service Tax:</span> <span class= "service3 label"  data-d-group="2" data-m-dec=""><span class="icon-rupee-icn"></span> 25,934</span> </div> <div> Total: <span class="total3"  data-d-group= "2" data-m-dec=""><span class="icon-rupee-icn"></span> 8,65,218</span> </div> </div> <div class="msVal"> <div> <span class="label">Amount:</span> <span class= "percentageValue13 label"  data-d-group= "2" data-m-dec=""><span class="icon-rupee-icn"></span> 8,39,284</span> </div> <div> <span class="label">Service Tax:</span> <span class= "service13 label"  data-d-group="2" data-m-dec=""><span class="icon-rupee-icn"></span> 25,934</span> </div> <div> Total: <span class="total13" data-d-group="2" data-m-dec=""><span class="icon-rupee-icn"></span> 8,65,218</span> </div> </div><span class="barBg" style="width:11%"></span> </li> <li style="list-style: none; display: inline"> <div class="clearfix"></div><span class="msPercent">11%</span> </li> <li class="milestoneList"> <div class="msName"> 5th Slab </div> <div class="msVal discCol"> <div> <span class="label">Amount:</span> <span class= "percentageValue4 label"  data-d-group="2" data-m-dec=""><span class="icon-rupee-icn"></span> 8,39,284</span> </div> <div> <span class="label">Service Tax:</span> <span class= "service4 label"  data-d-group="2" data-m-dec=""><span class="icon-rupee-icn"></span> 25,934</span> </div> <div> Total: <span class="total4"  data-d-group= "2" data-m-dec=""><span class="icon-rupee-icn"></span> 8,65,218</span> </div> </div> <div class="msVal"> <div> <span class="label">Amount:</span> <span class= "percentageValue14 label"  data-d-group= "2" data-m-dec=""><span class="icon-rupee-icn"></span> 8,39,284</span> </div> <div> <span class="label">Service Tax:</span> <span class= "service14 label"  data-d-group="2" data-m-dec=""><span class="icon-rupee-icn"></span> 25,934</span> </div> <div> Total: <span class="total14" data-d-group="2" data-m-dec=""><span class="icon-rupee-icn"></span> 8,65,218</span> </div> </div><span class="barBg" style="width:11%"></span> </li> <li style="list-style: none; display: inline"> <div class="clearfix"></div><span class="msPercent">11%</span> </li> <li class="milestoneList"> <div class="msName"> 7th Slab </div> <div class="msVal discCol"> <div> <span class="label">Amount:</span> <span class= "percentageValue5 label"  data-d-group="2" data-m-dec=""><span class="icon-rupee-icn"></span> 8,39,284</span> </div> <div> <span class="label">Service Tax:</span> <span class= "service5 label"  data-d-group="2" data-m-dec=""><span class="icon-rupee-icn"></span> 25,934</span> </div> <div> Total: <span class="total5"  data-d-group= "2" data-m-dec=""><span class="icon-rupee-icn"></span> 8,65,218</span> </div> </div> <div class="msVal"> <div> <span class="label">Amount:</span> <span class= "percentageValue15 label"  data-d-group= "2" data-m-dec=""><span class="icon-rupee-icn"></span> 8,39,284</span> </div> <div> <span class="label">Service Tax:</span> <span class= "service15 label"  data-d-group="2" data-m-dec=""><span class="icon-rupee-icn"></span> 25,934</span> </div> <div> Total: <span class="total15" data-d-group="2" data-m-dec=""><span class="icon-rupee-icn"></span> 8,65,218</span> </div> </div><span class="barBg" style="width:11%"></span> </li> <li style="list-style: none; display: inline"> <div class="clearfix"></div><span class="msPercent">10.5%</span> </li> <li class="milestoneList"> <div class="msName"> 9th Slab </div> <div class="msVal discCol"> <div> <span class="label">Amount:</span> <span class= "percentageValue6 label"  data-d-group="2" data-m-dec=""><span class="icon-rupee-icn"></span> 8,01,134</span> </div> <div> <span class="label">Service Tax:</span> <span class= "service6 label"  data-d-group="2" data-m-dec=""><span class="icon-rupee-icn"></span> 24,755</span> </div> <div> Total: <span class="total6"  data-d-group= "2" data-m-dec=""><span class="icon-rupee-icn"></span> 8,25,889</span> </div> </div> <div class="msVal"> <div> <span class="label">Amount:</span> <span class= "percentageValue16 label"  data-d-group= "2" data-m-dec=""><span class="icon-rupee-icn"></span> 8,01,134</span> </div> <div> <span class="label">Service Tax:</span> <span class= "service16 label"  data-d-group="2" data-m-dec=""><span class="icon-rupee-icn"></span> 24,755</span> </div> <div> Total: <span class="total16" data-d-group="2" data-m-dec=""><span class="icon-rupee-icn"></span> 8,25,889</span> </div> </div><span class="barBg" style="width:10.5%"></span> </li> <li style="list-style: none; display: inline"> <div class="clearfix"></div><span class="msPercent">5%</span> </li> <li class="milestoneList"> <div class="msName"> Brick Work </div> <div class="msVal discCol"> <div> <span class="label">Amount:</span> <span class= "percentageValue7 label"  data-d-group="2" data-m-dec=""><span class="icon-rupee-icn"></span> 3,81,493</span> </div> <div> <span class="label">Service Tax:</span> <span class= "service7 label"  data-d-group="2" data-m-dec=""><span class="icon-rupee-icn"></span> 11,788</span> </div> <div> Total: <span class="total7"  data-d-group= "2" data-m-dec=""><span class="icon-rupee-icn"></span> 3,93,281</span> </div> </div> <div class="msVal"> <div> <span class="label">Amount:</span> <span class= "percentageValue17 label"  data-d-group= "2" data-m-dec=""><span class="icon-rupee-icn"></span> 3,81,493</span> </div> <div> <span class="label">Service Tax:</span> <span class= "service17 label"  data-d-group="2" data-m-dec=""><span class="icon-rupee-icn"></span> 11,788</span> </div> <div> Total: <span class="total17" data-d-group="2" data-m-dec=""><span class="icon-rupee-icn"></span> 3,93,281</span> </div> </div><span class="barBg" style="width:5%"></span> </li> <li style="list-style: none; display: inline"> <div class="clearfix"></div><span class="msPercent">5%</span> </li> <li class="milestoneList"> <div class="msName"> Flooring </div> <div class="msVal discCol"> <div> <span class="label">Amount:</span> <span class= "percentageValue8 label"  data-d-group="2" data-m-dec=""><span class="icon-rupee-icn"></span> 3,81,493</span> </div> <div> <span class="label">Service Tax:</span> <span class= "service8 label"  data-d-group="2" data-m-dec=""><span class="icon-rupee-icn"></span> 11,788</span> </div> <div> Total: <span class="total8"  data-d-group= "2" data-m-dec=""><span class="icon-rupee-icn"></span> 3,93,281</span> </div> </div> <div class="msVal"> <div> <span class="label">Amount:</span> <span class= "percentageValue18 label"  data-d-group= "2" data-m-dec=""><span class="icon-rupee-icn"></span> 3,81,493</span> </div> <div> <span class="label">Service Tax:</span> <span class= "service18 label"  data-d-group="2" data-m-dec=""><span class="icon-rupee-icn"></span> 11,788</span> </div> <div> Total: <span class="total18" data-d-group="2" data-m-dec=""><span class="icon-rupee-icn"></span> 3,93,281</span> </div> </div><span class="barBg" style="width:5%"></span> </li> <li style="list-style: none; display: inline"> <div class="clearfix"></div><span class="msPercent">5%</span> </li> <li class="milestoneList"> <div class="msName"> Possession </div> <div class="msVal discCol"> <div> <span class="label">Amount:</span> <span class= "percentageValue9 label"  data-d-group="2" data-m-dec=""><span class="icon-rupee-icn"></span> 3,81,493</span> </div> <div> <span class="label">Service Tax:</span> <span class= "service9 label"  data-d-group="2" data-m-dec=""><span class="icon-rupee-icn"></span> 11,788</span> </div> <div> Total: <span class="total9"  data-d-group= "2" data-m-dec=""><span class="icon-rupee-icn"></span> 3,93,281</span> </div> </div> <div class="msVal"> <div> <span class="label">Amount:</span> <span class= "percentageValue19 label"  data-d-group= "2" data-m-dec=""><span class="icon-rupee-icn"></span> 3,81,493</span> </div> <div> <span class="label">Service Tax:</span> <span class= "service19 label"  data-d-group="2" data-m-dec=""><span class="icon-rupee-icn"></span> 11,788</span> </div> <div> Total: <span class="total19" data-d-group="2" data-m-dec=""><span class="icon-rupee-icn"></span> 3,93,281</span> </div> </div><span class="barBg" style="width:5%"></span> </li> <li style="list-style: none; display: inline"> <div class="clearfix"></div> </li> </ul> </div>';
      }
      $(".fancybox").fancybox();
      $('.img').lazyLoadXT({
        updateEvent: 'load',
        oncomplete: function() {
          $('.img').removeClass("lazy-hidden");
          return $('.img').addClass("lazy-loaded");
        }
      });
      return this.iniTooltip();
    };

    CenterUnitView.prototype.loadMaster = function() {
      var breakpoint, breakpoints, building, first, id, response, svgs, transitionImages, unit, url;
      $('.master').removeClass('hidden');
      url = Backbone.history.fragment;
      id = url.split('/')[1];
      unit = unitCollection.findWhere({
        'id': parseInt(id)
      });
      breakpoint = unit.get('breakpoint');
      response = window.unit.getUnitDetails(id);
      building = buildingCollection.findWhere({
        'id': parseInt(unit.get('building_id'))
      });
      if (response[2] === 'apartment' || response[2] === 'Penthouse') {
        transitionImages = [];
        svgs = {};
        breakpoints = building.get('breakpoints');
        $.each(breakpoints, function(index, value) {
          return svgs[value] = BASEURL + '/projects/' + PROJECTID + '/buildings/' + unit.get('building_id') + '/master-' + value + '.svg';
        });
        $.merge(transitionImages, building.get('building_master'));
        first = BASEURL + '/projects/' + PROJECTID + '/buildings/' + unit.get('building_id') + '/master-' + breakpoint + '.svg';
        if (building.get('building_master').length !== 0) {
          $('.firstimage').attr('src', transitionImages[breakpoint]);
          $('.firstimage').load(function() {
            return $('.images').load(first, function() {
              $('.unassign').attr('style', "opacity: 0;fill-opacity: 0;");
              $('.apartment,.amenity').each(function(ind, item) {
                var itemid;
                itemid = parseInt(item.id);
                return $('#' + itemid).attr('class', "no-fill");
              });
              return $('#' + id).attr('class', 'layer svg_active');
            });
          });
        }
        if (building.get('building_master').length === 0) {
          $('.master').hide();
        }
        return;
      }
      svgs = [];
      breakpoints = project.get('breakpoints');
      $.each(breakpoints, function(index, value) {
        return svgs[value] = BASEURL + '/projects/' + PROJECTID + '/master/master-' + value + '.svg';
      });
      first = BASEURL + '/projects/' + PROJECTID + '/master/master-' + breakpoint + '.svg';
      transitionImages = [];
      $.merge(transitionImages, project.get('project_master'));
      if (project.get('project_master').length !== 0) {
        $('.firstimage').attr('src', transitionImages[breakpoint]);
        $('.firstimage').load(function() {
          return $('.images').load(first, function() {
            $('.unassign').attr('style', "opacity: 0;fill-opacity: 0;");
            $('.villa,.plot,.building,.amenity').each(function(ind, item) {
              var itemid;
              itemid = parseInt(item.id);
              return $('#' + itemid).attr('class', "no-fill");
            });
            return $('#' + id).attr('class', 'layer svg_active');
          });
        });
      }
      if (project.get('project_master').length === 0) {
        return $('.master').hide();
      }
    };

    CenterUnitView.prototype.iniTooltip = function() {
      $('.next').tooltipster({
        theme: 'tooltipster-shadow circle-tooltip',
        contentAsHTML: true,
        onlyOne: true,
        arrow: false,
        interactive: true,
        trigger: 'hover',
        position: 'left',
        delay: 50
      });
      return $('.prev').tooltipster({
        theme: 'tooltipster-shadow circle-tooltip',
        contentAsHTML: true,
        onlyOne: true,
        arrow: false,
        interactive: true,
        trigger: 'hover',
        position: 'right',
        delay: 50
      });
    };

    CenterUnitView.prototype.generateLevels = function() {
      var floor, i, level, response, threeD, twoD, unitD, unitid, url;
      url = Backbone.history.fragment;
      unitid = parseInt(url.split('/')[1]);
      response = window.unit.getUnitDetails(unitid);
      twoD = [];
      threeD = [];
      level = [];
      floor = response[0].get('floor');
      i = 0;
      unitD = unitCollection.findWhere({
        id: unitid
      });
      $.each(floor, function(index, value) {
        var level_name;
        if (!_.isUndefined(value.url2dlayout_image) && value.url2dlayout_image !== "") {
          twoD.push(value.url2dlayout_image);
        }
        if (!_.isUndefined(value.url3dlayout_image) && value.url3dlayout_image !== "") {
          threeD.push(value.url3dlayout_image);
        }
        level_name = 'Level  ' + index;
        if (response[2] === 'apartment') {
          level.push("");
        } else {
          level.push(s.replaceAll('Level ' + i, " ", "_"));
        }
        return i = i + 1;
      });
      return [twoD, threeD, level, response[0], response[2]];
    };

    CenterUnitView.prototype.getNextPrevUnit = function() {
      var next, prev, unitModel, unitid, url;
      url = Backbone.history.fragment;
      unitid = parseInt(url.split('/')[1]);
      unitModel = unitCollection.findWhere({
        'id': unitid
      });
      CommonFloor.getUnitsProperty(unitModel);
      window.tempColl.setRecord(unitModel);
      next = tempColl.next();
      if (_.isUndefined(next)) {
        $('.next').hide();
      } else {
        $('.next').attr('data-id', next.get('id'));
      }
      prev = tempColl.prev();
      if (_.isUndefined(prev)) {
        return $('.prev').hide();
      } else {
        return $('.prev').attr('data-id', prev.get('id'));
      }
    };

    return CenterUnitView;

  })(Marionette.ItemView);

  CommonFloor.CenterUnitCtrl = (function(superClass) {
    extend(CenterUnitCtrl, superClass);

    function CenterUnitCtrl() {
      return CenterUnitCtrl.__super__.constructor.apply(this, arguments);
    }

    CenterUnitCtrl.prototype.initialize = function() {
      var unitPaymentPlan, unitPaymentPlanAjx, unitPriceSheet, unitPriceSheetAjx, unitid, url;
      url = Backbone.history.fragment;
      unitid = parseInt(url.split('/')[1]);
      unitPaymentPlan = {
        method: "GET",
        url: BASERESTURL + "/get-unit-payment-plan",
        data: {
          unit_id: unitid
        }
      };
      unitPriceSheet = {
        method: "GET",
        url: BASERESTURL + "/get-unit-price-sheet",
        data: {
          unit_id: unitid
        }
      };
      unitPriceSheetAjx = $.ajax(unitPriceSheet);
      unitPaymentPlanAjx = $.ajax(unitPaymentPlan);
      return $.when(unitPaymentPlanAjx, unitPriceSheetAjx).done((function(_this) {
        return function(paymentPlanResp, priceSheetResp) {
          var paymentPlan, priceSheet;
          paymentPlan = paymentPlanResp[0]['data'];
          priceSheet = priceSheetResp[0]['data'];
          if (!paymentPlan) {
            unitPaymentPlan = paymentPlanResp[0]['data'];
          } else {
            unitPaymentPlan = paymentPlanResp[0]['data'];
          }
          if (!priceSheet) {
            unitPriceSheet = priceSheetResp[0]['data'];
          } else {
            unitPriceSheet = priceSheetResp[0]['data'];
          }
          return _this.show(new CenterUnitView({
            unitPaymentPlan: unitPaymentPlan,
            unitPriceSheet: unitPriceSheet
          }));
        };
      })(this));
    };

    return CenterUnitCtrl;

  })(Marionette.RegionController);

}).call(this);

//# sourceMappingURL=../../frontend/unit-view/unit.controller.js.map
(function() {
  var LeftListView, TopListView,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  CommonFloor.ProjectListView = (function(superClass) {
    extend(ProjectListView, superClass);

    function ProjectListView() {
      return ProjectListView.__super__.constructor.apply(this, arguments);
    }

    ProjectListView.prototype.template = '#project-listview-template';

    return ProjectListView;

  })(Marionette.LayoutView);

  CommonFloor.ProjectListCtrl = (function(superClass) {
    extend(ProjectListCtrl, superClass);

    function ProjectListCtrl() {
      return ProjectListCtrl.__super__.constructor.apply(this, arguments);
    }

    ProjectListCtrl.prototype.initialize = function() {
      if (jQuery.isEmptyObject(project.toJSON())) {
        project.setProjectAttributes(PROJECTID);
        CommonFloor.loadJSONData();
      }
      if (bunglowVariantMasterCollection.length === 0 && apartmentVariantMasterCollection.length === 0 && plotVariantMasterCollection.length === 0) {
        return this.show(new CommonFloor.NothingFoundView);
      } else {
        return this.show(new CommonFloor.ProjectListView);
      }
    };

    return ProjectListCtrl;

  })(Marionette.RegionController);

  TopListView = (function(superClass) {
    extend(TopListView, superClass);

    function TopListView() {
      return TopListView.__super__.constructor.apply(this, arguments);
    }

    TopListView.prototype.template = Handlebars.compile('<div class="container-fluid"> <div class="row"> <div class="col-md-12 col-xs-12 col-sm-12 text-center"> <div class="breadcrumb-bar"> <a class="unit_back" href="#"> </a> </div> <div class="header-info"> <h2 class="proj-name pull-left">{{project_title}}</h2> <div class="proj-type-count"> {{#types}} <p class="pull-right">{{type}}</p><h2 class=" pull-right m-t-10">{{count.length}}</h2> {{/types}} </div> <div class="clearfix"></div> </div> </div> </div> </div> <div class="pull-left filter-result full"> <ul  id="flexiselDemo1"> {{#area}} <li> <div class="filter-pill"> {{name}} {{type}} <span class="icon-cross " id="{{id_name}}" data-id="{{id}}" data-type="{{typename}}"></span> </div> </li> {{/area}} {{#budget}} <li> <div class="filter-pill">  <span class="icon-rupee-icn"></span>{{name}} {{type}}</span> <span class="icon-cross " id="{{id_name}}" data-id="{{id}}" data-type="{{typename}}"></span> </div> </li> {{/budget}} {{#views}} <li> <div class="filter-pill"> {{name}}  <span class="icon-cross {{classname}}" id="{{id_name}}" data-id="{{id}}" ></span> </div> </li> {{/views}} {{#facings}} <li> <div class="filter-pill"> {{name}} <span class="icon-cross {{classname}}" id="{{id_name}}" data-id="{{id}}" ></span> </div> </li> {{/facings}} {{#status}} <li> <div class="filter-pill"> {{name}} {{type}} <span class="icon-cross" id="{{id_name}}" data-id="{{id}}" data-type="{{typename}}"></span> </div> </li> {{/status}} {{#each  filters}} <li> <div class="filter-title"> {{name}}  <span class="icon-cross {{classname}}" id="{{id_name}}" data-id="{{id}}" data-index="{{index}}"></span> </div> </li> {{#filters}} {{#each this}} {{#each this}} <li> <div class="filter-pill"> {{name}} <span class="icon-cross {{classname}}" id="{{id_name}}" data-id="{{id}}" data-index="{{index}}" data-type="{{typename}}"></span> </div> </li>{{/each}} {{/each}} {{/filters}} {{/each}} </ul> </div> <div class="clearfix"></div>');

    TopListView.prototype.ui = {
      unitBack: '.unit_back',
      unitTypes: '.unit_types',
      priceMin: '.price_min',
      priceMax: '.price_max',
      status: '#filter_available',
      apply: '.apply',
      variantNames: '.variant_names',
      area: '#filter_area',
      budget: '#filter_budget',
      types: '.types',
      filter_flooring: '.filter_flooring',
      views: '.views',
      facings: '.facings'
    };

    TopListView.prototype.serializeData = function() {
      var data, main, response, status;
      data = TopListView.__super__.serializeData.call(this);
      status = CommonFloor.getStatusFilters();
      if (status.length !== 0) {
        data.status = status;
      }
      main = CommonFloor.getFilters();
      data.filters = main[0].filters;
      data.area = main[0].area;
      data.budget = main[0].price;
      data.status = main[0].status;
      data.views = main[0].views;
      data.facings = main[0].facings;
      response = CommonFloor.propertyTypes();
      data.types = response;
      return data;
    };

    TopListView.prototype.events = function() {
      return {
        'click @ui.unitBack': function(e) {
          e.preventDefault();
          unitCollection.reset(unitMasterCollection.toArray());
          CommonFloor.resetCollections();
          CommonFloor.filterNew();
          unitCollection.trigger('available');
          return CommonFloor.navigate('/', true);
        },
        'click @ui.types': function(e) {
          var arr, index;
          arr = CommonFloor.defaults['type'].split(',');
          index = arr.indexOf($(e.target).attr('data-id'));
          arr.splice(index, 1);
          CommonFloor.defaults['type'] = arr.join(',');
          if ($(e.target).attr('data-id') === 'villa') {
            this.removeVillaFilters();
          }
          if ($(e.target).attr('data-id') === 'apartment') {
            this.removeAptFilters();
          }
          if ($(e.target).attr('data-id') === 'plot') {
            this.removePlotFilters();
          }
          this.trigger('render:view');
          unitCollection.reset(unitMasterCollection.toArray());
          CommonFloor.resetCollections();
          CommonFloor.filterNew();
          return unitCollection.trigger('available');
        },
        'click @ui.unitTypes': function(e) {
          var type, types;
          types = [];
          type = $(e.currentTarget).attr('data-type');
          if (CommonFloor.defaults[type]['unit_type_id'] !== "") {
            types = CommonFloor.defaults[type]['unit_type_id'].split(',');
            types = types.map(function(item) {
              return parseInt(item);
            });
          }
          types = _.without(types, parseInt($(e.currentTarget).attr('data-id')));
          CommonFloor.defaults[type]['unit_type_id'] = types.join(',');
          unitCollection.reset(unitMasterCollection.toArray());
          CommonFloor.resetCollections();
          CommonFloor.filterNew();
          unitCollection.trigger('available');
          return this.trigger('render:view');
        },
        'click @ui.variantNames': function(e) {
          var type, types;
          types = [];
          type = $(e.currentTarget).attr('data-type');
          if (CommonFloor.defaults[type]['unit_variant_id'] !== "") {
            types = CommonFloor.defaults[type]['unit_variant_id'].split(',');
            types = types.map(function(item) {
              return parseInt(item);
            });
          }
          types = _.without(types, parseInt($(e.currentTarget).attr('data-id')));
          CommonFloor.defaults[type]['unit_variant_id'] = types.join(',');
          unitCollection.reset(unitMasterCollection.toArray());
          CommonFloor.resetCollections();
          CommonFloor.filterNew();
          unitCollection.trigger('available');
          return this.trigger('render:view');
        },
        'click @ui.status': function(e) {
          CommonFloor.defaults['common']['availability'] = "";
          unitCollection.reset(unitMasterCollection.toArray());
          CommonFloor.filterNew();
          CommonFloor.resetCollections();
          unitCollection.trigger('available');
          return this.trigger('render:view');
        },
        'click @ui.area': function(e) {
          CommonFloor.defaults['common']['area_max'] = "";
          CommonFloor.defaults['common']['area_min'] = "";
          unitCollection.reset(unitMasterCollection.toArray());
          CommonFloor.resetCollections();
          CommonFloor.filterNew();
          unitCollection.trigger('available');
          return this.trigger('render:view');
        },
        'click @ui.budget': function(e) {
          CommonFloor.defaults['common']['price_max'] = "";
          CommonFloor.defaults['common']['price_min'] = "";
          unitCollection.reset(unitMasterCollection.toArray());
          CommonFloor.resetCollections();
          CommonFloor.filterNew();
          unitCollection.trigger('available');
          return this.trigger('render:view');
        },
        'click @ui.filter_flooring': function(e) {
          var index, type, types;
          types = [];
          type = $(e.currentTarget).attr('data-type');
          index = $(e.currentTarget).attr('data-index');
          if (CommonFloor.defaults[type]['attributes'][index] !== "") {
            types = CommonFloor.defaults[type]['attributes'][index].split(',');
          }
          console.log(types = _.without(types, $(e.currentTarget).attr('data-id')));
          CommonFloor.defaults[type]['attributes'][index] = types.join(',');
          unitCollection.reset(unitMasterCollection.toArray());
          CommonFloor.resetCollections();
          CommonFloor.filterNew();
          unitCollection.trigger('available');
          return this.trigger('render:view');
        },
        'click @ui.facings': function(e) {
          var types;
          types = CommonFloor.defaults['common']['facings'].split(',');
          types = _.without(types, $(e.currentTarget).attr('data-id'));
          CommonFloor.defaults['common']['facings'] = types.join(',');
          unitCollection.reset(unitMasterCollection.toArray());
          CommonFloor.resetCollections();
          CommonFloor.filterNew();
          unitCollection.trigger('available');
          return this.trigger('render:view');
        },
        'click @ui.views': function(e) {
          var types;
          types = CommonFloor.defaults['common']['views'].split(',');
          types = _.without(types, $(e.currentTarget).attr('data-id'));
          CommonFloor.defaults['common']['views'] = types.join(',');
          unitCollection.reset(unitMasterCollection.toArray());
          CommonFloor.resetCollections();
          CommonFloor.filterNew();
          unitCollection.trigger('available');
          return this.trigger('render:view');
        }
      };
    };

    TopListView.prototype.onShow = function() {
      var response;
      $("#flexiselDemo1").flexisel({
        visibleItems: 11,
        animationSpeed: 200,
        autoPlay: false,
        autoPlaySpeed: 1000,
        clone: false,
        enableResponsiveBreakpoints: true,
        responsiveBreakpoints: {
          portrait: {
            changePoint: 480,
            visibleItems: 5
          },
          landscape: {
            changePoint: 640,
            visibleItems: 6
          },
          tablet: {
            changePoint: 768,
            visibleItems: 3
          }
        }
      });
      response = CommonFloor.propertyTypes();
      if (response.length === 0) {
        return $('.proj-type-count').html('<p class="p-l-15">No results found</p>');
      }
    };

    TopListView.prototype.removeVillaFilters = function() {
      var unitTypes, unitTypesArr, unitVariants, unitVariantsArr, unitsArr, unittypes, variants;
      variants = [];
      unittypes = [];
      unitsArr = bunglowVariantCollection.getBunglowMasterUnits();
      $.each(unitsArr, function(index, value) {
        var unitDetails;
        unitDetails = window.unit.getUnitDetails(value.id);
        variants.push(parseInt(unitDetails[0].get('id')));
        return unittypes.push(parseInt(unitDetails[1].get('id')));
      });
      unitTypes = CommonFloor.defaults['villa']['unit_type_id'].split(',');
      unitTypesArr = unitTypes.map(function(item) {
        return parseInt(item);
      });
      $.each(unittypes, function(index, value) {
        if ($.inArray(parseInt(value), unitTypesArr) > -1) {
          return unitTypes = _.without(unitTypesArr, parseInt(value));
        }
      });
      CommonFloor.defaults['villa']['unit_type_id'] = unitTypes.join(',');
      unitVariants = CommonFloor.defaults['villa']['unit_variant_id'].split(',');
      unitVariantsArr = unitVariants.map(function(item) {
        return parseInt(item);
      });
      $.each(variants, function(index, value) {
        if ($.inArray(parseInt(value), unitVariantsArr) > -1) {
          return unitVariants = _.without(unitVariantsArr, parseInt(value));
        }
      });
      return CommonFloor.defaults['villa']['unit_variant_id'] = unitVariants.join(',');
    };

    TopListView.prototype.removeAptFilters = function() {
      var unitTypes, unitTypesArr, unitVariants, unitVariantsArr, unitsArr, unittypes, variants;
      variants = [];
      unittypes = [];
      unitsArr = apartmentVariantCollection.getApartmentMasterUnits();
      $.each(unitsArr, function(index, value) {
        var unitDetails;
        unitDetails = window.unit.getUnitDetails(value.id);
        variants.push(parseInt(unitDetails[0].get('id')));
        return unittypes.push(parseInt(unitDetails[1].get('id')));
      });
      unitTypes = CommonFloor.defaults['villa']['unit_type_id'].split(',');
      unitTypesArr = unitTypes.map(function(item) {
        return parseInt(item);
      });
      $.each(unittypes, function(index, value) {
        if ($.inArray(parseInt(value), unitTypesArr) > -1) {
          return unitTypes = _.without(unitTypesArr, parseInt(value));
        }
      });
      CommonFloor.defaults['villa']['unit_type_id'] = unitTypes.join(',');
      unitVariants = CommonFloor.defaults['villa']['unit_variant_id'].split(',');
      unitVariantsArr = unitVariants.map(function(item) {
        return parseInt(item);
      });
      $.each(variants, function(index, value) {
        if ($.inArray(parseInt(value), unitVariantsArr) > -1) {
          return unitVariants = _.without(unitVariantsArr, parseInt(value));
        }
      });
      return CommonFloor.defaults['villa']['unit_variant_id'] = unitVariants.join(',');
    };

    TopListView.prototype.removePlotFilters = function() {
      var unitTypes, unitTypesArr, unitVariants, unitVariantsArr, unitsArr, unittypes, variants;
      variants = [];
      unittypes = [];
      unitsArr = plotVariantCollection.getPlotMasterUnits();
      $.each(unitsArr, function(index, value) {
        var unitDetails;
        unitDetails = window.unit.getUnitDetails(value.id);
        variants.push(parseInt(unitDetails[0].get('id')));
        return unittypes.push(parseInt(unitDetails[1].get('id')));
      });
      unitTypes = CommonFloor.defaults['villa']['unit_type_id'].split(',');
      unitTypesArr = unitTypes.map(function(item) {
        return parseInt(item);
      });
      $.each(unittypes, function(index, value) {
        if ($.inArray(parseInt(value), unitTypesArr) > -1) {
          return unitTypes = _.without(unitTypesArr, parseInt(value));
        }
      });
      CommonFloor.defaults['villa']['unit_type_id'] = unitTypes.join(',');
      unitVariants = CommonFloor.defaults['villa']['unit_variant_id'].split(',');
      unitVariantsArr = unitVariants.map(function(item) {
        return parseInt(item);
      });
      $.each(variants, function(index, value) {
        if ($.inArray(parseInt(value), unitVariantsArr) > -1) {
          return unitVariants = _.without(unitVariantsArr, parseInt(value));
        }
      });
      return CommonFloor.defaults['villa']['unit_variant_id'] = unitVariants.join(',');
    };

    return TopListView;

  })(Marionette.ItemView);

  CommonFloor.TopListCtrl = (function(superClass) {
    extend(TopListCtrl, superClass);

    function TopListCtrl() {
      return TopListCtrl.__super__.constructor.apply(this, arguments);
    }

    TopListCtrl.prototype.initialize = function() {
      this.renderTopListView();
      return unitCollection.bind("available", this.renderTopListView, this);
    };

    TopListCtrl.prototype.renderTopListView = function() {
      this.view = new TopListView({
        model: project
      });
      this.listenTo(this.view, "render:view", this.loadController);
      return this.show(this.view);
    };

    TopListCtrl.prototype.loadController = function() {
      window.unitTypes = [];
      window.unitVariants = [];
      window.variantNames = [];
      window.price = '';
      window.area = '';
      window.type = [];
      this.region = new Marionette.Region({
        el: '#filterregion'
      });
      return new CommonFloor.FilterMasterCtrl({
        region: this.region
      });
    };

    return TopListCtrl;

  })(Marionette.RegionController);

  LeftListView = (function(superClass) {
    extend(LeftListView, superClass);

    function LeftListView() {
      return LeftListView.__super__.constructor.apply(this, arguments);
    }

    LeftListView.prototype.template = Handlebars.compile('<div class="col-md-3 col-xs-12 col-sm-12 search-left-content filters"><div>');

    LeftListView.prototype.onShow = function() {
      return $('.filters').hide();
    };

    return LeftListView;

  })(Marionette.ItemView);

  CommonFloor.LeftListCtrl = (function(superClass) {
    extend(LeftListCtrl, superClass);

    function LeftListCtrl() {
      return LeftListCtrl.__super__.constructor.apply(this, arguments);
    }

    LeftListCtrl.prototype.initialize = function() {
      return this.show(new LeftListView);
    };

    return LeftListCtrl;

  })(Marionette.RegionController);

  CommonFloor.CenterListCtrl = (function(superClass) {
    extend(CenterListCtrl, superClass);

    function CenterListCtrl() {
      return CenterListCtrl.__super__.constructor.apply(this, arguments);
    }

    CenterListCtrl.prototype.initialize = function() {
      this.renderCenterListView();
      return unitCollection.bind("available", this.renderCenterListView, this);
    };

    CenterListCtrl.prototype.renderCenterListView = function() {
      var data, region, response, units;
      response = CommonFloor.checkListView();
      if (response.count.length === 0) {
        region = new Marionette.Region({
          el: '#centerregion'
        });
        new CommonFloor.NoUnitsCtrl({
          region: region
        });
        return;
      }
      if (response.type === 'bunglows') {
        units = bunglowVariantCollection.getBunglowUnits();
        data = {};
        data.units = units;
        data.type = 'villa';
        this.region = new Marionette.Region({
          el: '#centerregion'
        });
        new CommonFloor.VillaListCtrl({
          region: this.region
        });
      }
      if (response.type === 'building') {
        units = buildingCollection;
        data = {};
        data.units = units;
        data.type = 'building';
        this.region = new Marionette.Region({
          el: '#centerregion'
        });
        new CommonFloor.BuildingListCtrl({
          region: this.region
        });
      }
      if (response.type === 'plot') {
        units = plotVariantCollection.getPlotUnits();
        data = {};
        data.units = units;
        data.type = 'plot';
        this.region = new Marionette.Region({
          el: '#centerregion'
        });
        return new CommonFloor.PlotListCtrl({
          region: this.region
        });
      }
    };

    return CenterListCtrl;

  })(Marionette.RegionController);

}).call(this);

//# sourceMappingURL=../../frontend/project-list-view/project.list.controller.js.map
(function() {
  var BuildingEmptyView, BuildingItemView, BuildingListView,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  BuildingItemView = (function(superClass) {
    extend(BuildingItemView, superClass);

    function BuildingItemView() {
      return BuildingItemView.__super__.constructor.apply(this, arguments);
    }

    BuildingItemView.prototype.template = Handlebars.compile('<li class="bldg blocks {{status}} "> <div class="col-sm-2 col-xs-2"> <i class="building-ico m-t-15 "></i> </div> <div class="col-sm-10 col-xs-10"> <div class="info"> <h2 class="margin-none">{{building_name}} <label class="text-muted sm-text">({{floors}} Floors)</label></h2> </div> <div class="clearfix"></div> <div class="unit-type-info m-t-5"> <ul> {{#types}} <li> {{name}}: <span>{{units}}</span> </li> {{/types}} </ul> </div> <div class="clearfix"></div> <div class="m-t-5 text-primary {{classname}}">Starting from <span class="icon-rupee-icn"></span>{{price}}</div> </div> </li>');

    BuildingItemView.prototype.serializeData = function() {
      var cost, data, floors, id, response, types;
      data = BuildingItemView.__super__.serializeData.call(this);
      id = this.model.get('id');
      response = building.getUnitTypes(id);
      types = building.getUnitTypesCount(id, response);
      floors = this.model.get('no_of_floors');
      cost = building.getMinimumCost(id);
      data.classname = "";
      if (cost === 0) {
        data.classname = 'hidden';
      }
      data.price = window.numDifferentiation(cost);
      data.floors = this.model.get('no_of_floors');
      data.types = types;
      return data;
    };

    BuildingItemView.prototype.events = {
      'click .bldg': function(e) {
        var buildingModel, id, unit;
        id = this.model.get('id');
        unit = unitCollection.where({
          'building_id': id
        });
        if (unit.length === 0) {
          return;
        }
        buildingModel = buildingCollection.findWhere({
          'id': id
        });
        CommonFloor.filterBuilding(id);
        if (Object.keys(buildingModel.get('building_master')).length === 0) {
          return CommonFloor.navigate('/building/' + id + '/apartments', true);
        } else {
          return CommonFloor.navigate('/building/' + id + '/master-view', true);
        }
      }
    };

    return BuildingItemView;

  })(Marionette.ItemView);

  BuildingEmptyView = (function(superClass) {
    extend(BuildingEmptyView, superClass);

    function BuildingEmptyView() {
      return BuildingEmptyView.__super__.constructor.apply(this, arguments);
    }

    BuildingEmptyView.prototype.template = 'No units added';

    return BuildingEmptyView;

  })(Marionette.ItemView);

  BuildingListView = (function(superClass) {
    extend(BuildingListView, superClass);

    function BuildingListView() {
      return BuildingListView.__super__.constructor.apply(this, arguments);
    }

    BuildingListView.prototype.template = Handlebars.compile('<div class="col-md-12 us-right-content"> <div class="list-view-container animated fadeInDown"> <!--<div class="controls map-View"> <div class="toggle"> <a href="#/master-view" class="map">Map</a><a href="#/list-view" class="list active">List</a> </div> </div>--> <span class="pull-left top-legend"> <ul> <li class="na">N/A</li> </ul> </span> <h2 class="text-center">List of Buildings</h2> <hr class="margin-none"> <div class="text-center"> <ul class="prop-select"> <li class="prop-type buildings active">Buildings</li> <li class="prop-type Villas hidden">Villas</li> <li class="prop-type Plots hidden">Plots</li> </ul> </div> <div class="bldg-list"> <ul class="units"> </ul> <div class="clearfix"></div> </div> </div> </div>');

    BuildingListView.prototype.childView = BuildingItemView;

    BuildingListView.prototype.childViewContainer = '.units';

    BuildingListView.prototype.events = {
      'click .buildings': function(e) {
        var data, units;
        units = buildingCollection;
        data = {};
        data.units = units;
        data.type = 'building';
        this.region = new Marionette.Region({
          el: '#centerregion'
        });
        return new CommonFloor.BuildingListCtrl({
          region: this.region
        });
      },
      'click .Villas': function(e) {
        var data, units;
        units = bunglowVariantCollection.getBunglowUnits();
        data = {};
        data.units = units;
        data.type = 'villa';
        this.region = new Marionette.Region({
          el: '#centerregion'
        });
        return new CommonFloor.VillaListCtrl({
          region: this.region
        });
      },
      'click .Plots': function(e) {
        var data, units;
        units = plotVariantCollection.getPlotUnits();
        data = {};
        data.units = units;
        data.type = 'plot';
        this.region = new Marionette.Region({
          el: '#centerregion'
        });
        return new CommonFloor.PlotListCtrl({
          region: this.region
        });
      }
    };

    BuildingListView.prototype.onShow = function() {
      if (bunglowVariantCollection.length !== 0) {
        $('.Villas').removeClass('hidden');
      }
      if (plotVariantCollection.length !== 0) {
        return $('.Plots').removeClass('hidden');
      }
    };

    return BuildingListView;

  })(Marionette.CompositeView);

  CommonFloor.BuildingListCtrl = (function(superClass) {
    extend(BuildingListCtrl, superClass);

    function BuildingListCtrl() {
      this.loadController = bind(this.loadController, this);
      return BuildingListCtrl.__super__.constructor.apply(this, arguments);
    }

    BuildingListCtrl.prototype.initialize = function() {
      var view;
      this.view = view = new BuildingListView({
        collection: buildingCollection
      });
      this.listenTo(this.view, "load:units", this.loadController);
      return this.show(view);
    };

    BuildingListCtrl.prototype.loadController = function(data) {
      return Backbone.trigger("load:units", data);
    };

    return BuildingListCtrl;

  })(Marionette.RegionController);

}).call(this);

//# sourceMappingURL=../../frontend/project-list-view/building.list.controller.js.map
(function() {
  var VillaEmptyView, VillaItemView, VillaView,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  VillaItemView = (function(superClass) {
    extend(VillaItemView, superClass);

    function VillaItemView() {
      return VillaItemView.__super__.constructor.apply(this, arguments);
    }

    VillaItemView.prototype.template = Handlebars.compile('<li class="unit blocks {{status}}"> <div class="villa-ico pull-left icon m-t-10"></div> <div class="pull-left bldg-info"> <div class="info"> <label>{{unit_name}}</label> </div> {{unit_type}} ({{super_built_up_area}}{{measurement_units}}) <br> <div class="text-primary m-t-5 "> <span class="icon-rupee-icn"></span>{{price}} </div> </div> <div class="clearfix"></div> </li>');

    VillaItemView.prototype.initialize = function() {
      return this.$el.prop("id", 'unit' + this.model.get("id"));
    };

    VillaItemView.prototype.serializeData = function() {
      var availability, data, response;
      data = VillaItemView.__super__.serializeData.call(this);
      response = window.unit.getUnitDetails(this.model.get('id'));
      data.unit_type = response[1].get('name');
      data.super_built_up_area = response[0].get('super_built_up_area');
      availability = this.model.get('availability');
      data.status = s.decapitalize(availability);
      this.model.set('status', status);
      data.price = window.numDifferentiation(response[3]);
      this.model.set('status', data.status);
      data.measurement_units = project.get('measurement_units');
      return data;
    };

    VillaItemView.prototype.events = {
      'click .unit': function(e) {
        if (this.model.get('status') === 'available') {
          return CommonFloor.navigate('/unit-view/' + this.model.get('id'), true);
        }
      }
    };

    return VillaItemView;

  })(Marionette.ItemView);

  VillaEmptyView = (function(superClass) {
    extend(VillaEmptyView, superClass);

    function VillaEmptyView() {
      return VillaEmptyView.__super__.constructor.apply(this, arguments);
    }

    VillaEmptyView.prototype.template = 'No units added';

    return VillaEmptyView;

  })(Marionette.ItemView);

  VillaView = (function(superClass) {
    extend(VillaView, superClass);

    function VillaView() {
      return VillaView.__super__.constructor.apply(this, arguments);
    }

    VillaView.prototype.template = Handlebars.compile('<div class="col-md-12 us-right-content"> <div class="list-view-container animated fadeIn"> <span class="pull-left top-legend"> <ul> <li class="na">N/A</li> </ul> </span> <h2 class="text-center">List of Villas</h2> <hr class="margin-none"> <div class="text-center"> <ul class="prop-select"> <li class="prop-type buildings hidden">Buildings</li> <li class="prop-type Villas active ">Villas</li> <li class="prop-type Plots hidden">Plots</li> </ul> </div> <div class="legend"> <ul> <li class="available">AVAILABLE</li> <li class="sold">SOLD</li> <li class="blocked">BLOCKED</li> <li class="na">N/A</li> </ul> </div> <div class="clearfix"></div> <div class="villa-list"> <ul class="units eight"> </ul> </div> </div> </div>');

    VillaView.prototype.childView = VillaItemView;

    VillaView.prototype.childViewContainer = '.units';

    VillaView.prototype.events = {
      'click .buildings': function(e) {
        var data, units;
        units = buildingCollection;
        data = {};
        data.units = units;
        data.type = 'building';
        this.region = new Marionette.Region({
          el: '#centerregion'
        });
        return new CommonFloor.BuildingListCtrl({
          region: this.region
        });
      },
      'click .Villas': function(e) {
        var data, units;
        units = bunglowVariantCollection.getBunglowUnits();
        data = {};
        data.units = units;
        data.type = 'villa';
        this.region = new Marionette.Region({
          el: '#centerregion'
        });
        return new CommonFloor.VillaListCtrl({
          region: this.region
        });
      },
      'click .Plots': function(e) {
        var data, units;
        units = plotVariantCollection.getPlotUnits();
        data = {};
        data.units = units;
        data.type = 'plot';
        this.region = new Marionette.Region({
          el: '#centerregion'
        });
        return new CommonFloor.PlotListCtrl({
          region: this.region
        });
      }
    };

    VillaView.prototype.onShow = function() {
      if (buildingCollection.length !== 0) {
        $('.buildings').removeClass('hidden');
      }
      if (plotVariantCollection.length !== 0) {
        return $('.Plots').removeClass('hidden');
      }
    };

    return VillaView;

  })(Marionette.CompositeView);

  CommonFloor.VillaListCtrl = (function(superClass) {
    extend(VillaListCtrl, superClass);

    function VillaListCtrl() {
      this.loadController = bind(this.loadController, this);
      return VillaListCtrl.__super__.constructor.apply(this, arguments);
    }

    VillaListCtrl.prototype.initialize = function() {
      var newUnits, unitsCollection, view;
      newUnits = bunglowVariantCollection.getBunglowUnits();
      unitsCollection = new Backbone.Collection(newUnits);
      this.view = view = new VillaView({
        collection: unitsCollection
      });
      this.listenTo(this.view, "load:units", this.loadController);
      return this.show(view);
    };

    VillaListCtrl.prototype.loadController = function(data) {
      return Backbone.trigger("load:units", data);
    };

    return VillaListCtrl;

  })(Marionette.RegionController);

}).call(this);

//# sourceMappingURL=../../frontend/project-list-view/villa.list.controller.js.map
(function() {
  var ApartmentsView,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  CommonFloor.ApartmentsListView = (function(superClass) {
    extend(ApartmentsListView, superClass);

    function ApartmentsListView() {
      return ApartmentsListView.__super__.constructor.apply(this, arguments);
    }

    ApartmentsListView.prototype.template = '#apartment-list-template';

    ApartmentsListView.prototype.onShow = function() {
      return $('#leftregion').hide();
    };

    return ApartmentsListView;

  })(Marionette.LayoutView);

  CommonFloor.ApartmentsListCtrl = (function(superClass) {
    extend(ApartmentsListCtrl, superClass);

    function ApartmentsListCtrl() {
      return ApartmentsListCtrl.__super__.constructor.apply(this, arguments);
    }

    ApartmentsListCtrl.prototype.initialize = function() {
      if (jQuery.isEmptyObject(project.toJSON())) {
        project.setProjectAttributes(PROJECTID);
        CommonFloor.loadJSONData();
      }
      if (apartmentVariantMasterCollection.length === 0) {
        return this.show(new CommonFloor.NothingFoundView);
      } else {
        return this.show(new CommonFloor.ApartmentsListView);
      }
    };

    return ApartmentsListCtrl;

  })(Marionette.RegionController);

  CommonFloor.TopApartmentView = (function(superClass) {
    extend(TopApartmentView, superClass);

    function TopApartmentView() {
      return TopApartmentView.__super__.constructor.apply(this, arguments);
    }

    TopApartmentView.prototype.template = Handlebars.compile('<div class="container-fluid animated fadeIn"> <div class="row"> <div class="col-md-12 col-xs-12 col-sm-12"> <div class="breadcrumb-bar"> <a class="unit_back" href="#"></a> </div> <div class="header-info"> <h2 class="pull-left proj-name">{{project_title}} - {{name}}</h2> <div class="proj-type-count"> <h2 class="pull-left">{{results}}</h2><p class="pull-left">Apartment(s)/Penthouse(s)</p> </div> <div class="pull-left filter-result full"> {{#filters}} {{#each this}} {{#each this}} <div class="filter-pill"> {{name}} <span class="icon-cross {{classname}}" id="{{id_name}}" data-id="{{id}}" data-type="{{typename}}" data-index="{{index}}"></span> </div> {{/each}} {{/each}} {{/filters}} {{#area}} <div class="filter-pill"> {{name}} {{type}} <span class="icon-cross " id="{{id_name}}" data-id="{{id}}" data-type="{{typename}}" ></span> </div> {{/area}} {{#budget}} <div class="filter-pill">  <span class="icon-rupee-icn"></span>{{name}} {{type}}</span> <span class="icon-cross " id="{{id_name}}" data-id="{{id}}" data-type="{{typename}}"></span> </div> {{/budget}} {{#views}} <div class="filter-pill"> {{name}}  <span class="icon-cross {{classname}}" id="{{id_name}}" data-id="{{id}}" ></span> </div> {{/views}} {{#facings}} <div class="filter-pill"> {{name}} <span class="icon-cross {{classname}}" id="{{id_name}}" data-id="{{id}}" ></span> </div> {{/facings}} {{#floor}} <div class="filter-pill"> {{name}} {{type}} <span class="icon-cross floor" id="{{id_name}}" data-id="{{id}}" data-type="{{typename}}"></span> </div> {{/floor}} {{#status}} <div class="filter-pill"> {{name}} {{type}} <span class="icon-cross " id="{{id_name}}" data-id="{{id}}" data-type="{{typename}}"></span> </div> {{/status}} </div> </div> </div> </div> </div>');

    TopApartmentView.prototype.ui = {
      unitBack: '.unit_back',
      unitTypes: '.unit_types',
      priceMin: '.price_min',
      priceMax: '.price_max',
      status: '#filter_available',
      apply: '.apply',
      variantNames: '.variant_names',
      area: '#filter_area',
      budget: '#filter_budget',
      types: '.types',
      floor: '.floor',
      filter_flooring: '.filter_flooring',
      views: '.views',
      facings: '.facings'
    };

    TopApartmentView.prototype.initialize = function() {
      var building_id, url;
      url = Backbone.history.fragment;
      building_id = parseInt(url.split('/')[1]);
      return this.building_id = building_id;
    };

    TopApartmentView.prototype.serializeData = function() {
      var data, main, mainFilters, model, newTemp, results, temp, units;
      data = TopApartmentView.__super__.serializeData.call(this);
      units = Marionette.getOption(this, 'units');
      data.units = units.length;
      data.project_title = project.get('project_title');
      main = CommonFloor.getStepFilters();
      mainFilters = main[0].filters[0];
      data.filters = [];
      if (!_.isUndefined(mainFilters)) {
        data.filters = main[0].filters[0].filters;
      }
      data.area = main[0].area;
      data.budget = main[0].price;
      data.status = main[0].status;
      data.floor = main[0].floor;
      data.views = main[0].views;
      data.facings = main[0].facings;
      results = apartmentVariantCollection.getApartmentUnits();
      temp = new Backbone.Collection(results);
      newTemp = temp.where({
        'building_id': parseInt(this.building_id)
      });
      data.results = newTemp.length;
      model = buildingMasterCollection.findWhere({
        'id': this.building_id
      });
      data.name = model.get('building_name');
      return data;
    };

    TopApartmentView.prototype.events = function() {
      return {
        'click @ui.types': function(e) {
          var arr, index;
          arr = CommonFloor.defaults['type'].split(',');
          index = arr.indexOf($(e.target).attr('data-id'));
          arr.splice(index, 1);
          CommonFloor.defaults['type'] = arr.join(',');
          unitCollection.reset(unitMasterCollection.toArray());
          CommonFloor.resetCollections();
          CommonFloor.filterStepNew();
          unitTempCollection.trigger("filter_available");
          return this.trigger('render:view');
        },
        'click @ui.unitBack': function(e) {
          var previousRoute;
          e.preventDefault();
          unitCollection.reset(unitMasterCollection.toArray());
          CommonFloor.resetCollections();
          CommonFloor.filterStepNew();
          previousRoute = CommonFloor.router.previous();
          if (Object.keys(project.get('project_master')).length === 0) {
            return CommonFloor.navigate('/list-view', true);
          } else {
            return CommonFloor.navigate('/master-view', true);
          }
        },
        'click @ui.unitTypes': function(e) {
          var unitTypes;
          unitTypes = CommonFloor.defaults['apartment']['unit_type_id'].split(',');
          unitTypes = _.without(unitTypes, $(e.currentTarget).attr('data-id'));
          CommonFloor.defaults['apartment']['unit_type_id'] = unitTypes.join(',');
          unitCollection.reset(unitMasterCollection.toArray());
          CommonFloor.resetCollections();
          CommonFloor.filterStepNew();
          unitTempCollection.trigger("filter_available");
          return this.trigger('render:view');
        },
        'click @ui.variantNames': function(e) {
          var variantNames;
          variantNames = CommonFloor.defaults['apartment']['unit_variant_id'].split(',');
          variantNames = _.without(variantNames, $(e.currentTarget).attr('data-id'));
          CommonFloor.defaults['apartment']['unit_variant_id'] = variantNames.join(',');
          unitCollection.reset(unitMasterCollection.toArray());
          CommonFloor.resetCollections();
          CommonFloor.filterStepNew();
          unitTempCollection.trigger("filter_available");
          return this.trigger('render:view');
        },
        'click @ui.status': function(e) {
          CommonFloor.defaults['common']['availability'] = "";
          unitCollection.reset(unitMasterCollection.toArray());
          CommonFloor.resetCollections();
          CommonFloor.filterStepNew();
          unitTempCollection.trigger("filter_available");
          return this.trigger('render:view');
        },
        'click @ui.area': function(e) {
          CommonFloor.defaults['common']['area_max'] = "";
          CommonFloor.defaults['common']['area_min'] = "";
          unitCollection.reset(unitMasterCollection.toArray());
          CommonFloor.resetCollections();
          CommonFloor.filterStepNew();
          unitTempCollection.trigger("filter_available");
          return this.trigger('render:view');
        },
        'click @ui.budget': function(e) {
          CommonFloor.defaults['common']['price_max'] = "";
          CommonFloor.defaults['common']['price_min'] = "";
          unitCollection.reset(unitMasterCollection.toArray());
          CommonFloor.resetCollections();
          CommonFloor.filterStepNew();
          unitTempCollection.trigger("filter_available");
          return this.trigger('render:view');
        },
        'click @ui.floor': function(e) {
          CommonFloor.defaults['common']['floor_max'] = "";
          CommonFloor.defaults['common']['floor_min'] = "";
          unitCollection.reset(unitMasterCollection.toArray());
          CommonFloor.resetCollections();
          CommonFloor.filterStepNew();
          unitTempCollection.trigger("filter_available");
          return this.trigger('render:view');
        },
        'click @ui.floor': function(e) {
          CommonFloor.defaults['common']['floor_max'] = "";
          CommonFloor.defaults['common']['floor_min'] = "";
          unitCollection.reset(unitMasterCollection.toArray());
          CommonFloor.resetCollections();
          CommonFloor.filterStepNew();
          unitTempCollection.trigger("filter_available");
          return this.trigger('render:view');
        },
        'click @ui.facings': function(e) {
          var types;
          types = CommonFloor.defaults['common']['facings'].split(',');
          types = _.without(types, $(e.currentTarget).attr('data-id'));
          CommonFloor.defaults['common']['facings'] = types.join(',');
          unitCollection.reset(unitMasterCollection.toArray());
          CommonFloor.resetCollections();
          CommonFloor.filterStepNew();
          unitTempCollection.trigger("filter_available");
          return this.trigger('render:view');
        },
        'click @ui.views': function(e) {
          var types;
          types = CommonFloor.defaults['common']['views'].split(',');
          types = _.without(types, $(e.currentTarget).attr('data-id'));
          CommonFloor.defaults['common']['views'] = types.join(',');
          unitCollection.reset(unitMasterCollection.toArray());
          CommonFloor.resetCollections();
          CommonFloor.filterStepNew();
          unitTempCollection.trigger("filter_available");
          return this.trigger('render:view');
        },
        'click @ui.filter_flooring': function(e) {
          var flooring, index, types;
          types = [];
          index = $(e.currentTarget).attr('data-index');
          if (CommonFloor.defaults['apartment']['attributes'][index] !== "") {
            types = CommonFloor.defaults['apartment']['attributes'][index].split(',');
          }
          flooring = _.without(types, $(e.currentTarget).attr('data-id'));
          CommonFloor.defaults['apartment']['attributes'][index] = flooring.join(',');
          unitCollection.reset(unitMasterCollection.toArray());
          CommonFloor.resetCollections();
          CommonFloor.filterStepNew();
          unitCollection.trigger('filter_available');
          return this.trigger('render:view');
        }
      };
    };

    TopApartmentView.prototype.onShow = function() {
      var results;
      results = CommonFloor.getFilters();
      if (results.length === 0) {
        return $('.proj-type-count').text('No results found');
      }
    };

    return TopApartmentView;

  })(Marionette.ItemView);

  CommonFloor.TopApartmentCtrl = (function(superClass) {
    extend(TopApartmentCtrl, superClass);

    function TopApartmentCtrl() {
      return TopApartmentCtrl.__super__.constructor.apply(this, arguments);
    }

    TopApartmentCtrl.prototype.initialize = function() {
      this.renderTopView();
      return unitTempCollection.bind("filter_available", this.renderTopView, this);
    };

    TopApartmentCtrl.prototype.renderTopView = function() {
      var buildingModel, building_id, response, url;
      url = Backbone.history.fragment;
      building_id = parseInt(url.split('/')[1]);
      response = window.building.getBuildingUnits(building_id);
      buildingModel = buildingMasterCollection.findWhere({
        id: building_id
      });
      this.view = new CommonFloor.TopApartmentView({
        model: buildingModel,
        units: response
      });
      this.listenTo(this.view, "render:view", this.loadController);
      return this.show(this.view);
    };

    TopApartmentCtrl.prototype.loadController = function() {
      window.unitTypes = [];
      window.unitVariants = [];
      window.variantNames = [];
      window.price = '';
      window.area = '';
      window.type = [];
      this.region = new Marionette.Region({
        el: '#filterregion'
      });
      return new CommonFloor.FilterApartmentCtrl({
        region: this.region
      });
    };

    return TopApartmentCtrl;

  })(Marionette.RegionController);

  CommonFloor.LeftApartmentView = (function(superClass) {
    extend(LeftApartmentView, superClass);

    function LeftApartmentView() {
      return LeftApartmentView.__super__.constructor.apply(this, arguments);
    }

    LeftApartmentView.prototype.template = Handlebars.compile('<div class="col-md-3 col-xs-12 col-sm-12 search-left-content leftview"></div>');

    LeftApartmentView.prototype.onShow = function() {
      return $('#leftregion').hide();
    };

    return LeftApartmentView;

  })(Marionette.ItemView);

  CommonFloor.LeftApartmentCtrl = (function(superClass) {
    extend(LeftApartmentCtrl, superClass);

    function LeftApartmentCtrl() {
      return LeftApartmentCtrl.__super__.constructor.apply(this, arguments);
    }

    LeftApartmentCtrl.prototype.initialize = function() {
      return this.show(new CommonFloor.LeftApartmentView);
    };

    return LeftApartmentCtrl;

  })(Marionette.RegionController);

  ApartmentsView = (function(superClass) {
    extend(ApartmentsView, superClass);

    function ApartmentsView() {
      return ApartmentsView.__super__.constructor.apply(this, arguments);
    }

    ApartmentsView.prototype.template = Handlebars.compile('<li class="unit blocks {{status}}"> <div class="bldg-img"></div> <div class="{{type}}-ico pull-left icon"></div> <div class="pull-left bldg-info"> <div class="info"> <label>{{unit_name}} (Floor - {{floor}} )</label> </div> ({{unit_type}} {{super_built_up_area}} {{measurement_units}})<br> <div class="text-primary m-t-5"><span class="icon-rupee-icn"></span>{{price}}</div> </div> <div class="clearfix"></div> </li>');

    ApartmentsView.prototype.serializeData = function() {
      var availability, data, property, response, unitType;
      data = ApartmentsView.__super__.serializeData.call(this);
      response = window.unit.getUnitDetails(this.model.get('id'));
      data.unit_type = response[1].get('name');
      data.super_built_up_area = response[0].get('super_built_up_area');
      availability = this.model.get('availability');
      data.status = s.decapitalize(availability);
      this.model.set('status', status);
      data.price = window.numDifferentiation(response[3]);
      unitType = unitTypeMasterCollection.findWhere({
        'id': this.model.get('unit_type_id')
      });
      property = window.propertyTypes[unitType.get('property_type_id')];
      data.property = s.capitalize(property);
      data.floor = this.model.get('floor');
      data.measurement_units = project.get('measurement_units');
      data.type = response[2];
      return data;
    };

    ApartmentsView.prototype.events = {
      'click .unit': function(e) {
        if (this.model.get('availability') === 'available') {
          return CommonFloor.navigate('/unit-view/' + this.model.get('id'), true);
        }
      }
    };

    return ApartmentsView;

  })(Marionette.ItemView);

  CommonFloor.CenterApartmentView = (function(superClass) {
    extend(CenterApartmentView, superClass);

    function CenterApartmentView() {
      return CenterApartmentView.__super__.constructor.apply(this, arguments);
    }

    CenterApartmentView.prototype.template = '<div> <div class="col-md-12 us-right-content"> <div class="list-view-container"> <!--<div class="controls map-View"> <div class="toggle"> <a href="#" class="map ">Map</a><a href="#" class="list active">List</a> </div> </div>--> <div class="legend clearfix"> <ul> <li class="available">AVAILABLE</li> <li class="sold">SOLD</li> <li class="blocked">BLOCKED</li> <li class="na">N/A</li> </ul> </div> <h2 class="text-center">List of Apartments/Penthouse <span class="pull-right top-legend">     <ul> <li class="na">N/A</li> </ul></span></h2><hr> <div class="villa-list"> <ul class="units eight"> </ul> </div> </div> </div> </div>';

    CenterApartmentView.prototype.childView = ApartmentsView;

    CenterApartmentView.prototype.childViewContainer = '.units';

    CenterApartmentView.prototype.events = {
      'click .map': function(e) {
        var building_id, url;
        e.preventDefault();
        url = Backbone.history.fragment;
        building_id = parseInt(url.split('/')[1]);
        return CommonFloor.navigate('/building/' + building_id + '/master-view', true);
      },
      'click .list': function(e) {
        var building_id, url;
        e.preventDefault();
        url = Backbone.history.fragment;
        building_id = parseInt(url.split('/')[1]);
        return CommonFloor.navigate('/building/' + building_id + '/apartments', true);
      }
    };

    return CenterApartmentView;

  })(Marionette.CompositeView);

  CommonFloor.CenterApartmentCtrl = (function(superClass) {
    extend(CenterApartmentCtrl, superClass);

    function CenterApartmentCtrl() {
      return CenterApartmentCtrl.__super__.constructor.apply(this, arguments);
    }

    CenterApartmentCtrl.prototype.initialize = function() {
      this.renderListView();
      return unitTempCollection.bind("filter_available", this.renderListView, this);
    };

    CenterApartmentCtrl.prototype.renderListView = function() {
      var building_id, region, response, unitsCollection, url;
      url = Backbone.history.fragment;
      building_id = parseInt(url.split('/')[1]);
      response = window.building.getBuildingUnits(building_id);
      if (response.length === 0 && url.split('/')[2] === 'apartments') {
        region = new Marionette.Region({
          el: '#centerregion'
        });
        new CommonFloor.NoUnitsCtrl({
          region: region
        });
        return;
      }
      unitsCollection = new Backbone.Collection(response);
      this.view = new CommonFloor.CenterApartmentView({
        collection: unitsCollection
      });
      return this.show(this.view);
    };

    return CenterApartmentCtrl;

  })(Marionette.RegionController);

}).call(this);

//# sourceMappingURL=../../frontend/building-step3/apartments.list.controller.js.map
(function() {
  var ApartmentsView, api, breakPoints, currentBreakPoint,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  api = "";

  currentBreakPoint = 0;

  breakPoints = [];

  CommonFloor.ApartmentsMasterView = (function(superClass) {
    extend(ApartmentsMasterView, superClass);

    function ApartmentsMasterView() {
      return ApartmentsMasterView.__super__.constructor.apply(this, arguments);
    }

    ApartmentsMasterView.prototype.template = '#apartment-master-template';

    return ApartmentsMasterView;

  })(Marionette.LayoutView);

  CommonFloor.ApartmentsMasterCtrl = (function(superClass) {
    extend(ApartmentsMasterCtrl, superClass);

    function ApartmentsMasterCtrl() {
      return ApartmentsMasterCtrl.__super__.constructor.apply(this, arguments);
    }

    ApartmentsMasterCtrl.prototype.initialize = function() {
      if (jQuery.isEmptyObject(project.toJSON())) {
        project.setProjectAttributes(PROJECTID);
        CommonFloor.loadJSONData();
      }
      if (apartmentVariantMasterCollection.length === 0) {
        return this.show(new CommonFloor.NothingFoundView);
      } else {
        return this.show(new CommonFloor.ApartmentsMasterView);
      }
    };

    return ApartmentsMasterCtrl;

  })(Marionette.RegionController);

  CommonFloor.TopApartmentMasterView = (function(superClass) {
    extend(TopApartmentMasterView, superClass);

    function TopApartmentMasterView() {
      return TopApartmentMasterView.__super__.constructor.apply(this, arguments);
    }

    TopApartmentMasterView.prototype.template = Handlebars.compile('<div class="container-fluid animated fadeIn"> <div class="row"> <div class="col-md-12 col-xs-12 col-sm-12"> <div class="breadcrumb-bar"> <a class="unit_back" href="#"></a> </div> <div class="header-info"> <h2 class="pull-left proj-name">{{project_title}} - {{name}}</h2> <div class="proj-type-count"> <h2 class="pull-left">{{results}}</h2><p class="pull-left">Apartment(s)/Penthouse(s)</p> </div> <div class="pull-left filter-result full"> <ul  id="flexiselDemo1"> {{#filters}} {{#each this}} {{#each this}} <li> <div class="filter-pill"> {{name}} <span class="icon-cross {{classname}}" id="{{id_name}}" data-id="{{id}}" data-index="{{index}}" data-type="{{typename}}"></span> </div> </li> {{/each}} {{/each}} {{/filters}} {{#area}} <li> <div class="filter-pill"> {{name}} {{type}} <span class="icon-cross " id="{{id_name}}" data-id="{{id}}" data-type="{{typename}}"></span> </div> </li> {{/area}} {{#budget}} <li> <div class="filter-pill">  <span class="icon-rupee-icn"></span>{{name}} {{type}}</span> <span class="icon-cross " id="{{id_name}}" data-id="{{id}}" data-type="{{typename}}"></span> </div> </li> {{/budget}} {{#views}} <li> <div class="filter-pill"> {{name}}  <span class="icon-cross {{classname}}" id="{{id_name}}" data-id="{{id}}" ></span> </div> </li> {{/views}} {{#facings}} <li> <div class="filter-pill"> {{name}} <span class="icon-cross {{classname}}" id="{{id_name}}" data-id="{{id}}" ></span> </div> </li> {{/facings}} {{#floor}} <li> <div class="filter-pill"> {{name}} {{type}} <span class="icon-cross floor" id="{{id_name}}" data-id="{{id}}" data-type="{{typename}}"></span> </div> </li> {{/floor}} {{#status}} <li> <div class="filter-pill"> {{name}} {{type}} <span class="icon-cross " id="{{id_name}}" data-id="{{id}}" data-type="{{typename}}"></span> </div> </li> {{/status}} </ul> </div> </div> </div> </div> </div>');

    TopApartmentMasterView.prototype.ui = {
      unitBack: '.unit_back',
      unitTypes: '.unit_types',
      priceMin: '.price_min',
      priceMax: '.price_max',
      status: '#filter_available',
      apply: '.apply',
      variantNames: '.variant_names',
      area: '#filter_area',
      budget: '#filter_budget',
      types: '.types',
      floor: '.floor',
      filter_flooring: '.filter_flooring',
      views: '.views',
      facings: '.facings'
    };

    TopApartmentMasterView.prototype.initialize = function() {
      var building_id, url;
      url = Backbone.history.fragment;
      building_id = parseInt(url.split('/')[1]);
      return this.building_id = building_id;
    };

    TopApartmentMasterView.prototype.serializeData = function() {
      var building_id, data, main, mainFilters, model, newTemp, results, temp, units, url;
      data = TopApartmentMasterView.__super__.serializeData.call(this);
      url = Backbone.history.fragment;
      building_id = parseInt(url.split('/')[1]);
      units = Marionette.getOption(this, 'units');
      data.units = units.length;
      data.project_title = project.get('project_title');
      main = CommonFloor.getStepFilters();
      mainFilters = main[0].filters[0];
      data.filters = [];
      if (!_.isUndefined(mainFilters)) {
        data.filters = main[0].filters[0].filters;
      }
      data.area = main[0].area;
      data.budget = main[0].price;
      data.status = main[0].status;
      data.floor = main[0].floor;
      data.views = main[0].views;
      data.facings = main[0].facings;
      results = unitCollection.length;
      temp = unitCollection;
      newTemp = temp.where({
        'building_id': parseInt(building_id)
      });
      data.results = newTemp.length;
      model = buildingMasterCollection.findWhere({
        'id': building_id
      });
      data.name = model.get('building_name');
      return data;
    };

    TopApartmentMasterView.prototype.events = function() {
      return {
        'click @ui.types': function(e) {
          var arr, index;
          arr = CommonFloor.defaults['type'].split(',');
          index = arr.indexOf($(e.currentTarget).attr('data-id'));
          arr.splice(index, 1);
          CommonFloor.defaults['type'] = arr.join(',');
          unitCollection.reset(unitMasterCollection.toArray());
          CommonFloor.resetCollections();
          CommonFloor.filterStepNew();
          unitTempCollection.trigger("filter_available");
          return this.trigger('render:view');
        },
        'click @ui.unitBack': function(e) {
          var previousRoute;
          e.preventDefault();
          unitCollection.reset(unitMasterCollection.toArray());
          CommonFloor.resetCollections();
          CommonFloor.filterStepNew();
          previousRoute = CommonFloor.router.previous();
          if (Object.keys(project.get('project_master')).length === 0) {
            return CommonFloor.navigate('/list-view', true);
          } else {
            return CommonFloor.navigate('/master-view', true);
          }
        },
        'click @ui.unitTypes': function(e) {
          var unitTypes;
          unitTypes = CommonFloor.defaults['apartment']['unit_type_id'].split(',');
          unitTypes = _.without(unitTypes, $(e.currentTarget).attr('data-id'));
          CommonFloor.defaults['apartment']['unit_type_id'] = unitTypes.join(',');
          unitCollection.reset(unitMasterCollection.toArray());
          CommonFloor.resetCollections();
          CommonFloor.filterStepNew();
          unitTempCollection.trigger("filter_available");
          return this.trigger('render:view');
        },
        'click @ui.variantNames': function(e) {
          var variantNames;
          variantNames = CommonFloor.defaults['apartment']['unit_variant_id'].split(',');
          variantNames = _.without(variantNames, $(e.currentTarget).attr('data-id'));
          CommonFloor.defaults['apartment']['unit_variant_id'] = variantNames.join(',');
          unitCollection.reset(unitMasterCollection.toArray());
          CommonFloor.resetCollections();
          CommonFloor.filterStepNew();
          unitTempCollection.trigger("filter_available");
          return this.trigger('render:view');
        },
        'click @ui.status': function(e) {
          CommonFloor.defaults['common']['availability'] = "";
          unitCollection.reset(unitMasterCollection.toArray());
          CommonFloor.resetCollections();
          CommonFloor.filterStepNew();
          unitTempCollection.trigger("filter_available");
          return this.trigger('render:view');
        },
        'click @ui.area': function(e) {
          CommonFloor.defaults['common']['area_max'] = "";
          CommonFloor.defaults['common']['area_min'] = "";
          unitCollection.reset(unitMasterCollection.toArray());
          CommonFloor.resetCollections();
          CommonFloor.filterStepNew();
          unitTempCollection.trigger("filter_available");
          return this.trigger('render:view');
        },
        'click @ui.budget': function(e) {
          CommonFloor.defaults['common']['price_max'] = "";
          CommonFloor.defaults['common']['price_min'] = "";
          unitCollection.reset(unitMasterCollection.toArray());
          CommonFloor.resetCollections();
          CommonFloor.filterStepNew();
          unitTempCollection.trigger("filter_available");
          return this.trigger('render:view');
        },
        'click @ui.floor': function(e) {
          CommonFloor.defaults['common']['floor_max'] = "";
          CommonFloor.defaults['common']['floor_min'] = "";
          unitCollection.reset(unitMasterCollection.toArray());
          CommonFloor.resetCollections();
          CommonFloor.filterStepNew();
          unitTempCollection.trigger("filter_available");
          return this.trigger('render:view');
        },
        'click @ui.facings': function(e) {
          var types;
          types = CommonFloor.defaults['common']['facings'].split(',');
          types = _.without(types, $(e.currentTarget).attr('data-id'));
          CommonFloor.defaults['common']['facings'] = types.join(',');
          unitCollection.reset(unitMasterCollection.toArray());
          CommonFloor.resetCollections();
          CommonFloor.filterStepNew();
          unitTempCollection.trigger("filter_available");
          return this.trigger('render:view');
        },
        'click @ui.views': function(e) {
          var types;
          types = CommonFloor.defaults['common']['views'].split(',');
          types = _.without(types, $(e.currentTarget).attr('data-id'));
          CommonFloor.defaults['common']['views'] = types.join(',');
          unitCollection.reset(unitMasterCollection.toArray());
          CommonFloor.resetCollections();
          CommonFloor.filterStepNew();
          unitTempCollection.trigger("filter_available");
          return this.trigger('render:view');
        },
        'click @ui.filter_flooring': function(e) {
          var flooring, index, types;
          types = [];
          index = $(e.currentTarget).attr('data-index');
          if (CommonFloor.defaults['apartment']['attributes'][index] !== "") {
            types = CommonFloor.defaults['apartment']['attributes'][index].split(',');
          }
          console.log(flooring = _.without(types, $(e.currentTarget).attr('data-id')));
          CommonFloor.defaults['apartment']['attributes'][index] = flooring.join(',');
          unitCollection.reset(unitMasterCollection.toArray());
          CommonFloor.resetCollections();
          CommonFloor.filterStepNew();
          unitTempCollection.trigger('filter_available');
          return this.trigger('render:view');
        }
      };
    };

    TopApartmentMasterView.prototype.onShow = function() {
      var results;
      $("#flexiselDemo1").flexisel({
        visibleItems: 11,
        animationSpeed: 200,
        autoPlay: false,
        autoPlaySpeed: 1000,
        clone: false,
        enableResponsiveBreakpoints: true,
        responsiveBreakpoints: {
          portrait: {
            changePoint: 480,
            visibleItems: 5
          },
          landscape: {
            changePoint: 640,
            visibleItems: 6
          },
          tablet: {
            changePoint: 768,
            visibleItems: 3
          }
        }
      });
      results = CommonFloor.getFilters();
      if (results.length === 0) {
        return $('.proj-type-count').text('No results found');
      }
    };

    return TopApartmentMasterView;

  })(Marionette.ItemView);

  CommonFloor.TopApartmentMasterCtrl = (function(superClass) {
    extend(TopApartmentMasterCtrl, superClass);

    function TopApartmentMasterCtrl() {
      return TopApartmentMasterCtrl.__super__.constructor.apply(this, arguments);
    }

    TopApartmentMasterCtrl.prototype.initialize = function() {
      this.renderMasterTopView();
      return unitTempCollection.bind("filter_available", this.renderMasterTopView, this);
    };

    TopApartmentMasterCtrl.prototype.renderMasterTopView = function() {
      var buildingModel, building_id, response, url;
      url = Backbone.history.fragment;
      building_id = parseInt(url.split('/')[1]);
      response = window.building.getBuildingUnits(building_id);
      buildingModel = buildingMasterCollection.findWhere({
        id: building_id
      });
      this.view = new CommonFloor.TopApartmentMasterView({
        model: buildingModel,
        units: response
      });
      this.listenTo(this.view, "render:view", this.loadController);
      return this.show(this.view);
    };

    TopApartmentMasterCtrl.prototype.loadController = function() {
      window.unitTypes = [];
      window.unitVariants = [];
      window.variantNames = [];
      window.price = '';
      window.area = '';
      window.type = [];
      this.region = new Marionette.Region({
        el: '#filterregion'
      });
      return new CommonFloor.FilterApartmentCtrl({
        region: this.region
      });
    };

    return TopApartmentMasterCtrl;

  })(Marionette.RegionController);

  ApartmentsView = (function(superClass) {
    extend(ApartmentsView, superClass);

    function ApartmentsView() {
      return ApartmentsView.__super__.constructor.apply(this, arguments);
    }

    ApartmentsView.prototype.template = Handlebars.compile('	<div class="row"> <div class="col-xs-5  info"> <b class="bold">{{floor}}</b>-{{unit_name}} </div> <div class="col-xs-3  info"> {{unit_type}} </div> <div class="col-xs-4 text-primary"> <span class="icon-rupee-icn"></span>{{price}} <!--<span class="tick"></span>--> </div> </div>');

    ApartmentsView.prototype.initialize = function() {
      return this.$el.prop("id", 'apartment' + this.model.get("id"));
    };

    ApartmentsView.prototype.ui = {
      onview: '.onview'
    };

    ApartmentsView.prototype.tagName = 'li';

    ApartmentsView.prototype.className = 'unit blocks';

    ApartmentsView.prototype.serializeData = function() {
      var availability, data, property, response, status, unitType;
      data = ApartmentsView.__super__.serializeData.call(this);
      response = window.unit.getUnitDetails(this.model.get('id'));
      data.unit_type = response[1].get('name');
      data.super_built_up_area = response[0].get('super_built_up_area');
      availability = this.model.get('availability');
      status = s.decapitalize(availability);
      this.model.set('status', status);
      data.price = window.numDifferentiation(response[3]);
      unitType = unitTypeMasterCollection.findWhere({
        'id': this.model.get('unit_type_id')
      });
      property = window.propertyTypes[unitType.get('property_type_id')];
      data.property = s.capitalize(property);
      data.floor = 'F' + this.model.get('floor');
      return data;
    };

    ApartmentsView.prototype.events = {
      'mouseover': function(e) {
        var html, id;
        id = this.model.get('id');
        html = this.getHtml(this.model.get('id'));
        $('#apartment' + id).addClass(' active');
        $('#' + id).attr('class', 'layer apartment svg_active ' + this.model.get('availability'));
        $('#' + id).tooltipster('content', html);
        return $('#' + id).tooltipster('show');
      },
      'mouseout': function(e) {
        var id;
        id = this.model.get('id');
        $('#apartment' + id).removeClass('active');
        $('#' + id).attr('class', 'layer apartment ' + this.model.get('availability'));
        return $('#' + id).tooltipster('hide');
      },
      'click': function(e) {
        var breakpoint;
        if ($(e.currentTarget).hasClass('onview')) {
          breakpoint = this.model.get('breakpoint');
          currentBreakPoint = _.indexOf(breakPoints, breakpoint);
          return api.playTo(breakpoint, {
            nearest: true
          });
        } else {
          if (this.model.get('availability') === 'available') {
            return CommonFloor.navigate('/unit-view/' + this.model.get('id'), true);
          }
        }
      }
    };

    ApartmentsView.prototype.getHtml = function(id) {
      var availability, html, price, response, unit;
      html = "";
      id = parseInt(id);
      unit = unitCollection.findWhere({
        'id': id
      });
      if (unit === void 0) {
        html = '<div class="svg-info"> <div class="action-bar2"> <div class="txt-dft"></div> </div> <h5 class="pull-left"> Apartment details not entered </div> </div>';
        $('.apartment').tooltipster('content', html);
        return false;
      }
      response = window.unit.getUnitDetails(id);
      price = window.numDifferentiation(response[3]);
      availability = unit.get('availability');
      availability = s.decapitalize(availability);
      html = "";
      html += '<div class="svg-info ' + availability + '"> <div class="action-bar"> <div class="apartment"></div> </div> <div class="pull-left"> <h4 class="m-t-0">' + unit.get('unit_name') + '</h4> <div class="details"> <ul> <li> <h5 class="inline-block">' + response[1].get('name') + '</h5> <span> - ' + response[0].get('super_built_up_area') + ' ' + project.get('measurement_units') + '</span> <!--<label>Variant</label> - ' + response[0].get('unit_variant_name') + '--> </li> </ul> <div class="price text-primary"> <span class="text-primary icon-rupee-icn"></span>' + price + '</div> </div> </div>';
      if (availability === 'available') {
        html += '<div class="circle"> <a href="#unit-view/' + id + '" class="arrow-up icon-chevron-right"></a> </div> </div>';
      } else {
        html += '</div>';
      }
      return html;
    };

    ApartmentsView.prototype.onShow = function() {
      var availability, classname, id, status;
      id = this.model.get('id');
      availability = this.model.get('availability');
      status = s.decapitalize(availability);
      classname = $('#apartment' + id).attr('class');
      $('#apartment' + id).addClass(classname + ' ' + status);
      return CommonFloor.applyOnViewClass();
    };

    return ApartmentsView;

  })(Marionette.ItemView);

  CommonFloor.LeftApartmentMasterView = (function(superClass) {
    extend(LeftApartmentMasterView, superClass);

    function LeftApartmentMasterView() {
      return LeftApartmentMasterView.__super__.constructor.apply(this, arguments);
    }

    LeftApartmentMasterView.prototype.template = '<div> <div id="trig" class="toggle-button"></div> <div id="view_toggle" class="toggle-view-button map"></div> <div class="list-view-container w-map animated fadeInLeft"> <div class="advncd-filter-wrp  unit-list"> <div class="legend clearfix"> <ul> <li class="available">AVAILABLE</li> <li class="sold">SOLD</li> <li class="blocked">BLOCKED</li> <li class="na">N/A</li> </ul> </div> <div class="sort-unit"> All Units <input type="checkbox" name="inview" id="inview" checked data-toggle="toggle" data-on="&nbsp;" data-off="&nbsp;" data-onstyle="warning" data-offstyle="warning"> In View </div> <p class="text-center help-text">Hover on the units for more details</p> <ul class="units one apartments"> </ul> </div> </div> </div>';

    LeftApartmentMasterView.prototype.childView = ApartmentsView;

    LeftApartmentMasterView.prototype.childViewContainer = '.units';

    LeftApartmentMasterView.prototype.ui = {
      viewtog: '#view_toggle',
      trig: '#trig',
      notinview: '#notinview',
      inview: '#inview'
    };

    LeftApartmentMasterView.prototype.events = {
      'change @ui.inview': function(e) {
        if ($(e.currentTarget).is(':checked')) {
          return this.showInView();
        } else {
          return this.showNotInView();
        }
      },
      'click @ui.trig': function(e) {
        return $('.list-container').toggleClass('closed');
      },
      'click @ui.viewtog': function(e) {
        $('.us-left-content').toggleClass('not-visible visible');
        return $('.us-right-content').toggleClass('not-visible visible');
      }
    };

    LeftApartmentMasterView.prototype.showInView = function() {
      return $('.onview').hide();
    };

    LeftApartmentMasterView.prototype.showNotInView = function() {
      return $('.onview').show();
    };

    LeftApartmentMasterView.prototype.onShow = function() {
      return this.ui.inview.bootstrapToggle();
    };

    return LeftApartmentMasterView;

  })(Marionette.CompositeView);

  CommonFloor.LeftApartmentMasterCtrl = (function(superClass) {
    extend(LeftApartmentMasterCtrl, superClass);

    function LeftApartmentMasterCtrl() {
      return LeftApartmentMasterCtrl.__super__.constructor.apply(this, arguments);
    }

    LeftApartmentMasterCtrl.prototype.initialize = function() {
      this.renderLeftView();
      return unitTempCollection.bind("filter_available", this.renderLeftView, this);
    };

    LeftApartmentMasterCtrl.prototype.renderLeftView = function() {
      var building_id, region, response, unitsCollection, url;
      url = Backbone.history.fragment;
      building_id = parseInt(url.split('/')[1]);
      response = window.building.getBuildingUnits(building_id);
      if (response.length === 0) {
        region = new Marionette.Region({
          el: '#leftregion'
        });
        new CommonFloor.NoUnitsCtrl({
          region: region
        });
        return;
      }
      unitsCollection = new Backbone.Collection(response);
      this.view = new CommonFloor.LeftApartmentMasterView({
        collection: unitsCollection
      });
      return this.show(this.view);
    };

    return LeftApartmentMasterCtrl;

  })(Marionette.RegionController);

  CommonFloor.CenterApartmentMasterView = (function(superClass) {
    extend(CenterApartmentMasterView, superClass);

    function CenterApartmentMasterView() {
      return CenterApartmentMasterView.__super__.constructor.apply(this, arguments);
    }

    CenterApartmentMasterView.prototype.template = Handlebars.compile('<div class="col-md-12 col-sm-12 col-xs-12 us-right-content mobile visible animated fadeIn overflow-h"> <div class="legend clearfix"> <ul> <!--<li class="available">AVAILABLE</li>--> <li class="sold">N/A</li> <!--<li class="blocked">BLOCKED</li> <li class="na">Available</li>--> </ul> </div> <div class="zoom-controls"> <div class="zoom-in"></div> <div class="zoom-out"></div> </div> <div id="view_toggle" class="toggle-view-button list"></div> <div id="trig" class="toggle-button hidden">List View</div> <div class=" master animated fadeIn"> <div class="single-bldg"> <div class="prev"></div> <div class="next"></div> </div> <div id="svg_loader" class="img-loader"> <div class="square" ></div> <div class="square"></div> <div class="square last"></div> <div class="square clear"></div> <div class="square"></div> <div class="square last"></div> <div class="square clear"></div> <div class="square "></div> <div class="square last"></div> </div> <div class="outer-wrap" STYLE="height:100%"> <div mag-thumb="outer" class="home-region"> <img class="zoomimage" /> </div> <div mag-zoom="outer"> <div id="spritespin" class="building-master"></div> <div class="svg-maps animated fadeIn hidden"> <img class="first_image img-responsive" /> <div class="region inactive"></div> </div> </div> </div> <div id="rotate_loader" class="cf-loader hidden"></div> </div> <div class="rotate rotate-controls hidden"> <div id="prev" class="rotate-left">Left</div> <span class="rotate-text">Rotate</span> <div id="next" class="rotate-right">Right</div> </div> <div class="mini-map hidden animated fadeIn"> <img class="firstimage img-responsive" src=""/> <div class="project_master"></div> </div> </div>');

    CenterApartmentMasterView.prototype.ui = {
      svgContainer: '.master',
      viewtog: '#view_toggle',
      zoomIn: '.Zoomin'
    };

    CenterApartmentMasterView.prototype.events = {
      'click @ui.zoomIn': function(e) {
        console.log("aaaaaaaaaaaa");
        $('.apartment').bind('mouseenter');
        return $('.apartment').on('click');
      },
      'click @ui.viewtog': function(e) {
        $('.us-left-content').toggleClass('not-visible visible');
        return $('.us-right-content').toggleClass('not-visible visible');
      },
      'click #prev': function() {
        return this.setDetailIndex(currentBreakPoint - 1);
      },
      'click #next': function() {
        return this.setDetailIndex(currentBreakPoint + 1);
      },
      'mouseover .apartment': function(e) {
        var availability, html, id, price, response, unit, unitMaster;
        console.log(id = parseInt(e.currentTarget.id));
        unit = unitCollection.findWhere({
          'id': id
        });
        unitMaster = unitMasterCollection.findWhere({
          id: id
        });
        if (unit === void 0 && unitMaster !== void 0) {
          html = '<div class="svg-info"> <div class="action-bar2"> <div class="txt-dft"></div> </div> <h5 class="pull-left"> Not in selection </div> </div>';
          $('.apartment').tooltipster('content', html);
          return;
        }
        response = window.unit.getUnitDetails(id);
        price = window.numDifferentiation(response[3]);
        availability = unit.get('availability');
        availability = s.decapitalize(availability);
        if (unit === void 0 || availability === 'archive') {
          html = '<div class="svg-info"> <div class="action-bar2"> <div class="txt-dft"></div> </div> <h5 class="pull-left"> Apartment details not entered </div> </div>';
          $('.apartment').tooltipster('content', html);
          return false;
        }
        html = "";
        html += '<div class="svg-info ' + availability + '"> <div class="action-bar"> <div class="' + response[2] + '"></div> </div> <div class="pull-left"> <h4 class="m-t-0">' + unit.get('unit_name') + '</h4> <div class="details"> <ul> <li> <h5 class="inline-block">' + response[1].get('name') + '</h5> <span> - ' + response[0].get('super_built_up_area') + ' ' + project.get('measurement_units') + '</span> <!--<label>Variant</label> - ' + response[0].get('unit_variant_name') + '--> </li> </ul> <div class="price text-primary"> <span class="text-primary icon-rupee-icn"></span>' + price + '</div> <div class="price text-primary"> <span class="text-primary"></span>' + s.capitalize(availability) + '</div> </div> </div>';
        if (availability === 'available') {
          html += '<a href="#unit-view/' + id + '" class="view-unit"> <div class="circle"> <span class="arrow-up icon-chevron-right"></span> </div> </a> </div>';
        } else {
          html += '</div>';
        }
        $('#' + id).attr('class', 'layer apartment svg_active ' + availability);
        $('#apartment' + id).addClass(' active');
        $('.units').mCustomScrollbar("scrollTo", '#apartment' + id);
        return $('.apartment').tooltipster('content', html);
      },
      'mouseout .apartment': function(e) {
        var availability, id, unit;
        id = parseInt(e.currentTarget.id);
        unit = unitCollection.findWhere({
          'id': id
        });
        if (unit === void 0) {
          return;
        }
        availability = unit.get('availability');
        availability = s.decapitalize(availability);
        $('#' + id).attr('class', 'layer apartment ' + availability);
        return $('#apartment' + id).removeClass(' active');
      },
      'mouseover .amenity': function(e) {
        var html;
        html = '<div class="row"> <div class="col-sm-12 b-r"> <h4 class="text-warning margin-none">' + $(e.currentTarget).attr('data-amenity-title') + '</h4> <h6 class="text-muted">' + $(e.currentTarget).attr('data-amenity-desc') + '</h6> </div> </div>';
        return $('.amenity').tooltipster('content', html);
      },
      'click .apartment': function(e) {
        var id, unit;
        id = parseInt(e.currentTarget.id);
        unit = unitCollection.findWhere({
          id: id
        });
        if (!(_.isUndefined(unit)) && unit.get('availability') === 'available') {
          return CommonFloor.navigate('/unit-view/' + id, true);
        }
      },
      'mouseover .next,.prev': function(e) {
        var buildingModel, cost, floors, html, id, images, price, response, unitTypes;
        id = parseInt($(e.currentTarget).attr('data-id'));
        buildingModel = buildingMasterCollection.findWhere({
          'id': id
        });
        images = Object.keys(buildingModel.get('building_master')).length;
        floors = buildingModel.get('no_of_floors');
        unitTypes = window.building.getUnitTypes(id);
        response = window.building.getUnitTypesCount(id, unitTypes);
        cost = window.building.getMinimumCost(id);
        price = window.numDifferentiation(cost);
        html = '<div class="svg-info"> <i class="building-ico"></i> <h5 class=" m-t-0">' + buildingModel.get('building_name') + '</h5> <div class="details"> <label>' + floors + ' Floors</label></br> <div class="text-primary"> <span class="text-primary facts-icon icon-rupee-icn"></span>' + price + '</div> </div> </div>';
        return $(e.currentTarget).tooltipster('content', html);
      },
      'click .next,.prev': function(e) {
        var buildingModel, id;
        id = parseInt($(e.currentTarget).attr('data-id'));
        buildingModel = buildingMasterCollection.findWhere({
          'id': id
        });
        if (Object.keys(buildingModel.get('building_master')).length === 0) {
          return CommonFloor.navigate('/building/' + id + '/apartments', true);
        } else {
          return CommonFloor.navigate('/building/' + id + '/master-view', true);
        }
      }
    };

    CenterApartmentMasterView.prototype.onShow = function() {
      var breakpoints, building, building_id, first, height, svgs, that, transitionImages, url, windowHeight;
      if ($(window).width() > 991) {
        window.magne = new Magnificent('[mag-thumb="outer"]', {
          mode: 'outer',
          position: 'drag',
          toggle: false,
          zoomMax: 3,
          zoomRate: 2,
          constrainZoomed: true
        });
        window.magne.zoomBy(-1);
      }
      windowHeight = $(window).innerHeight() - 56;
      $('.master').css('height', windowHeight);
      $('.master').css('min-width', windowHeight * 2);
      this.getNextPrev();
      height = this.ui.svgContainer.width() / 2;
      $('.search-left-content').css('height', height);
      $('#spritespin').hide();
      url = Backbone.history.fragment;
      building_id = parseInt(url.split('/')[1]);
      building = buildingMasterCollection.findWhere({
        id: building_id
      });
      transitionImages = [];
      svgs = {};
      that = this;
      breakpoints = building.get('breakpoints');
      $.each(breakpoints, function(index, value) {
        return svgs[value] = BASEURL + '/projects/' + PROJECTID + '/buildings/' + building_id + '/master-' + value + '.svg';
      });
      $.merge(transitionImages, building.get('building_master'));
      first = _.values(svgs);
      $('.first_image').attr('src', transitionImages[breakpoints[0]]);
      $('.first_image').load(function() {
        return $('.region').load(first[0], function() {
          var response;
          $('#svg_loader').addClass('hidden');
          that.iniTooltip();
          CommonFloor.applyAvailabilClasses();
          CommonFloor.randomClass();
          CommonFloor.applyFliterClass();
          CommonFloor.applyOnViewClass();
          if ($(window).width() > 991) {
            $(that.el).undelegate('.apartment', 'click');
            $(that.el).undelegate('.apartment', 'mouseover');
            that.zoomBuilding();
            $('.zoomimage').attr('src', transitionImages[breakpoints[0]]);
          } else {
            that.loadZoom();
            $('.first_image').first().css('width', that.ui.svgContainer.width());
          }
          response = building.checkRotationView(building_id);
          $('.svg-maps').removeClass('hidden');
          $('.mini-map').removeClass('hidden');
          $('.unassign').attr('style', "opacity: 0;fill-opacity: 0;");
          if (response === 1) {
            $('.cf-loader').removeClass('hidden');
            return that.initializeRotate(transitionImages, svgs, building);
          }
        }).addClass('active').removeClass('inactive');
      });
      this.loadProjectMaster();
      if ($(window).width() > 991) {
        return $('.units').mCustomScrollbar({
          theme: 'cf-scroll'
        });
      }
    };

    CenterApartmentMasterView.prototype.ratioOffsetsFor = function($target, x, y) {
      return {
        x: x / $target.width(),
        y: y / $target.height()
      };
    };

    CenterApartmentMasterView.prototype.zoomBuilding = function() {
      var that;
      that = this;
      $(".mag-lens").resize(function(e) {
        var temp;
        temp = $(e.target).width();
        if (temp === 398) {
          $(that.el).undelegate('.apartment', 'click');
          $(that.el).undelegate('.apartment', 'mouseover');
          $('.apartment').tooltipster('disable');
          return that.zoomShow();
        } else {
          that.delegateEvents();
          $('.svg-maps').off('click', '.sold');
          $('.svg-maps').off('click', '.blocked');
          $('.svg-maps').off('click', '.not_released');
          that.iniTooltip();
          return $('.apartment').tooltipster('enable');
        }
      });
      return that.zoomShow();
    };

    CenterApartmentMasterView.prototype.zoomShow = function() {
      var class_array;
      class_array = ['.available', '.sold', '.blocked', '.not_released'];
      return $.each(class_array, function(index, value) {
        return $('.svg-maps').on('click', value, function(e) {
          var temp, xapoint, xpoint, yapoint, ypoint;
          clearTimeout(window.renderLoopInterval);
          xpoint = e.clientX;
          ypoint = e.clientY;
          xpoint = xpoint / $(window).width();
          ypoint = ypoint / $(window).height();
          xpoint = xpoint.toFixed(1);
          ypoint = ypoint.toFixed(1);
          xapoint = xpoint / 10;
          yapoint = ypoint / 10;
          temp = window.magne;
          temp.model.focus = {
            x: xpoint,
            y: ypoint
          };
          temp.zoomBy(1);
          return temp.reinit();
        });
      });
    };

    CenterApartmentMasterView.prototype.loadProjectMaster = function() {
      var first, masterbreakpoints, svgs, transitionImages;
      svgs = [];
      masterbreakpoints = project.get('breakpoints');
      $.each(masterbreakpoints, function(index, value) {
        return svgs[value] = BASEURL + '/projects/' + PROJECTID + '/master/master-' + value + '.svg';
      });
      first = _.values(svgs);
      transitionImages = [];
      $.merge(transitionImages, project.get('project_master'));
      if (project.get('project_master').length !== 0) {
        return $('.project_master').load(first[0], function() {
          var building_id, url;
          $('.unassign').attr('style', "opacity: 0;fill-opacity: 0;");
          $('.firstimage').attr('src', transitionImages[masterbreakpoints[0]]);
          url = Backbone.history.fragment;
          building_id = url.split('/')[1];
          $('.villa,.plot,.amenity').each(function(ind, item) {
            var id;
            id = parseInt(item.id);
            return $('#' + id).attr('class', "no-fill");
          });
          return $('#' + building_id + '.building').attr('class', 'layer building svg_active');
        });
      }
    };

    CenterApartmentMasterView.prototype.getNextPrev = function() {
      var buildingModel, building_id, next, prev, url;
      url = Backbone.history.fragment;
      building_id = parseInt(url.split('/')[1]);
      buildingModel = buildingMasterCollection.findWhere({
        'id': building_id
      });
      buildingMasterCollection.setRecord(buildingModel);
      next = buildingMasterCollection.next();
      if (_.isUndefined(next)) {
        $('.next').hide();
      } else {
        $('.next').attr('data-id', next.get('id'));
      }
      prev = buildingMasterCollection.prev();
      if (_.isUndefined(prev)) {
        return $('.prev').hide();
      } else {
        return $('.prev').attr('data-id', prev.get('id'));
      }
    };

    CenterApartmentMasterView.prototype.setDetailIndex = function(index) {
      $('.region').empty();
      $('.region').addClass('inactive').removeClass('active');
      currentBreakPoint = index;
      if (currentBreakPoint < 0) {
        currentBreakPoint = breakPoints.length - 1;
      }
      if (currentBreakPoint >= breakPoints.length) {
        currentBreakPoint = 0;
      }
      return api.playTo(breakPoints[currentBreakPoint], {
        nearest: true
      });
    };

    CenterApartmentMasterView.prototype.initializeRotate = function(transitionImages, svgs, building) {
      var building_id, frames, spin, that, url, width;
      url = Backbone.history.fragment;
      building_id = parseInt(url.split('/')[1]);
      frames = transitionImages;
      breakPoints = building.get('breakpoints');
      currentBreakPoint = 0;
      width = this.ui.svgContainer.width() + 20;
      $('.svg-maps > div').first().removeClass('inactive').addClass('active').css('width', width);
      spin = $('#spritespin');
      spin.spritespin({
        source: frames,
        width: this.ui.svgContainer.width(),
        sense: -1,
        height: this.ui.svgContainer.width() / 2,
        animate: false
      });
      that = this;
      api = spin.spritespin("api");
      spin.bind("onFrame", function() {
        var data;
        data = api.data;
        if (data.frame === data.stopFrame) {
          url = svgs[data.frame];
          return $('.region').load(url, function() {
            that.iniTooltip();
            CommonFloor.applyAvailabilClasses();
            CommonFloor.randomClass();
            CommonFloor.applyFliterClass();
            CommonFloor.applyOnViewClass();
            if ($(window).width() < 992) {
              that.loadZoom();
            }
            return $('.unassign').attr('style', "opacity: 0;fill-opacity: 0;");
          }).addClass('active').removeClass('inactive');
        }
      });
      return spin.bind("onLoad", function() {
        var response;
        response = building.checkRotationView(building_id);
        if (response === 1) {
          $('.first_image').remove();
          $('.rotate').removeClass('hidden');
          $('#spritespin').show();
          $('#rotate_loader').addClass('hidden');
        }
        return $('.region').load(url, function() {
          that.iniTooltip();
          if ($(window).width() < 992) {
            that.loadZoom();
          }
          CommonFloor.applyAvailabilClasses();
          CommonFloor.randomClass();
          CommonFloor.applyFliterClass();
          CommonFloor.applyOnViewClass();
          return $('.unassign').attr('style', "opacity: 0;fill-opacity: 0;");
        }).addClass('active').removeClass('inactive');
      });
    };

    CenterApartmentMasterView.prototype.iniTooltip = function() {
      $('.apartment').tooltipster({
        theme: 'tooltipster-shadow',
        contentAsHTML: true,
        onlyOne: true,
        arrow: false,
        offsetX: 50,
        offsetY: -10,
        trigger: 'hover',
        interactive: true,
        functionReady: function(e) {
          return $('.view-unit').on('click', function(e) {
            $('.layer').tooltipster('hide');
            $('svg').attr('class', 'zoom');
            $('#spritespin').addClass('zoom');
            $('.us-right-content').addClass('fadeOut');
            return $('.cf-loader').removeClass('hidden');
          });
        }
      });
      $('.next').tooltipster({
        theme: 'tooltipster-shadow circle-tooltip',
        contentAsHTML: true,
        onlyOne: true,
        arrow: false,
        interactive: true,
        trigger: 'hover',
        position: 'left',
        delay: 50
      });
      $('.prev').tooltipster({
        theme: 'tooltipster-shadow circle-tooltip',
        contentAsHTML: true,
        onlyOne: true,
        arrow: false,
        interactive: true,
        trigger: 'hover',
        position: 'right',
        delay: 50
      });
      return $('.amenity').tooltipster({
        theme: 'tooltipster-shadow marker-tooltip',
        contentAsHTML: true,
        onlyOne: true,
        arrow: false,
        trigger: 'hover'
      });
    };

    CenterApartmentMasterView.prototype.loadZoom = function() {
      $('.master').panzoom({
        contain: 'invert',
        minScale: 1,
        maxScale: 2.4,
        increment: 0.4,
        $zoomIn: $('.zoom-in'),
        $zoomOut: $('.zoom-out')
      });
      return $('.master polygon').on('mousedown touchstart', function(e) {
        return e.stopImmediatePropagation();
      });
    };

    return CenterApartmentMasterView;

  })(Marionette.ItemView);

  CommonFloor.CenterApartmentMasterCtrl = (function(superClass) {
    extend(CenterApartmentMasterCtrl, superClass);

    function CenterApartmentMasterCtrl() {
      return CenterApartmentMasterCtrl.__super__.constructor.apply(this, arguments);
    }

    CenterApartmentMasterCtrl.prototype.initialize = function() {
      return this.show(new CommonFloor.CenterApartmentMasterView);
    };

    return CenterApartmentMasterCtrl;

  })(Marionette.RegionController);

}).call(this);

//# sourceMappingURL=../../frontend/building-step3/apartments.master.controller.js.map
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.unitTypes = [];

  window.unitVariants = [];

  window.variantNames = [];

  window.flooring = [];

  window.price = '';

  window.area = '';

  window.type = [];

  CommonFloor.FilterApartmentView = (function(superClass) {
    extend(FilterApartmentView, superClass);

    function FilterApartmentView() {
      return FilterApartmentView.__super__.constructor.apply(this, arguments);
    }

    FilterApartmentView.prototype.template = Handlebars.compile('<a href="javascript:void(0)"  class="text-primary filters-clear clear">Clear Filters </a> <button class="btn btn-primary filter-button" type="button"> <span class="icon"></span> </button> <div class="filters-wrapper"> <div class="filters-content"> <div class="unit_type_filter"> <h6>UNIT TYPE</h6> <div class="filter-chkbox-block"> {{#unitTypes}} <input type="checkbox" class="custom-chckbx addCft unit_types" id="unit_type{{id}}" value="unit_type{{id}}" value="1" data-value={{id}} > <label for="unit_type{{id}}" class="-lbl">{{name}}({{type}})</label> {{/unitTypes}} </div> </div> <div class="variant_filter"> <h6>VARIANT</h6> <div class="filter-chkbox-block"> {{#unitVariantNames}} <input type="checkbox" class="custom-chckbx addCft variant_names" id="varinat_name{{id}}" value="varinat_name{{id}}" value="1" data-value={{id}} > <label for="varinat_name{{id}}" class="-lbl">{{name}}({{type}})</label> {{/unitVariantNames}} <!--<a href="#" class="hide-div">+ Show More</a>--> </div> </div> <div class="flooring_filter"> <div class="filter-chkbox-block"> {{#flooring}} <div class=""> <h6 class="unit_type_filter">{{label}}</h6> <div class="filter-chkbox-block"> {{#value}} <input type="checkbox" class="custom-chckbx addCft {{classname}}" id="{{id}}" value="{{id}}" value="1" data-value="{{name}}" data-index="{{index}}" data-type="apartment" > <label for="{{id}}" class="-lbl">{{name}}</label> {{/value}} </div> </div> {{/flooring}} <!--<a href="#" class="hide-div">+ Show More</a>--> </div> </div> <div class="areaLabel"> <h6>AREA ({{measurement_units}})</h6> <div class="range-container"> <input type="text" id="area" name="area" value="" /> </div> </div> <div class="budgetLabel"> <h6>BUDGET ( <span class="icon-rupee-icn"></span> )</h6> <div class="range-container"> <input type="text" id="budget" name="budget" value="" /> </div> </div> <div class="viewLabel"> <h6 class="">VIEWS</h6> <div class="filter-chkbox-block"> {{#views}} <input type="checkbox" class="custom-chckbx addCft views " id="{{id}}" value="{{id}}"  > <label for="{{id}}" class="-lbl  ">{{name}}</label> {{/views}} </div> </div> <div class="facingLabel"> <h6 class="">FACINGS</h6> <div class="filter-chkbox-block"> {{#facings}} <input type="checkbox" class="custom-chckbx addCft facings " id="{{id}}" value="{{id}}"  > <label for="{{id}}" class="-lbl  ">{{name}}</label> {{/facings}} </div> </div> <div class="floor_filter"> <h6>FLOOR </h6> <div class="range-container"> <input type="text" id="floor" name="floor" value="" /> </div> </div> <div class=""> <h6 class="availability">AVAILABILITY</h6> <div class="filter-chkbox-block"> <input type="checkbox" name="available"  class="custom-chckbx addCft status" id="available" value="available"> <label for="available" class="-lbl">Show Available Units Only</label> </div> </div> </div> </div>');

    FilterApartmentView.prototype.ui = {
      unitTypes: '.unit_types',
      priceMin: '.price_min',
      priceMax: '.price_max',
      status: '.status',
      apply: '.apply',
      variantNames: '.variant_names',
      area: '#area',
      budget: '#budget',
      clear: '.clear',
      floor: '#floor',
      flooring: '.attributes',
      facings: '.facings',
      views: '.views'
    };

    FilterApartmentView.prototype.initialize = function() {
      var building_id, unitTypes, url, variantNames;
      this.price = '';
      this.area = '';
      this.floor = '';
      variantNames = [];
      unitTypes = [];
      url = Backbone.history.fragment;
      building_id = parseInt(url.split('/')[1]);
      this.building_id = building_id;
      if (CommonFloor.defaults['apartment']['unit_type_id'] !== "") {
        unitTypes = CommonFloor.defaults['apartment']['unit_type_id'].split(',');
      }
      if (CommonFloor.defaults['apartment']['unit_variant_id'] !== "") {
        variantNames = CommonFloor.defaults['apartment']['unit_variant_id'].split(',');
      }
      if (CommonFloor.defaults['type'] !== "") {
        window.type = CommonFloor.defaults['type'].split(',');
      }
      window.unitTypes = unitTypes.map(function(item) {
        return parseInt(item);
      });
      return window.variantNames = variantNames.map(function(item) {
        return parseInt(item);
      });
    };

    FilterApartmentView.prototype.events = {
      'click @ui.clear': function(e) {
        window.unitTypes = [];
        window.unitVariants = [];
        window.variantNames = [];
        window.price = '';
        window.area = '';
        window.type = [];
        $.each(CommonFloor.defaults['apartment'], function(index, value) {
          CommonFloor.defaults['apartment'][index] = "";
          if (index === 'attributes') {
            return CommonFloor.defaults['apartment'][index] = {};
          }
        });
        $.each(CommonFloor.defaults['common'], function(index, value) {
          return CommonFloor.defaults['common'][index] = "";
        });
        unitCollection.reset(unitMasterCollection.toArray());
        CommonFloor.resetCollections();
        CommonFloor.filterBuilding(this.building_id);
        CommonFloor.filterStepNew();
        unitTempCollection.trigger("filter_available");
        this.loadSelectedFilters();
        this.price = $("#budget").data("ionRangeSlider");
        this.area = $("#area").data("ionRangeSlider");
        this.floor = $("#floor").data("ionRangeSlider");
        this.price.destroy();
        this.area.destroy();
        this.floor.destroy();
        return this.loadClearFilters();
      },
      'click @ui.unitTypes': function(e) {
        if ($(e.currentTarget).is(':checked')) {
          window.unitTypes.push(parseInt($(e.currentTarget).attr('data-value')));
        } else {
          window.unitTypes = _.without(window.unitTypes, parseInt($(e.currentTarget).attr('data-value')));
        }
        CommonFloor.defaults['apartment']['unit_type_id'] = window.unitTypes.join(',');
        CommonFloor.defaults['step_three']['unit_type_id'] = window.unitTypes.join(',');
        unitCollection.reset(unitMasterCollection.toArray());
        CommonFloor.resetCollections();
        CommonFloor.filterBuilding(this.building_id);
        CommonFloor.filterStepNew();
        return unitTempCollection.trigger("filter_available");
      },
      'click @ui.variantNames': function(e) {
        if ($(e.currentTarget).is(':checked')) {
          window.variantNames.push(parseInt($(e.currentTarget).attr('data-value')));
        } else {
          window.variantNames = _.without(window.variantNames, parseInt($(e.currentTarget).attr('data-value')));
        }
        CommonFloor.defaults['apartment']['unit_variant_id'] = window.variantNames.join(',');
        CommonFloor.defaults['step_three']['unit_variant_id'] = window.variantNames.join(',');
        unitCollection.reset(unitMasterCollection.toArray());
        CommonFloor.resetCollections();
        CommonFloor.filterBuilding(this.building_id);
        CommonFloor.filterStepNew();
        return unitTempCollection.trigger("filter_available");
      },
      'change @ui.priceMin': function(e) {
        if ($(e.currentTarget).val() !== "") {
          CommonFloor.defaults['common']['price_min'] = $(e.currentTarget).val();
        } else {
          CommonFloor.defaults['common']['price_min'] = 0;
        }
        unitCollection.reset(unitMasterCollection.toArray());
        CommonFloor.resetCollections();
        CommonFloor.filterBuilding(this.building_id);
        CommonFloor.filterStepNew();
        return unitTempCollection.trigger("filter_available");
      },
      'change @ui.priceMax': function(e) {
        if ($(e.currentTarget).val() !== "") {
          CommonFloor.defaults['common']['price_max'] = $(e.currentTarget).val();
        } else {
          CommonFloor.defaults['common']['price_max'] = 999999900;
        }
        unitCollection.reset(unitMasterCollection.toArray());
        CommonFloor.resetCollections();
        CommonFloor.filterBuilding(this.building_id);
        CommonFloor.filterStepNew();
        return unitTempCollection.trigger("filter_available");
      },
      'click @ui.status': function(e) {
        if ($(e.currentTarget).is(':checked')) {
          CommonFloor.defaults['common']['availability'] = e.currentTarget.id;
        } else {
          CommonFloor.defaults['common']['availability'] = "";
        }
        unitCollection.reset(unitMasterCollection.toArray());
        CommonFloor.resetCollections();
        CommonFloor.filterBuilding(this.building_id);
        CommonFloor.filterStepNew();
        return unitTempCollection.trigger("filter_available");
      },
      'change @ui.area': function(e) {
        CommonFloor.defaults['common']['area_max'] = parseFloat($(e.target).val().split(';')[1]);
        CommonFloor.defaults['common']['area_min'] = parseFloat($(e.target).val().split(';')[0]);
        unitCollection.reset(unitMasterCollection.toArray());
        CommonFloor.resetCollections();
        CommonFloor.filterBuilding(this.building_id);
        CommonFloor.filterStepNew();
        return unitTempCollection.trigger("filter_available");
      },
      'change @ui.budget': function(e) {
        CommonFloor.defaults['common']['price_max'] = parseFloat($(e.target).val().split(';')[1]);
        CommonFloor.defaults['common']['price_min'] = parseFloat($(e.target).val().split(';')[0]);
        unitCollection.reset(unitMasterCollection.toArray());
        CommonFloor.resetCollections();
        CommonFloor.filterBuilding(this.building_id);
        CommonFloor.filterStepNew();
        return unitTempCollection.trigger("filter_available");
      },
      'change @ui.floor': function(e) {
        CommonFloor.defaults['common']['floor_max'] = parseFloat($(e.target).val().split(';')[1]);
        CommonFloor.defaults['common']['floor_min'] = parseFloat($(e.target).val().split(';')[0]);
        unitCollection.reset(unitMasterCollection.toArray());
        CommonFloor.resetCollections();
        CommonFloor.filterBuilding(this.building_id);
        CommonFloor.filterStepNew();
        return unitTempCollection.trigger("filter_available");
      },
      'click @ui.flooring': function(e) {
        var index, types;
        types = [];
        index = $(e.currentTarget).attr('data-index');
        if (!_.has(CommonFloor.defaults['apartment']['attributes'], index)) {
          CommonFloor.defaults['apartment']['attributes'][index] = '';
        }
        if (CommonFloor.defaults['apartment']['attributes'][index] !== "") {
          types = CommonFloor.defaults['apartment']['attributes'][index].split(',');
        }
        if ($(e.currentTarget).is(':checked')) {
          types.push($(e.currentTarget).attr('data-value'));
        } else {
          types = _.without(types, $(e.currentTarget).attr('data-value'));
        }
        window.flooring = _.uniq(types);
        CommonFloor.defaults['apartment']['attributes'][index] = types.join(',');
        unitCollection.reset(unitMasterCollection.toArray());
        CommonFloor.resetCollections();
        CommonFloor.filterBuilding(this.building_id);
        CommonFloor.filterStepNew();
        return unitTempCollection.trigger("filter_available");
      },
      'click @ui.views': function(e) {
        var types;
        types = [];
        if (CommonFloor.defaults['common']['views'] !== "") {
          types = CommonFloor.defaults['common']['views'].split(',');
        }
        if ($(e.currentTarget).is(':checked')) {
          types.push($(e.currentTarget).val());
        } else {
          types = _.without(types, $(e.currentTarget).val());
        }
        types = _.uniq(types);
        CommonFloor.defaults['common']['views'] = types.join(',');
        unitCollection.reset(unitMasterCollection.toArray());
        CommonFloor.resetCollections();
        CommonFloor.filterBuilding(this.building_id);
        CommonFloor.filterStepNew();
        return unitTempCollection.trigger("filter_available");
      },
      'click @ui.facings': function(e) {
        var types;
        types = [];
        if (CommonFloor.defaults['common']['facings'] !== "") {
          types = CommonFloor.defaults['common']['facings'].split(',');
        }
        if ($(e.currentTarget).is(':checked')) {
          types.push($(e.currentTarget).val());
        } else {
          types = _.without(types, $(e.currentTarget).val());
        }
        types = _.uniq(types);
        CommonFloor.defaults['common']['facings'] = types.join(',');
        unitCollection.reset(unitMasterCollection.toArray());
        CommonFloor.resetCollections();
        CommonFloor.filterBuilding(this.building_id);
        CommonFloor.filterStepNew();
        return unitTempCollection.trigger("filter_available");
      },
      'click .filter-button': function(e) {
        window.flag1 = 0;
        $('.fliters-container').toggleClass('closed');
        if ($('.fliters-container').hasClass("closed")) {
          return window.flag1 = 1;
        }
      }
    };

    FilterApartmentView.prototype.serializeData = function() {
      var data;
      data = FilterApartmentView.__super__.serializeData.call(this);
      data.unitTypes = Marionette.getOption(this, 'unitTypes');
      data.unitVariants = Marionette.getOption(this, 'unitVariants');
      data.unitVariantNames = Marionette.getOption(this, 'unitVariantNames');
      data.flooring = Marionette.getOption(this, 'flooring');
      data.views = Marionette.getOption(this, 'views');
      data.facings = Marionette.getOption(this, 'facings');
      return data;
    };

    FilterApartmentView.prototype.onShow = function() {
      var area, budget, building_id, floor, max, min, priceMax, priceMin, sub, subArea, subBudget, units, url;
      this.loadSelectedFilters();
      $('.filters-content').mCustomScrollbar({
        theme: 'cf-scroll'
      });
      budget = [];
      area = [];
      url = Backbone.history.fragment;
      building_id = parseInt(url.split('/')[1]);
      floor = buildingMasterCollection.findWhere({
        'id': building_id
      });
      units = unitMasterCollection.where({
        'building_id': this.building_id
      });
      $.each(units, function(index, value) {
        var unitDetails;
        unitDetails = window.unit.getUnitDetails(value.get('id'));
        budget.push(parseFloat(unitDetails[3]));
        return area.push(parseFloat(unitDetails[0].get('super_built_up_area')));
      });
      min = _.min(area);
      max = _.max(area);
      subArea = (max - min) / 20;
      subArea = subArea.toFixed(0);
      sub = subArea % 5;
      subArea = subArea - sub;
      priceMin = _.min(budget);
      priceMax = _.max(budget);
      subBudget = (priceMax - priceMin) / 20;
      subBudget = subBudget.toFixed(0);
      if (CommonFloor.defaults['common']['area_min'] !== "") {
        $("#area").ionRangeSlider({
          type: "double",
          min: min,
          max: max,
          from: CommonFloor.defaults['common']['area_min']
        }, {
          to: CommonFloor.defaults['common']['area_max']
        }, {
          step: subArea,
          grid: false
        });
      } else {
        $("#area").ionRangeSlider({
          type: "double",
          min: min,
          max: max,
          step: subArea,
          grid: false
        });
      }
      if (CommonFloor.defaults['common']['price_min'] !== "") {
        $("#budget").ionRangeSlider({
          type: "double",
          min: priceMin,
          max: priceMax,
          from: CommonFloor.defaults['common']['price_min'],
          to: CommonFloor.defaults['common']['price_max'],
          grid: false,
          step: subBudget,
          prettify: function(num) {
            return window.numDifferentiation(num);
          }
        });
      } else {
        $("#budget").ionRangeSlider({
          type: "double",
          min: priceMin,
          max: priceMax,
          grid: false,
          step: subBudget,
          prettify: function(num) {
            return window.numDifferentiation(num);
          }
        });
      }
      $("#floor").ionRangeSlider({
        type: "double",
        min: 1,
        max: floor.get('no_of_floors'),
        grid: false
      });
      if (CommonFloor.defaults['common']['floor_min'] !== "") {
        $("#budget").ionRangeSlider({
          type: "double",
          min: 1,
          max: floor.get('no_of_floors'),
          from: CommonFloor.defaults['common']['floor_min'],
          to: CommonFloor.defaults['common']['floor_max'],
          grid: false
        });
      } else {
        $("#budget").ionRangeSlider({
          type: "double",
          min: 1,
          max: floor.get('no_of_floors'),
          grid: false
        });
      }
      return this.hideLabels();
    };

    FilterApartmentView.prototype.hideLabels = function() {
      var budget, facings, unitVariants, views;
      if (Marionette.getOption(this, 'flooring').length === 0) {
        $('.flooring_filter').hide();
      }
      if (Marionette.getOption(this, 'unitTypes').length === 0) {
        $('.unit_type_filter').hide();
      }
      if (Marionette.getOption(this, 'unitVariantNames').length === 0) {
        $('.variant_filter').hide();
      }
      views = Marionette.getOption(this, 'views');
      facings = Marionette.getOption(this, 'facings');
      budget = Marionette.getOption(this, 'budget');
      unitVariants = Marionette.getOption(this, 'unitVariants');
      if (views.length === 0) {
        $('.viewLabel').hide();
      }
      if (facings.length === 0) {
        $('.facingLabel').hide();
      }
      if (budget.length === 0) {
        $('.budgetLabel').hide();
      }
      if (unitVariants.length === 0) {
        $('.areaLabel').hide();
      }
      if ($.inArray('floor', project.get('filters').defaults) === -1 || _.isUndefined(project.get('filters').defaults)) {
        return $('.floor_filter').hide();
      }
    };

    FilterApartmentView.prototype.loadClearFilters = function() {
      var area, budget, building_id, floor, max, min, priceMax, priceMin, sub, subArea, subBudget, submax, submin, url;
      budget = [];
      area = [];
      url = Backbone.history.fragment;
      building_id = parseInt(url.split('/')[1]);
      floor = buildingMasterCollection.findWhere({
        'id': building_id
      });
      $.each(unitMasterCollection.toArray(), function(index, value) {
        var unitDetails;
        unitDetails = window.unit.getUnitDetails(value.id);
        budget.push(parseFloat(unitDetails[3]));
        return area.push(parseFloat(unitDetails[0].get('super_built_up_area')));
      });
      min = _.min(area);
      submin = min % 5;
      min = min - submin;
      max = _.max(area);
      submax = max % 5;
      max = max - submax;
      subArea = (max - min) / 20;
      subArea = subArea.toFixed(0);
      sub = subArea % 5;
      subArea = subArea - sub;
      priceMin = _.min(budget);
      priceMax = _.max(budget);
      subBudget = (priceMax - priceMin) / 20;
      subBudget = subBudget.toFixed(0);
      $('#area').val(min + ";" + max);
      $('#budget').val(priceMin + ";" + priceMax);
      $('#floor').val(1 + ";" + floor.get('no_of_floors'));
      $("#area").ionRangeSlider({
        type: "double",
        min: min,
        max: max,
        step: subArea,
        grid: false
      });
      $("#budget").ionRangeSlider({
        type: "double",
        min: priceMin,
        max: priceMax,
        grid: false,
        step: subBudget,
        prettify: function(num) {
          return window.numDifferentiation(num);
        }
      });
      return $("#floor").ionRangeSlider({
        type: "double",
        min: 1,
        max: floor.get('no_of_floors'),
        grid: false
      });
    };

    FilterApartmentView.prototype.loadSelectedFilters = function() {
      var aptValues, attributes, facings, id, types, typesArray, unitTypes, unitVariants, unitVariantsArray, unitsArr, unittypesArray, unittypesColl, views;
      unittypesArray = [];
      unitTypes = CommonFloor.defaults['apartment']['unit_type_id'].split(',');
      unitVariantsArray = [];
      unitVariants = CommonFloor.defaults['apartment']['unit_variant_id'].split(',');
      typesArray = [];
      types = CommonFloor.defaults['type'].split(',');
      id = [];
      unitsArr = [];
      unittypesColl = [];
      $.merge(unitsArr, apartmentVariantMasterCollection.getApartmentMasterUnits());
      $.each(unitsArr, function(index, value) {
        var unitDetails;
        unitDetails = window.unit.getUnitDetails(value.id);
        id.push(parseInt(unitDetails[0].get('id')));
        return unittypesColl.push(parseInt(unitDetails[1].get('id')));
      });
      attributes = [];
      aptValues = _.values(CommonFloor.defaults['apartment']['attributes']);
      $.merge(attributes, aptValues);
      views = [];
      $.merge(views, CommonFloor.defaults['common']['views'].split(','));
      facings = [];
      $.merge(facings, CommonFloor.defaults['common']['facings'].split(','));
      $(this.ui.unitTypes).each(function(ind, item) {
        $('#' + item.id).attr('checked', true);
        $('#' + item.id).attr('disabled', false);
        if ($.inArray($(item).attr('data-value'), unitTypes) === -1) {
          $('#' + item.id).prop('checked', false);
          $('#' + item.id).attr('disabled', false);
        }
        if ($.inArray(parseInt($(item).attr('data-value')), unittypesColl) === -1) {
          $('#' + item.id).prop('checked', false);
          return $('#' + item.id).attr('disabled', true);
        }
      });
      $(this.ui.variantNames).each(function(ind, item) {
        $('#' + item.id).attr('checked', true);
        $('#' + item.id).attr('disabled', false);
        if ($.inArray($(item).attr('data-value'), unitVariants) === -1) {
          $('#' + item.id).prop('checked', false);
          $('#' + item.id).attr('disabled', false);
        }
        if ($.inArray(parseInt($(item).attr('data-value')), id) === -1) {
          $('#' + item.id).prop('checked', false);
          return $('#' + item.id).attr('disabled', true);
        }
      });
      $(this.ui.flooring).each(function(ind, item) {
        $('#' + item.id).prop('checked', true);
        $('#' + item.id).attr('disabled', false);
        if ($.inArray($(item).attr('data-value'), attributes) === -1) {
          $('#' + item.id).prop('checked', false);
          return $('#' + item.id).attr('disabled', false);
        }
      });
      $(this.ui.views).each(function(ind, item) {
        $('#' + item.id).prop('checked', true);
        $('#' + item.id).attr('disabled', false);
        if ($.inArray($(item).val(), views) === -1) {
          $('#' + item.id).prop('checked', false);
          return $('#' + item.id).attr('disabled', false);
        }
      });
      $(this.ui.facings).each(function(ind, item) {
        $('#' + item.id).prop('checked', true);
        $('#' + item.id).attr('disabled', false);
        if ($.inArray($(item).val(), facings) === -1) {
          $('#' + item.id).prop('checked', false);
          return $('#' + item.id).attr('disabled', false);
        }
      });
      this.ui.status.prop('checked', false);
      if (CommonFloor.defaults['common']['availability'] !== "") {
        return this.ui.status.prop('checked', true);
      }
    };

    return FilterApartmentView;

  })(Marionette.ItemView);

  CommonFloor.FilterApartmentCtrl = (function(superClass) {
    extend(FilterApartmentCtrl, superClass);

    function FilterApartmentCtrl() {
      return FilterApartmentCtrl.__super__.constructor.apply(this, arguments);
    }

    FilterApartmentCtrl.prototype.initialize = function() {
      var apartmentFilters, area, budget, facings, flooring, unitTypes, unitVariantNames, unitVariants, view, views, viewsFacingsArr;
      unitTypes = [];
      unitVariants = [];
      unitVariantNames = [];
      area = [];
      budget = [];
      flooring = [];
      apartmentFilters = this.getApartmentFilters();
      if (apartmentFilters.length !== 0) {
        $.merge(unitTypes, apartmentFilters[0].unitTypes);
        $.merge(unitVariants, apartmentFilters[0].unitVariants);
        $.merge(unitVariantNames, apartmentFilters[0].unitVariantNames);
        $.merge(budget, apartmentFilters[0].budget);
        $.merge(flooring, apartmentFilters[0].flooring);
      }
      viewsFacingsArr = this.getViewsFacings();
      views = viewsFacingsArr[0];
      facings = viewsFacingsArr[1];
      if ($.inArray('budget', project.get('filters').defaults) === -1 || _.isUndefined(project.get('filters').defaults)) {
        budget = [];
      }
      if ($.inArray('area', project.get('filters').defaults) === -1 || _.isUndefined(project.get('filters').defaults)) {
        unitVariants = [];
      }
      this.view = view = new CommonFloor.FilterApartmentView({
        model: project,
        'unitTypes': unitTypes,
        'unitVariants': _.uniq(unitVariants),
        'unitVariantNames': unitVariantNames,
        'budget': budget,
        'flooring': flooring,
        'views': views,
        'facings': facings
      });
      this.listenTo(this.view, "load:apt:filters", this.loadAptFilter);
      return this.show(this.view);
    };

    FilterApartmentCtrl.prototype.loadAptFilter = function() {
      var aptFilters;
      aptFilters = this.getApartmentFilters();
      return this.view.triggerMethod("apt:filters", aptFilters);
    };

    FilterApartmentCtrl.prototype.getApartmentFilters = function() {
      var budget, building_id, filters, newtemp, temp, unitTypes, unitVariantNames, unitVariants, unit_types, unitsArr, url;
      filters = [];
      unitTypes = [];
      unit_types = [];
      unitVariants = [];
      unitVariantNames = [];
      budget = [];
      temp = [];
      newtemp = [];
      url = Backbone.history.fragment;
      building_id = parseInt(url.split('/')[1]);
      apartmentVariantMasterCollection.each(function(item) {
        var type, unitTypeModel, units;
        units = unitMasterCollection.where({
          'unit_variant_id': item.get('id'),
          'building_id': building_id
        });
        if (units.length !== 0) {
          unitTypeModel = unitTypeMasterCollection.findWhere({
            'id': item.get('unit_type_id')
          });
          type = 'A';
          if (window.propertyTypes[unitTypeModel.get('property_type_id')] === 'Penthouses') {
            type = 'PH';
          }
          if ($.inArray(item.get('unit_type_id'), unit_types) === -1) {
            unit_types.push(parseInt(unitTypeModel.get('id')));
            unitTypes.push({
              'id': unitTypeModel.get('id'),
              'name': unitTypeModel.get('name'),
              'type': type
            });
          }
          unitVariants.push(item.get('super_built_up_area'));
          return unitVariantNames.push({
            'id': item.get('id'),
            'name': item.get('unit_variant_name'),
            'type': type
          });
        }
      });
      if (!_.isUndefined(project.get('filters').Apartment)) {
        $.each(project.get('filters').Apartment, function(index, value) {
          var flooring;
          if (value !== 'unitTypes' && value !== 'unitVariantNames') {
            temp = [];
            flooring = [];
            apartmentVariantMasterCollection.each(function(item) {
              var units;
              units = unitMasterCollection.where({
                'unit_variant_id': item.get('id')
              });
              if (units.length !== 0) {
                return $.each(item.get('variant_attributes'), function(ind, val) {
                  if (ind === value && val !== "") {
                    if (_.isArray(val)) {
                      return $.each(val, function(ind1, val1) {
                        if ($.inArray(val, flooring) === -1) {
                          flooring.push(val1);
                          return temp.push({
                            'name': val1,
                            'index': value,
                            'id': 'apt' + s.replaceAll(val1, " ", "_"),
                            'dataId': s.replaceAll(val1, " ", "_"),
                            'classname': 'attributes',
                            'label': ind,
                            type: 'A'
                          });
                        }
                      });
                    } else {
                      if ($.inArray(val, flooring) === -1) {
                        flooring.push(val);
                        return temp.push({
                          'name': val,
                          'index': value,
                          'id': 'apt' + s.replaceAll(val, " ", "_"),
                          'dataId': s.replaceAll(val, " ", "_"),
                          'classname': 'attributes',
                          'label': ind,
                          type: 'A'
                        });
                      }
                    }
                  }
                });
              }
            });
            if (temp.length !== 0) {
              return newtemp.push({
                'label': value.toUpperCase(),
                'value': temp,
                'index': value
              });
            }
          }
        });
      }
      unitsArr = apartmentVariantMasterCollection.getApartmentMasterUnits();
      $.each(unitsArr, function(index, value) {
        var unitDetails;
        unitDetails = window.unit.getUnitDetails(value.id);
        return budget.push(parseFloat(unitDetails[3]));
      });
      filters.push({
        'unitTypes': unitTypes,
        'unitVariants': unitVariants,
        'unitVariantNames': unitVariantNames,
        'budget': budget,
        'flooring': newtemp
      });
      $.each(filters[0], function(index, value) {
        if ($.inArray(index, project.get('filters').Apartment) === -1 && index !== 'budget' && index !== 'unitVariants' && index !== 'flooring') {
          filters[0][index] = [];
        }
        if (index === 'flooring') {
          return $.each(value, function(ind, val) {
            if ($.inArray(val.index, project.get('filters').Apartment) === -1) {
              return filters[0][index] = [];
            }
          });
        }
      });
      return filters;
    };

    FilterApartmentCtrl.prototype.getViewsFacings = function() {
      var building_id, facings, facingsArr, units, url, viewArr, views;
      views = [];
      viewArr = [];
      facingsArr = [];
      url = Backbone.history.fragment;
      building_id = parseInt(url.split('/')[1]);
      units = unitCollection.where({
        'building_id': building_id
      });
      _.each(units, function(item) {
        return $.merge(views, item.get('views'));
      });
      views = _.uniq(views);
      views = views.sort();
      $.each(views, function(ind, val) {
        return viewArr.push({
          'id': val,
          'name': val
        });
      });
      facings = ['North', 'South', 'East', 'West', 'North-East', 'North-West', 'South-East', 'South-West'];
      $.each(facings, function(ind, val) {
        return facingsArr.push({
          'id': val,
          'name': val
        });
      });
      if ($.inArray('views', project.get('filters').defaults) === -1 || _.isUndefined(project.get('filters').defaults)) {
        viewArr = [];
      }
      if ($.inArray('direction', project.get('filters').defaults) === -1 || _.isUndefined(project.get('filters').defaults)) {
        facingsArr = [];
      }
      return [viewArr, facingsArr];
    };

    return FilterApartmentCtrl;

  })(Marionette.RegionController);

}).call(this);

//# sourceMappingURL=../../frontend/building-step3/apartment.filter.controller.js.map
(function() {
  var BunglowListView, MasterBunglowListView, VillaEmptyView,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  BunglowListView = (function(superClass) {
    extend(BunglowListView, superClass);

    function BunglowListView() {
      return BunglowListView.__super__.constructor.apply(this, arguments);
    }

    BunglowListView.prototype.template = Handlebars.compile('	<div class=" info"> <label class="">{{unit_name}}</label><span class="status-icon"></span>  <!--{{super_built_up_area}}sqft--> </div> <div class="cost pull-left"> <span class="icon-rupee-icn"> </span>{{price}} </div> <div class="pull-right"> {{unit_type}} </div> <div class="clearfix"></div>');

    BunglowListView.prototype.initialize = function() {
      this.$el.prop("id", 'unit' + this.model.get("id"));
      return this.classname = '';
    };

    BunglowListView.prototype.tagName = 'li';

    BunglowListView.prototype.className = 'unit blocks';

    BunglowListView.prototype.serializeData = function() {
      var availability, data, response, status;
      data = BunglowListView.__super__.serializeData.call(this);
      response = window.unit.getUnitDetails(this.model.get('id'));
      data.unit_type = response[1].get('name');
      data.super_built_up_area = response[0].get('super_built_up_area');
      availability = this.model.get('availability');
      status = s.decapitalize(availability);
      this.model.set('status', status);
      data.price = window.numDifferentiation(response[3]);
      return data;
    };

    BunglowListView.prototype.onShow = function() {
      var availability, classname, id, status;
      id = this.model.get('id');
      availability = this.model.get('availability');
      status = s.decapitalize(availability);
      classname = $('#unit' + id).attr('class');
      return $('#unit' + id).attr('class', classname + ' ' + status);
    };

    BunglowListView.prototype.events = {
      'mouseover': function(e) {
        var html, id;
        html = this.getHtml(this.model.get('id'));
        id = this.model.get('id');
        $('#' + id + '.villa').attr('class', 'layer villa svg_active ' + this.model.get('status'));
        $('#unit' + id).attr('class', 'unit blocks' + ' ' + this.model.get('status') + ' active');
        $('#' + id).tooltipster('content', html);
        return $('#' + id).tooltipster('show');
      },
      'mouseout': function(e) {
        var id;
        id = this.model.get('id');
        $('#' + id + '.villa').attr('class', 'layer villa ' + this.model.get('status'));
        $('#unit' + id).attr('class', 'unit blocks ' + ' ' + this.model.get('status'));
        return $('#' + id).tooltipster('hide');
      },
      'click': function(e) {
        var id, unit;
        id = this.model.get('id');
        unit = unitCollection.findWhere({
          id: id
        });
        if (!(_.isUndefined(unit)) && unit.get('availability') === 'available') {
          $('.layer').tooltipster('hide');
          $('svg').attr('class', 'zoom');
          $('#spritespin').addClass('zoom');
          $('.us-right-content').addClass('fadeOut');
          $('.cf-loader').removeClass('hidden');
          return setTimeout(function(x) {
            return CommonFloor.navigate('/unit-view/' + id, {
              trigger: true
            });
          }, 500);
        }
      }
    };

    BunglowListView.prototype.iniTooltip = function(id) {
      return $('#' + id).trigger('click');
    };

    BunglowListView.prototype.getHtml = function(id) {
      var availability, html, price, response, unit, unitMaster;
      html = "";
      unit = unitCollection.findWhere({
        id: id
      });
      unitMaster = unitMasterCollection.findWhere({
        id: id
      });
      if (unit === void 0) {
        html += '<div class="svg-info"> <div class="action-bar2"> <div class="txt-dft"></div> </div> <h5 class="pull-left">Villa details not entered </h5> </div>';
        $('.layer').tooltipster('content', html);
        return;
      }
      response = window.unit.getUnitDetails(id);
      price = window.numDifferentiation(response[3]);
      availability = unit.get('availability');
      availability = s.decapitalize(availability);
      html = "";
      html += '<div class="svg-info ' + availability + ' "> <div class="action-bar"> <div class="villa"></div> </div> <div class="pull-left"> <h4 class="m-t-0">' + unit.get('unit_name') + '</h4> <div class="details"> <ul> <li> <h5 class="inline-block">' + response[1].get('name') + '</h5> <span> - ' + response[0].get('super_built_up_area') + ' ' + project.get('measurement_units') + '</span> <!--<label>Variant</label> - ' + response[0].get('unit_variant_name') + '--> </li> </ul> <div class="price text-primary"> <span class="text-primary icon-rupee-icn"></span>' + price + '</div> </div> </div>';
      if (availability === 'available') {
        html += '<div class="circle"> <a href="#unit-view/' + id + '" class="arrow-up icon-chevron-right"></a> </div> </div>';
      } else {
        html += '</div>';
      }
      return html;
    };

    return BunglowListView;

  })(Marionette.ItemView);

  VillaEmptyView = (function(superClass) {
    extend(VillaEmptyView, superClass);

    function VillaEmptyView() {
      return VillaEmptyView.__super__.constructor.apply(this, arguments);
    }

    VillaEmptyView.prototype.template = Handlebars.compile('	No units added');

    return VillaEmptyView;

  })(Marionette.ItemView);

  MasterBunglowListView = (function(superClass) {
    extend(MasterBunglowListView, superClass);

    function MasterBunglowListView() {
      return MasterBunglowListView.__super__.constructor.apply(this, arguments);
    }

    MasterBunglowListView.prototype.template = Handlebars.compile('	<div id="trig" class="toggle-button"></div> <div id="view_toggle" class="toggle-view-button map"></div> <div class="list-view-container w-map animated fadeIn"> <div class="text-center"> <ul class="prop-select"> <li class="prop-type buildings hidden">Buildings</li> <li class="prop-type Villas active ">Villas</li> <li class="prop-type Plots hidden">Plots</li> </ul> </div> <div class="advncd-filter-wrp  unit-list"> <div class="legend clearfix"> <ul> <!--<li class="available">AVAILABLE</li>--> <li class="sold">Not Available</li> <!--<li class="blocked">BLOCKED</li>--> <li class="na">Not in Selection</li> </ul> </div> <p class="text-center help-text">Hover on the units for more details</p> <!--<div class="blck-wrap title-row"> <div class="row"> <div class="col-sm-4"> <h5 class="accord-head">Villa No</h5> </div> <div class="col-sm-4"> <h5 class="accord-head">Type</h5> </div> <div class="col-sm-4"> <h5 class="accord-head">Area</h5> </div> </div> </div>--> <ul class="units two"> </ul> <div class="clearfix"></div> </div> </div>');

    MasterBunglowListView.prototype.childView = BunglowListView;

    MasterBunglowListView.prototype.childViewContainer = '.units';

    MasterBunglowListView.prototype.ui = {
      viewtog: '#view_toggle',
      trig: '#trig'
    };

    MasterBunglowListView.prototype.events = {
      'click @ui.trig': function(e) {
        return $('.list-container').toggleClass('closed');
      },
      'click @ui.viewtog': function(e) {
        $('.us-left-content').toggleClass('not-visible visible');
        return $('.us-right-content').toggleClass('not-visible visible');
      },
      'click .buildings': function(e) {
        var data, units;
        units = buildingCollection;
        data = {};
        data.units = units;
        data.type = 'building';
        this.region = new Marionette.Region({
          el: '#leftregion'
        });
        return new CommonFloor.MasterBuildingListCtrl({
          region: this.region
        });
      },
      'click .Villas': function(e) {
        var data, units;
        units = bunglowVariantCollection.getBunglowUnits();
        data = {};
        data.units = units;
        data.type = 'villa';
        this.region = new Marionette.Region({
          el: '#leftregion'
        });
        return new CommonFloor.MasterBunglowListCtrl({
          region: this.region
        });
      },
      'click .Plots': function(e) {
        var data, units;
        units = plotVariantCollection.getPlotUnits();
        data = {};
        data.units = units;
        data.type = 'plot';
        this.region = new Marionette.Region({
          el: '#leftregion'
        });
        return new CommonFloor.MasterPlotListCtrl({
          region: this.region
        });
      }
    };

    MasterBunglowListView.prototype.onShow = function() {
      if (buildingCollection.length !== 0) {
        $('.buildings').removeClass('hidden');
      }
      if (plotVariantCollection.length !== 0) {
        $('.Plots').removeClass('hidden');
      }
      if ($(window).width() > 991) {
        return $('.units').mCustomScrollbar({
          theme: 'cf-scroll'
        });
      }
    };

    return MasterBunglowListView;

  })(Marionette.CompositeView);

  CommonFloor.MasterBunglowListCtrl = (function(superClass) {
    extend(MasterBunglowListCtrl, superClass);

    function MasterBunglowListCtrl() {
      this.loadController = bind(this.loadController, this);
      return MasterBunglowListCtrl.__super__.constructor.apply(this, arguments);
    }

    MasterBunglowListCtrl.prototype.initialize = function() {
      var newUnits, unitsCollection, view;
      newUnits = bunglowVariantCollection.getBunglowUnits();
      unitsCollection = new Backbone.Collection(newUnits);
      this.view = view = new MasterBunglowListView({
        collection: unitsCollection
      });
      return this.show(view);
    };

    MasterBunglowListCtrl.prototype.loadController = function(data) {
      return Backbone.trigger("load:units", data);
    };

    return MasterBunglowListCtrl;

  })(Marionette.RegionController);

}).call(this);

//# sourceMappingURL=../../frontend/master-list-bunglows/master.list.bunglows.controller.js.map
(function() {
  var BuildingEmptyView, ListItemView, MasterBuildingListView,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ListItemView = (function(superClass) {
    extend(ListItemView, superClass);

    function ListItemView() {
      return ListItemView.__super__.constructor.apply(this, arguments);
    }

    ListItemView.prototype.template = Handlebars.compile('<div class="bldg-img"></div> <div class="info"> <h2 class="m-b-5">{{building_name}}</h2> <div class="floors"><span>{{floors}}</span> floors</div> </div> <div class="clearfix"></div> <div class="unit-type-info"> <ul> {{#types}} <li> {{name}}<!--: <span>{{units}}</span>--> </li> {{/types}} </ul> <span class="area {{areaname}}">{{area}} {{measurement_units}}</span> <div class="text-primary price {{classname}}">Starting price <span class="icon-rupee-icn"></span>{{price}}</div> </div>');

    ListItemView.prototype.tagName = 'li';

    ListItemView.prototype.className = 'bldg blocks';

    ListItemView.prototype.initialize = function() {
      return this.$el.prop("id", 'bldg' + this.model.get("id"));
    };

    ListItemView.prototype.serializeData = function() {
      var areaname, cost, data, floors, id, response, types;
      data = ListItemView.__super__.serializeData.call(this);
      id = this.model.get('id');
      response = building.getUnitTypes(id);
      types = building.getUnitTypesCount(id, response);
      floors = this.model.get('floors');
      areaname = "";
      data.area = building.getMinimumArea(id);
      if (data.area === 0) {
        areaname = 'hidden';
      }
      data.areaname = areaname;
      cost = building.getMinimumCost(id);
      data.classname = "";
      if (cost === 0) {
        data.classname = 'hidden';
      }
      data.price = window.numDifferentiation(cost);
      data.floors = this.model.get('no_of_floors');
      data.types = types;
      data.measurement_units = project.get('measurement_units');
      return data;
    };

    ListItemView.prototype.events = {
      'mouseover': function(e) {
        var html, id;
        this.iniTooltip(this.model.get('id'));
        html = this.getHtml(this.model.get('id'));
        id = this.model.get('id');
        $('#' + id + '.building').attr('class', 'layer building svg_active');
        $('#bldg' + id).attr('class', 'bldg blocks active');
        $('#' + id).tooltipster('content', html);
        return $('#' + id).tooltipster('show');
      },
      'mouseout': function(e) {
        var id;
        id = this.model.get('id');
        $('#' + id + '.building').attr('class', 'layer building');
        $('#bldg' + id).attr('class', 'bldg blocks');
        return $('#' + id).tooltipster('hide');
      },
      'click ': function(e) {
        var buildingModel, id, units;
        id = this.model.get('id');
        units = unitCollection.where({
          'building_id': id
        });
        if (units.length === 0) {
          return;
        }
        buildingModel = buildingCollection.findWhere({
          'id': id
        });
        $('.layer').tooltipster('hide');
        $('svg').attr('class', 'zoom');
        $('#spritespin').addClass('zoom');
        $('.us-right-content').addClass('fadeOut');
        $('.cf-loader').removeClass('hidden');
        return setTimeout(function(x) {
          if (Object.keys(buildingModel.get('building_master')).length === 0) {
            return CommonFloor.navigate('/building/' + id + '/apartments', true);
          } else {
            return CommonFloor.navigate('/building/' + id + '/master-view', true);
          }
        }, 500);
      }
    };

    ListItemView.prototype.iniTooltip = function(id) {
      return $('#' + id).trigger('mouseover');
    };

    ListItemView.prototype.getHtml = function(id) {
      var availability, buildingModel, floors, html, minprice, price, response, unit, unitTypes, url;
      html = "";
      id = parseInt(id);
      buildingModel = buildingCollection.findWhere({
        'id': id
      });
      if (buildingModel === void 0) {
        html = '<div class="svg-info"> <div class="action-bar2"> <div class="txt-dft"></div> </div> <h5 class="pull-left"> Building details not entered </h5> </div>';
        $('.layer').tooltipster('content', html);
        return;
      }
      floors = buildingModel.get('floors');
      floors = Object.keys(floors).length;
      unitTypes = building.getUnitTypes(id);
      response = building.getUnitTypesCount(id, unitTypes);
      minprice = building.getMinimumCost(id);
      price = window.numDifferentiation(minprice);
      unit = unitCollection.where({
        'building_id': id,
        'availability': 'available'
      });
      if (unit.length > 0) {
        availability = ' available';
      } else {
        availability = ' sold';
      }
      html = '<div class="svg-info ' + availability + ' "> <div class="action-bar"> <div class="building"></div> </div> <div class="pull-left"> <h4 class="m-t-0 m-b-5">' + buildingModel.get('building_name') + '	<label class="text-muted">(' + floors + ' floors)</label></h4> <div class="details"> <div class="price"> Starting from <span class="text-primary"><span class="icon-rupee-icn"></span> ' + price + '</span> </div> <ul class="bldg">';
      $.each(response, function(index, value) {
        return html += '<li> <h5 class="m-t-0 m-b-0">' + value.name + '</h5> <span>' + value.units + ' Available</span> </li>';
      });
      if (unit.length > 0) {
        if (Object.keys(buildingModel.get('building_master')).length === 0) {
          url = '/building/' + id + '/apartments';
        } else {
          url = '/building/' + id + '/master-view';
        }
        html += '</ul> </div> <a href="#' + url + '" class="view-unit"> <div class="circle"> <span class="arrow-up icon-chevron-right"></span> </div> </a> </div> </div>';
      }
      return html;
    };

    return ListItemView;

  })(Marionette.ItemView);

  BuildingEmptyView = (function(superClass) {
    extend(BuildingEmptyView, superClass);

    function BuildingEmptyView() {
      return BuildingEmptyView.__super__.constructor.apply(this, arguments);
    }

    BuildingEmptyView.prototype.template = 'No units added';

    return BuildingEmptyView;

  })(Marionette.ItemView);

  MasterBuildingListView = (function(superClass) {
    extend(MasterBuildingListView, superClass);

    function MasterBuildingListView() {
      return MasterBuildingListView.__super__.constructor.apply(this, arguments);
    }

    MasterBuildingListView.prototype.template = Handlebars.compile('		<div id="trig" class="toggle-button"></div> <div id="view_toggle" class="toggle-view-button map"></div> <div class="list-view-container w-map animated fadeIn"> <!--<div class="controls map-View"> <div class="toggle"> <a href="#/master-view" class="map">Map</a><a href="#/list-view" class="list active">List</a> </div> </div>--> <div class="text-center"> <ul class="prop-select"> <li class="prop-type buildings active">Buildings</li> <li class="prop-type Villas hidden">Villas</li> <li class="prop-type Plots hidden">Plots</li> </ul> </div> <div class="bldg-list"> <p class="text-center help-text">Hover on the buildings for more details</p> <ul class="units one"> </ul> <div class="clearfix"></div> </div> </div>');

    MasterBuildingListView.prototype.childView = ListItemView;

    MasterBuildingListView.prototype.childViewContainer = '.units';

    MasterBuildingListView.prototype.ui = {
      viewtog: '#view_toggle',
      trig: '#trig'
    };

    MasterBuildingListView.prototype.events = {
      'click @ui.trig': function(e) {
        return $('.list-container').toggleClass('closed');
      },
      'click @ui.viewtog': function(e) {
        $('.us-left-content').toggleClass('not-visible visible');
        return $('.us-right-content').toggleClass('not-visible visible');
      },
      'click .buildings': function(e) {
        var data, units;
        units = buildingCollection;
        data = {};
        data.units = units;
        data.type = 'building';
        this.region = new Marionette.Region({
          el: '#leftregion'
        });
        return new CommonFloor.MasterBuildingListCtrl({
          region: this.region
        });
      },
      'click .Villas': function(e) {
        var data, units;
        units = bunglowVariantCollection.getBunglowUnits();
        data = {};
        data.units = units;
        data.type = 'villa';
        this.region = new Marionette.Region({
          el: '#leftregion'
        });
        return new CommonFloor.MasterBunglowListCtrl({
          region: this.region
        });
      },
      'click .Plots': function(e) {
        var data, units;
        units = plotVariantCollection.getPlotUnits();
        data = {};
        data.units = units;
        data.type = 'plot';
        this.region = new Marionette.Region({
          el: '#leftregion'
        });
        return new CommonFloor.MasterPlotListCtrl({
          region: this.region
        });
      }
    };

    MasterBuildingListView.prototype.onShow = function() {
      if (bunglowVariantCollection.length !== 0) {
        $('.Villas').removeClass('hidden');
      }
      if (plotVariantCollection.length !== 0) {
        $('.Plots').removeClass('hidden');
      }
      if ($(window).width() > 991) {
        return $('.units').mCustomScrollbar({
          theme: 'cf-scroll'
        });
      }
    };

    return MasterBuildingListView;

  })(Marionette.CompositeView);

  CommonFloor.MasterBuildingListCtrl = (function(superClass) {
    extend(MasterBuildingListCtrl, superClass);

    function MasterBuildingListCtrl() {
      this.loadController = bind(this.loadController, this);
      return MasterBuildingListCtrl.__super__.constructor.apply(this, arguments);
    }

    MasterBuildingListCtrl.prototype.initialize = function() {
      var view;
      this.view = view = new MasterBuildingListView({
        collection: buildingCollection
      });
      return this.show(view);
    };

    MasterBuildingListCtrl.prototype.loadController = function(data) {
      return Backbone.trigger("load:units", data);
    };

    return MasterBuildingListCtrl;

  })(Marionette.RegionController);

}).call(this);

//# sourceMappingURL=../../frontend/master-list-buildings/master.list.buildings.controller.js.map
(function() {
  var MasterPlotListView, PlotEmptyView, PlotListView,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  PlotListView = (function(superClass) {
    extend(PlotListView, superClass);

    function PlotListView() {
      return PlotListView.__super__.constructor.apply(this, arguments);
    }

    PlotListView.prototype.template = Handlebars.compile(' <div class="info"> <h2 class="m-b-5">{{unit_name}}</h2> <div class="floors"><span>{{unit_type}}</span></div> </div> <div class="clearfix"></div> <div class="unit-type-info"> <div class=" text-primary price {{classname}}"> <span class="icon-rupee-icn"></span>{{price}}</div> </div>');

    PlotListView.prototype.initialize = function() {
      this.$el.prop("id", 'unit' + this.model.get("id"));
      return this.classname = '';
    };

    PlotListView.prototype.tagName = 'li';

    PlotListView.prototype.className = 'bldg blocks';

    PlotListView.prototype.serializeData = function() {
      var availability, data, response, status;
      data = PlotListView.__super__.serializeData.call(this);
      response = window.unit.getUnitDetails(this.model.get('id'));
      data.unit_type = response[1].get('name');
      data.super_built_up_area = response[0].get('super_built_up_area');
      availability = this.model.get('availability');
      status = s.decapitalize(availability);
      this.model.set('status', status);
      data.price = window.numDifferentiation(response[3]);
      return data;
    };

    PlotListView.prototype.onShow = function() {
      var availability, classname, html, id, status;
      html = this.getHtml(this.model.get('id'));
      id = this.model.get('id');
      availability = this.model.get('availability');
      status = s.decapitalize(availability);
      classname = $('#unit' + id).attr('class');
      return $('#unit' + id).attr('class', classname + ' ' + status);
    };

    PlotListView.prototype.events = {
      'mouseover': function(e) {
        var html, id;
        html = this.getHtml(this.model.get('id'));
        id = this.model.get('id');
        $('#' + id + '.plot').attr('class', 'layer plot svg_active ' + this.model.get('status'));
        $('#unit' + id).attr('class', 'bldg blocks' + ' ' + this.model.get('status') + ' active');
        $('#' + id).tooltipster('content', html);
        return $('#' + id).tooltipster('show');
      },
      'mouseout': function(e) {
        var id;
        id = this.model.get('id');
        $('#' + id + '.plot').attr('class', 'layer plot ' + this.model.get('status'));
        $('#unit' + id).attr('class', 'bldg blocks' + ' ' + this.model.get('status'));
        return $('#' + id).tooltipster('hide');
      },
      'click': function(e) {
        var id, unit;
        id = this.model.get('id');
        unit = unitCollection.findWhere({
          id: id
        });
        if (!(_.isUndefined(unit)) && unit.get('availability') === 'available') {
          $('.layer').tooltipster('hide');
          $('svg').attr('class', 'zoom');
          $('#spritespin').addClass('zoom');
          $('.us-right-content').addClass('fadeOut');
          $('.cf-loader').removeClass('hidden');
          return setTimeout(function(x) {
            return CommonFloor.navigate('/unit-view/' + id, {
              trigger: true
            });
          }, 500);
        }
      }
    };

    PlotListView.prototype.iniTooltip = function(id) {
      return $('#' + id).trigger('click');
    };

    PlotListView.prototype.getHtml = function(id) {
      var availability, html, price, response, unit, unitMaster;
      html = "";
      id = parseInt(id);
      unit = unitCollection.findWhere({
        id: id
      });
      unitMaster = unitMasterCollection.findWhere({
        id: id
      });
      if (unit === void 0 && unitMaster !== void 0) {
        html = '<div class="svg-info"> <div class="action-bar2"> <div class="txt-dft"></div> </div> <h5 class="pull-left"> Not in selection </h5> </div>';
        $('.layer').tooltipster('content', html);
        return;
      }
      if (unit === void 0) {
        html += '<div class="svg-info"> <div class="action-bar2"> <div class="txt-dft"></div> </div> <h5 class="pull-left"> Plot details not entered </h5> </div>';
        $('.layer').tooltipster('content', html);
        return;
      }
      response = window.unit.getUnitDetails(id);
      price = window.numDifferentiation(response[3]);
      availability = unit.get('availability');
      availability = s.decapitalize(availability);
      html = "";
      html += '<div class="svg-info ' + availability + ' "> <div class="action-bar"> <div class="plot"></div> </div> <div class="pull-left"> <h4 class="m-t-0">' + unit.get('unit_name') + '</h4> <div class="details"> <ul> <li> <h5 class="inline-block">' + response[1].get('name') + '</h5> <span> - ' + response[0].get('super_built_up_area') + ' ' + project.get('measurement_units') + '</span> <!--<label>Variant</label> - ' + response[0].get('unit_variant_name') + '--> </li> </ul> <div class="price text-primary"> <span class="text-primary icon-rupee-icn"></span>' + price + '</div> </div> </div>';
      if (availability === 'available') {
        html += '<div class="circle"> <a href="#unit-view/' + id + '" class="arrow-up icon-chevron-right"></a> </div> </div>';
      } else {
        html += '</div>';
      }
      return html;
    };

    return PlotListView;

  })(Marionette.ItemView);

  PlotEmptyView = (function(superClass) {
    extend(PlotEmptyView, superClass);

    function PlotEmptyView() {
      return PlotEmptyView.__super__.constructor.apply(this, arguments);
    }

    PlotEmptyView.prototype.template = 'No units added';

    return PlotEmptyView;

  })(Marionette.ItemView);

  MasterPlotListView = (function(superClass) {
    extend(MasterPlotListView, superClass);

    function MasterPlotListView() {
      return MasterPlotListView.__super__.constructor.apply(this, arguments);
    }

    MasterPlotListView.prototype.template = Handlebars.compile(' <div id="trig" class="toggle-button"></div> <div id="view_toggle" class="toggle-view-button map"></div> <div class="list-view-container w-map animated fadeIn"> <!--<div class="controls map-View"> <div class="toggle"> <a href="#/master-view" class="map">Map</a><a href="#/list-view" class="list active">List</a> </div> </div>--> <div class="text-center"> <ul class="prop-select"> <li class="prop-type buildings hidden">Buildings</li> <li class="prop-type Villas  hidden ">Villas</li> <li class="prop-type Plots active">Plots</li> </ul> </div> <div class="bldg-list"> <div class="legend clearfix"> <ul> <li class="available">AVAILABLE</li> <li class="sold">SOLD</li> <li class="blocked">BLOCKED</li> <li class="na">N/A</li> </ul> </div> <p class="text-center help-text">Hover on the units for more details</p> <!--<div class="blck-wrap title-row"> <div class="row"> <div class="col-sm-4"> <h5 class="accord-head">Villa No</h5> </div> <div class="col-sm-4"> <h5 class="accord-head">Type</h5> </div> <div class="col-sm-4"> <h5 class="accord-head">Area</h5> </div> </div> </div>--> <ul class="units one"> </ul> <div class="clearfix"></div> </div> </div>');

    MasterPlotListView.prototype.childView = PlotListView;

    MasterPlotListView.prototype.childViewContainer = '.units';

    MasterPlotListView.prototype.ui = {
      viewtog: '#view_toggle',
      trig: '#trig'
    };

    MasterPlotListView.prototype.events = {
      'click @ui.trig': function(e) {
        return $('.list-container').toggleClass('closed');
      },
      'click @ui.viewtog': function(e) {
        $('.us-left-content').toggleClass('not-visible visible');
        return $('.us-right-content').toggleClass('not-visible visible');
      },
      'click .buildings': function(e) {
        var data, units;
        units = buildingCollection;
        data = {};
        data.units = units;
        data.type = 'building';
        this.region = new Marionette.Region({
          el: '#leftregion'
        });
        return new CommonFloor.MasterBuildingListCtrl({
          region: this.region
        });
      },
      'click .Villas': function(e) {
        var data, units;
        units = bunglowVariantCollection.getBunglowUnits();
        data = {};
        data.units = units;
        data.type = 'villa';
        this.region = new Marionette.Region({
          el: '#leftregion'
        });
        return new CommonFloor.MasterBunglowListCtrl({
          region: this.region
        });
      },
      'click .Plots': function(e) {
        var data, units;
        units = plotVariantCollection.getPlotUnits();
        data = {};
        data.units = units;
        data.type = 'plot';
        this.region = new Marionette.Region({
          el: '#leftregion'
        });
        return new CommonFloor.MasterPlotListCtrl({
          region: this.region
        });
      }
    };

    MasterPlotListView.prototype.onShow = function() {
      if (buildingCollection.length !== 0) {
        $('.buildings').removeClass('hidden');
      }
      if (bunglowVariantCollection.length !== 0) {
        $('.Villas').removeClass('hidden');
      }
      if ($(window).width() > 991) {
        return $('.units').mCustomScrollbar({
          theme: 'cf-scroll'
        });
      }
    };

    return MasterPlotListView;

  })(Marionette.CompositeView);

  CommonFloor.MasterPlotListCtrl = (function(superClass) {
    extend(MasterPlotListCtrl, superClass);

    function MasterPlotListCtrl() {
      return MasterPlotListCtrl.__super__.constructor.apply(this, arguments);
    }

    MasterPlotListCtrl.prototype.initialize = function() {
      var newUnits, unitsCollection, view;
      newUnits = plotVariantCollection.getPlotUnits();
      unitsCollection = new Backbone.Collection(newUnits);
      this.view = view = new MasterPlotListView({
        collection: unitsCollection
      });
      return this.show(view);
    };

    return MasterPlotListCtrl;

  })(Marionette.RegionController);

}).call(this);

//# sourceMappingURL=../../frontend/master-list-plots/master.list.plots.controller.js.map
(function() {
  var PlotEmptyView, PlotItemView, PlotView,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  PlotItemView = (function(superClass) {
    extend(PlotItemView, superClass);

    function PlotItemView() {
      return PlotItemView.__super__.constructor.apply(this, arguments);
    }

    PlotItemView.prototype.template = Handlebars.compile('<li class="unit blocks {{status}}"> <div class="col-sm-2 col-xs-2"> <i class="plot-ico m-t-10 "></i> </div> <div class="col-sm-10 col-xs-10"> <div class="pull-left info"> <label>{{unit_name}}</label> ({{unit_type}} {{super_built_up_area}} {{measurement_units}}) </div> <div class="clearfix"></div> <div class="text-primary m-t-5"> <span class="icon-rupee-icn"></span>{{price}} </div> </div> </li>');

    PlotItemView.prototype.initialize = function() {
      return this.$el.prop("id", 'unit' + this.model.get("id"));
    };

    PlotItemView.prototype.serializeData = function() {
      var availability, data, response;
      data = PlotItemView.__super__.serializeData.call(this);
      response = window.unit.getUnitDetails(this.model.get('id'));
      data.unit_type = response[1].get('name');
      data.super_built_up_area = response[0].get('super_built_up_area');
      availability = this.model.get('availability');
      data.status = s.decapitalize(availability);
      this.model.set('status', status);
      data.price = window.numDifferentiation(response[3]);
      this.model.set('status', data.status);
      data.measurement_units = project.get('measurement_units');
      return data;
    };

    PlotItemView.prototype.events = {
      'click .unit': function(e) {
        if (this.model.get('status') === 'available') {
          return CommonFloor.navigate('/unit-view/' + this.model.get('id'), true);
        }
      }
    };

    return PlotItemView;

  })(Marionette.ItemView);

  PlotEmptyView = (function(superClass) {
    extend(PlotEmptyView, superClass);

    function PlotEmptyView() {
      return PlotEmptyView.__super__.constructor.apply(this, arguments);
    }

    PlotEmptyView.prototype.template = 'No units added';

    return PlotEmptyView;

  })(Marionette.ItemView);

  PlotView = (function(superClass) {
    extend(PlotView, superClass);

    function PlotView() {
      return PlotView.__super__.constructor.apply(this, arguments);
    }

    PlotView.prototype.template = Handlebars.compile('<div class="col-md-12 us-right-content"> <div class="list-view-container animated fadeInUp"> <!--<div class="controls map-View"> <div class="toggle"> <a href="#/master-view" class="map">Map</a><a href="#/list-view" class="list active">List</a> </div> </div>--> <span class="pull-left top-legend"> <ul> <li class="na">N/A</li> </ul> </span> <h2 class="text-center">List of Plots</h2> <hr class="margin-none"> <div class="text-center"> <ul class="prop-select"> <li class="prop-type buildings hidden">Buildings</li> <li class="prop-type Villas hidden ">Villas</li> <li class="prop-type Plots active">Plots</li> </ul> </div> <div class="legend"> <ul> <li class="available">AVAILABLE</li> <li class="sold">SOLD</li> <li class="blocked">BLOCKED</li> <li class="na">N/A</li> </ul> </div> <div class="clearfix"></div> <div class="villa-list"> <ul class="units"> </ul> </div> </div> </div>');

    PlotView.prototype.childView = PlotItemView;

    PlotView.prototype.childViewContainer = '.units';

    PlotView.prototype.events = {
      'click .buildings': function(e) {
        var data, units;
        units = buildingCollection;
        data = {};
        data.units = units;
        data.type = 'building';
        this.region = new Marionette.Region({
          el: '#centerregion'
        });
        return new CommonFloor.BuildingListCtrl({
          region: this.region
        });
      },
      'click .Villas': function(e) {
        var data, units;
        units = bunglowVariantCollection.getBunglowUnits();
        data = {};
        data.units = units;
        data.type = 'villa';
        this.region = new Marionette.Region({
          el: '#centerregion'
        });
        return new CommonFloor.VillaListCtrl({
          region: this.region
        });
      },
      'click .Plots': function(e) {
        var data, units;
        units = plotVariantCollection.getPlotUnits();
        data = {};
        data.units = units;
        data.type = 'plot';
        this.region = new Marionette.Region({
          el: '#centerregion'
        });
        return new CommonFloor.PlotListCtrl({
          region: this.region
        });
      }
    };

    PlotView.prototype.onShow = function() {
      if (buildingCollection.length !== 0) {
        $('.buildings').removeClass('hidden');
      }
      if (bunglowVariantCollection.length !== 0) {
        return $('.Villas').removeClass('hidden');
      }
    };

    return PlotView;

  })(Marionette.CompositeView);

  CommonFloor.PlotListCtrl = (function(superClass) {
    extend(PlotListCtrl, superClass);

    function PlotListCtrl() {
      this.loadController = bind(this.loadController, this);
      return PlotListCtrl.__super__.constructor.apply(this, arguments);
    }

    PlotListCtrl.prototype.initialize = function() {
      var newUnits, unitsCollection, view;
      newUnits = plotVariantCollection.getPlotUnits();
      unitsCollection = new Backbone.Collection(newUnits);
      this.view = view = new PlotView({
        collection: unitsCollection
      });
      this.listenTo(this.view, "load:units", this.loadController);
      return this.show(view);
    };

    PlotListCtrl.prototype.loadController = function(data) {
      return Backbone.trigger("load:units", data);
    };

    return PlotListCtrl;

  })(Marionette.RegionController);

}).call(this);

//# sourceMappingURL=../../frontend/project-list-view/plot.list.controller.js.map
(function() {
  _.extend(Marionette.AppStates.prototype, {
    history: [],
    storeRoute: function() {
      var url;
      url = Backbone.history.fragment;
      if ($.inArray(url, this.history) === -1) {
        return this.history.push(Backbone.history.fragment);
      }
    },
    previous: function() {
      if (this.history.length > 1) {
        return this.history[this.history.length - 1];
      }
      if (this.history.length === 1) {
        return this.history[0];
      }
    }
  });

}).call(this);

//# sourceMappingURL=../frontend/router.js.map
(function() {
  jQuery(document).ready(function($) {
    CommonFloor.state('project', {
      url: '/',
      sections: {
        'top': {
          ctrl: 'TopCtrl'
        },
        'left': {
          ctrl: 'LeftCtrl'
        },
        'center': {
          ctrl: 'CenterCtrl'
        }
      }
    });
    CommonFloor.state('projectMaster', {
      url: '/master-view',
      sections: {
        'top': {
          ctrl: 'TopMasterCtrl'
        },
        'left': {
          ctrl: 'LeftMasterCtrl'
        },
        'center': {
          ctrl: 'CenterMasterCtrl'
        },
        'filter': {
          ctrl: 'FilterMasterCtrl'
        }
      }
    });
    CommonFloor.state('unit', {
      url: '/unit-view/:id',
      sections: {
        'top': {
          ctrl: 'TopUnitCtrl'
        },
        'left': {
          ctrl: 'LeftUnitCtrl'
        },
        'center': {
          ctrl: 'CenterUnitCtrl'
        }
      }
    });
    CommonFloor.state('projectList', {
      url: '/list-view',
      sections: {
        'top': {
          ctrl: 'TopListCtrl'
        },
        'center': {
          ctrl: 'CenterListCtrl'
        },
        'filter': {
          ctrl: 'FilterMasterCtrl'
        }
      }
    });
    CommonFloor.state('apartmentsList', {
      url: '/building/:id/apartments',
      sections: {
        'top': {
          ctrl: 'TopApartmentCtrl'
        },
        'center': {
          ctrl: 'CenterApartmentCtrl'
        },
        'filter': {
          ctrl: 'FilterApartmentCtrl'
        }
      }
    });
    CommonFloor.state('apartmentsMaster', {
      url: '/building/:id/master-view',
      sections: {
        'top': {
          ctrl: 'TopApartmentMasterCtrl'
        },
        'left': {
          ctrl: 'LeftApartmentMasterCtrl'
        },
        'center': {
          ctrl: 'CenterApartmentMasterCtrl'
        },
        'filter': {
          ctrl: 'FilterApartmentCtrl'
        }
      }
    });
    CommonFloor.addInitializer(function() {
      Backbone.history.start();
      return CommonFloor.router.storeRoute();
    });
    return CommonFloor.start();
  });

}).call(this);

//# sourceMappingURL=../frontend/application.js.map
//# sourceMappingURL=application.min.js.map