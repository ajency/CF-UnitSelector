{"version":3,"sources":["frontend/common/common.coffee"],"names":[],"mappings":"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","file":"frontend/common/common.js","sourceRoot":"/source/","sourcesContent":["#No Found Controller and veiw\r\nclass CommonFloor.NothingFoundView extends Marionette.ItemView\r\n\t\r\n\ttemplate : '#noFound-template'\r\n\r\nclass CommonFloor.NothingFoundCtrl extends Marionette.RegionController\r\n\r\n\tinitialize:->\r\n\t\t@show new CommonFloor.NothingFoundView\r\n\r\n#No Found Controller and veiw\r\nclass CommonFloor.NoUnitsView extends Marionette.ItemView\r\n\t\r\n\ttemplate : '<div>\r\n\t\t\t\t\t<div class=\"list-view-container w-map animated fadeIn\">\r\n\t\t\t\t\t\t<div class=\"text-center\" id=\"searchSorryPageWidget\">\r\n\t\t\t\t\t\t\t<div class=\"m-t-10 bldg-list\">\r\n\t\t\t\t\t\t\t\t<span class=\"icon-wondering\"></span>\r\n\t\t\t\t\t\t\t\t<div class=\"m-t-10\">Sorry! We havent found any properties matching your search.</div>\r\n\t\t\t\t\t\t\t\t<div>Please retry with different search options.</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>'\r\n\r\nclass CommonFloor.NoUnitsCtrl extends Marionette.RegionController\r\n\r\n\tinitialize:->\r\n\t\t@show new CommonFloor.NoUnitsView\r\n\r\n#api required to load second step\r\nCommonFloor.loadJSONData = ()->\r\n\r\n\t$.ajax\r\n\t\ttype : 'GET',\r\n\t\turl  : BASERESTURL+'/project/'+\tPROJECTID+'/step-two'\r\n\t\tasync : false\r\n\t\tsuccess :(response)->\r\n\r\n\t\t\t#parsing the integer fields \r\n\t\t\tresponse = window.convertToInt(response)\r\n\t\t\tresponse = response.data\r\n\t\t\tbunglowVariantCollection.setBunglowVariantAttributes(response.bunglow_variants)\r\n\t\t\tsettings.setSettingsAttributes(response.settings)\r\n\t\t\tunitTypeCollection.setUnitTypeAttributes(response.unit_types)\r\n\t\t\tbuildingCollection.setBuildingAttributes(response.buildings)\r\n\t\t\tapartmentVariantCollection.setApartmentVariantAttributes(response.apartment_variants)\r\n\t\t\tfloorLayoutCollection.setFloorLayoutAttributes(response.floor_layout)\r\n\t\t\twindow.propertyTypes = response.property_types\r\n\t\t\tplotVariantCollection.setPlotVariantAttributes(response.plot_variants)\r\n\t\t\tunitCollection.setUnitAttributes(response.units)\r\n\t\t\t\r\n\r\n\t\t\t\r\n\t\terror :(response)->\r\n\t\t\t@region =  new Marionette.Region el : '#noFound-template'\r\n\t\t\tnew CommonFloor.ProjectCtrl region : @region\r\n\t\t\t\r\n\r\n#find the property type with maximum number of units\r\nCommonFloor.propertyMaxUnits = ()->\r\n\tRouter = []\r\n\tRouter.push \r\n\t\t'type'  : 'bunglows'\r\n\t\t'count' :bunglowVariantCollection.getBunglowUnits()\r\n\tRouter.push \r\n\t\t'type'  : 'building'\r\n\t\t'count' :apartmentVariantCollection.getApartmentUnits()\r\n\tRouter.push \r\n\t\t'type'  : 'plot'\r\n\t\t'count' :plotVariantCollection.getPlotUnits()\r\n\t\r\n\tcontroller = _.max Router , (item)->\r\n\t\treturn parseInt item.count.length\r\n\r\n\tcontroller\t\r\n\r\n\t\r\n#function to load the default controller fro master view\r\nCommonFloor.checkPropertyType = ()->\r\n\tCommonFloor.loadJSONData()\r\n\tif Object.keys(project.get('project_master')).length  ==  0\r\n\t\tCommonFloor.navigate '#/list-view' , true\r\n\t\tCommonFloor.router.storeRoute()\r\n\telse\r\n\t\tCommonFloor.navigate '#/master-view' , true\r\n\t\tCommonFloor.router.storeRoute()\r\n\r\n#function to load the default controller for list view \r\nCommonFloor.checkListView = ()->\r\n\tcontroller = CommonFloor.propertyMaxUnits()\r\n\t#CommonFloor.navigate '#/list-view/'+controller.type , true\r\n\r\n\r\n#funtion to convert string into integers\r\nwindow.convertToInt = (response)->\r\n\t$.each response ,(index,value)->\r\n\t\t$.map(value,(item)->\r\n\r\n\t\t\t$.each item ,(ind,val)->\r\n\t\t\t\treturn parseInt val\r\n\t)\r\n\r\n#function to convert value into price format\r\nwindow.numDifferentiation = (val)->\r\n\tif (val >= 10000000) \r\n\t\tval = (val/10000000).toFixed(2) + ' Cr'\r\n\telse if (val >= 100000) \r\n\t\tval = (val/100000).toFixed(2) + ' Lac'\r\n\telse if(val >= 1000) \r\n\t\tval = (val/1000).toFixed(2) + ' K'\r\n\tval\r\n\t   \r\n\r\n#function to convert value into price format\t\t\r\nwindow.convertRupees = (val)->\r\n\r\n\t$('#price').autoNumeric('init')\r\n\t$('#price').autoNumeric('set', val)\r\n\r\n \r\n#Get all the property type with the count of units\r\nCommonFloor.propertyTypes = ()->\r\n\tRouter = []\r\n\tif bunglowVariantCollection.getBunglowUnits().length != 0\r\n\t\tRouter.push \r\n\t\t\t'type'  : s.capitalize 'villa(s)'\r\n\t\t\t'count' :bunglowVariantCollection.getBunglowUnits()\r\n\t\t\t'type_name' : '(V)'\r\n\tif buildingCollection.toArray().length != 0\r\n\t\tRouter.push \r\n\t\t\t'type'  : s.capitalize 'building(s)'\r\n\t\t\t'count' :buildingCollection.toArray()\r\n\t\t\t'type_name' : '(A)'\r\n\tif plotVariantCollection.getPlotUnits().length != 0\r\n\t\tRouter.push \r\n\t\t\t'type'  : s.capitalize 'plot(s)'\r\n\t\t\t'count' :plotVariantCollection.getPlotUnits()\r\n\t\t\t'type_name' : '(P)'\r\n\tcontroller = _.max Router , (item)->\r\n\t\treturn parseInt item.count.length\r\n\r\n\r\n\tRouter\r\n\r\n#Get all the property type with the count of units\r\nCommonFloor.masterPropertyTypes = ()->\r\n\tRouter = []\r\n\tif bunglowVariantCollection.getBunglowMasterUnits().length != 0\r\n\t\tRouter.push \r\n\t\t\t'type'  : s.capitalize 'villas'\r\n\t\t\t'count' :bunglowVariantCollection.getBunglowMasterUnits()\r\n\t\t\t'type_name' : '(V)'\r\n\tif apartmentVariantCollection.getApartmentMasterUnits().length != 0\r\n\t\tRouter.push \r\n\t\t\t'type'  : s.capitalize 'apartments'\r\n\t\t\t'count' :apartmentVariantCollection.getApartmentMasterUnits()\r\n\t\t\t'type_name' : '(A)'\r\n\tif plotVariantCollection.getPlotMasterUnits().length != 0\r\n\t\tRouter.push \r\n\t\t\t'type'  : s.capitalize 'plots'\r\n\t\t\t'count' :plotVariantCollection.getPlotMasterUnits()\r\n\t\t\t'type_name' : '(P)'\r\n\tcontroller = _.max Router , (item)->\r\n\t\treturn parseInt item.count.length\r\n\r\n\r\n\tRouter\r\n\r\nCommonFloor.applyVillaClasses = (classname) ->\r\n\t$('.villa').each (ind,item)->\r\n\t\tid = parseInt item.id\r\n\t\t# class_name = $('#'+id).attr('class')\r\n\t\t# if classname != undefined\r\n\t\t# \tclass_name = classname\r\n\t\tunit = unitCollection.findWhere \r\n\t\t\tid :  id \r\n\t\t# $('#'+id).attr('class' ,class_name)\r\n\t\tif ! _.isUndefined unit \r\n\t\t\tavailability = unit.get('availability')\r\n\t\t\tavailability = s.decapitalize(availability)\r\n\t\t\t$('#'+id).attr('class' , 'layer villa unit_fadein '+availability)\r\n\r\n\r\nCommonFloor.applyPlotClasses = (classname)->\r\n\t$('.plot').each (ind,item)->\r\n\t\tid = parseInt item.id\r\n\t\t# class_name = $('#'+id).attr('class')\r\n\t\t# if classname != \"\"\r\n\t\t# \tclass_name = classname\r\n\t\tunit = unitCollection.findWhere \r\n\t\t\tid :  id \r\n\t\t# $('#'+id).attr('class' ,class_name)\r\n\t\tif ! _.isUndefined unit \r\n\t\t\tavailability = unit.get('availability')\r\n\t\t\tavailability = s.decapitalize(availability)\r\n\t\t\t$('#'+id).attr('class' ,'layer plot unit_fadein '+availability)  \r\n\r\n\r\n\r\n\r\n\r\nCommonFloor.filter = ()->\r\n\t#check whether url contains any parameters\r\n\tif  window.location.href.indexOf('=') > -1\r\n\t\tparams = params\r\n\t\tparamsArray = params.split('&')\r\n\t\t#loop through all the parameters\r\n\t\tfor element,index in paramsArray\r\n\t\t\tparam_key = element.split('=')\r\n\t\t\tCommonFloor.defaults[param_key[0]] = param_key[1]\r\n\r\n\r\n\t\t#set the params with the filters selected by the user\r\n\t\tparams = 'type:'+CommonFloor.defaults['type']+'&unit_variant_id:'+CommonFloor.defaults['unitVariants']+'&unit_type_id:'+CommonFloor.defaults['unitTypes']+\r\n\t\t\t\t'&price_min:'+CommonFloor.defaults['price_min']+'&price_max:'+CommonFloor.defaults['price_max']+\r\n\t\t\t\t'&availability:'+CommonFloor.defaults['availability']+'&area_min:'+CommonFloor.defaults['area_min']+\r\n\t\t\t\t'&area_max:'+CommonFloor.defaults['area_max']+'&building_id:'+CommonFloor.defaults['building']+\r\n\t\t\t\t'&floor_min:'+CommonFloor.defaults['floor_min']+'&floor_max:'+CommonFloor.defaults['floor_max']\r\n\telse\r\n\r\n\t\t#url doesnt contain any parameters take the value of the defaults\r\n\t\tparams = 'type:'+CommonFloor.defaults['type']+'&unit_variant_id:'+CommonFloor.defaults['unitVariants']+'&unit_type_id:'+CommonFloor.defaults['unitTypes']+\r\n\t\t\t\t'&price_min:'+CommonFloor.defaults['price_min']+'&price_max:'+CommonFloor.defaults['price_max']+\r\n\t\t\t\t'&availability:'+CommonFloor.defaults['availability']+'&area_min:'+CommonFloor.defaults['area_min']+\r\n\t\t\t\t'&area_max:'+CommonFloor.defaults['area_max']+'&building_id:'+CommonFloor.defaults['building']+\r\n\t\t\t\t'&floor_min:'+CommonFloor.defaults['floor_min']+'&floor_max:'+CommonFloor.defaults['floor_max']\r\n\r\n\r\n\tparam_arr = params.split('&')\r\n\t$.each param_arr, (index,value)->\r\n\t\t\tvalue_arr  =  value.split(':')\r\n\t\t\tparam_key = value_arr[0]\r\n\t\t\tif param_key == 'type' && value_arr[1] != \"\"\r\n\t\t\t\tCommonFloor.resetCollections()\r\n\t\t\t\tcollection = CommonFloor.resetProperyType(value_arr[1])\t\r\n\t\t\tif param_key != 'price_min' && param_key != 'price_max' && value_arr[1] != \"\" && param_key != 'area_min' && param_key != 'area_max' && param_key != 'type' && param_key != 'floor_min' && param_key != 'floor_max'\r\n\t\t\t\tparam_val = value_arr[1]\r\n\t\t\t\tparam_val_arr = param_val.split(',')\r\n\t\t\t\tcollection = []\r\n\t\t\t\t$.each param_val_arr, (index,value)->\r\n\t\t\t\t\t\tparamkey = {}\r\n\t\t\t\t\t\tparamkey[param_key] = parseInt(value)\r\n\t\t\t\t\t\tif param_key == 'availability'\r\n\t\t\t\t\t\t\tparamkey[param_key] = value\r\n\t\t\t\t\t\t$.merge collection, unitCollection.where paramkey\r\n\t\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tunitCollection.reset collection\r\n\tif CommonFloor.defaults['price_max'] != \"\"\r\n\t\tCommonFloor.filterBudget()\r\n\tif CommonFloor.defaults['area_max'] != \"\"\r\n\t\tCommonFloor.filterArea()\r\n\tif CommonFloor.defaults['floor_max'] != \"\"\r\n\t\tCommonFloor.filterFloor()\r\n\tCommonFloor.applyFliterClass()\r\n\tCommonFloor.resetCollections()\r\n\r\nCommonFloor.resetProperyType = (param)->\r\n\tparam_val_arr = param.split(',')\r\n\tcollection = []\r\n\t$.each param_val_arr, (index,value)->\r\n\t\tif value == 'Villas'\r\n\t\t\t$.merge collection , bunglowVariantCollection.getBunglowUnits()\r\n\t\tif value == 'Apartments/Penthouse'\r\n\t\t\t$.merge collection , apartmentVariantCollection.getApartmentUnits()\r\n\t\tif value == 'Plots'\r\n\t\t\t$.merge collection , plotVariantCollection.getPlotUnits()\r\n\tunitCollection.reset collection\r\n\r\n\r\nCommonFloor.applyFliterClass = ()->\r\n\tCommonFloor.applyPlotClasses()\r\n\tCommonFloor.applyVillaClasses()\r\n\tactualunits = _.pluck unitMasterCollection.toArray() ,'id'\r\n\tfilterunits = _.pluck unitCollection.toArray() ,'id'\r\n\tnotSelecteUnits = _.difference actualunits , filterunits\r\n\t$('.villa').each (ind,item)->\r\n\t\tid = parseInt item.id\r\n\t\tif $.inArray(id , notSelecteUnits) > -1\r\n\t\t\t$('#'+id).attr('class' ,'layer villa unit_fadein not_in_selection')\r\n\r\n\t$('.plot').each (ind,item)->\r\n\t\tid = parseInt item.id\r\n\t\tif $.inArray(id , notSelecteUnits) > -1\r\n\t\t\t$('#'+id).attr('class' ,'layer plot unit_fadein not_in_selection')\r\n\r\nCommonFloor.resetCollections = ()->\r\n\tapartments = []\r\n\tbunglows   = []\r\n\tunitTypes = []\r\n\tplots = []\r\n\tbuildings = []\r\n\tunitCollection.each (item)->\r\n\t\tunitType = unitTypeMasterCollection.findWhere\r\n\t\t\t\t\t\t\t'id' :  item.get('unit_type_id')\r\n\t\tif item.get('building_id') != 0 \r\n\t\t\tbuilding = buildingMasterCollection.findWhere\r\n\t\t\t\t\t\t'id' : item.get('building_id')\r\n\t\t\tbuildings.push building\r\n\t\tproperty = window.propertyTypes[unitType.get('property_type_id')]\r\n\t\tif s.decapitalize(property) == 'apartments' || s.decapitalize(property) == 'penthouse'\r\n\t\t\tapartments.push apartmentVariantMasterCollection.get(item.get('unit_variant_id'))\r\n\t\tif s.decapitalize(property) == 'villas/Bungalows'\r\n\t\t\tbunglows.push bunglowVariantMasterCollection.get(item.get('unit_variant_id'))\r\n\t\tif s.decapitalize(property) == 'plot'\r\n\t\t\tplots.push plotVariantMasterCollection.get(item.get('unit_variant_id'))\r\n\t\tunitTypes.push unitType\r\n\t\t\r\n\tapartmentVariantCollection.reset apartments\r\n\tbunglowVariantCollection.reset bunglows\r\n\tplotVariantCollection.reset plots\r\n\tunitTypeCollection.reset unitTypes\r\n\tbuildingCollection.reset buildings\r\n\tunitTempCollection.reset unitCollection.toArray()\r\n\t\r\n\r\nCommonFloor.filterBudget = ()->\r\n\tCommonFloor.resetCollections()\r\n\tbudget = []\r\n\tunitCollection.each (item)->\r\n\t\tunitPrice = parseFloat window.unit.getFilterUnitDetails(item.get('id'))[3]\r\n\t\tif unitPrice >= parseFloat(CommonFloor.defaults['price_min']) && unitPrice <= parseFloat(CommonFloor.defaults['price_max'])\r\n\t\t\tbudget.push item\r\n\r\n\tunitCollection.reset budget\r\n\r\nCommonFloor.filterFloor = ()->\r\n\tCommonFloor.resetCollections()\r\n\tfloorArr = []\r\n\tunitCollection.each (item)->\r\n\t\tfloor = item.get 'floor'\r\n\t\tif floor >= parseInt(CommonFloor.defaults['floor_min']) && floor <= parseInt(CommonFloor.defaults['floor_max'])\r\n\t\t\tfloorArr.push item\r\n\r\n\tunitCollection.reset floorArr\r\n\r\nCommonFloor.filterArea = ()->\r\n\tCommonFloor.resetCollections()\r\n\tareaArr = []\r\n\tunitCollection.each (item)->\r\n\t\tarea = item.get('area')\r\n\t\tif area >= parseFloat(CommonFloor.defaults['area_min']) && area <= parseFloat(CommonFloor.defaults['area_max'])\r\n\t\t\tareaArr.push item\r\n\r\n\tunitCollection.reset areaArr\r\n\r\nCommonFloor.getFilters = ()->\r\n\tunitTypes = []\r\n\tunitVariants = []\r\n\tresults = []\r\n\tvillaFilters = CommonFloor.getVillaFilters()\r\n\t$.merge unitTypes , villaFilters.unitTypes\r\n\t$.merge unitVariants , villaFilters.unitVariants\r\n\tapartmentFilters = CommonFloor.getApartmentFilters()\r\n\t$.merge unitTypes , apartmentFilters.unitTypes\r\n\t$.merge unitVariants , apartmentFilters.unitVariants\r\n\tplotFilters = CommonFloor.getPlotFilters()\r\n\t$.merge unitTypes , plotFilters.unitTypes\r\n\t$.merge unitVariants , plotFilters.unitVariants\r\n\tprice = []\r\n\tarea = []\r\n\ttype= []\r\n\tstatus= []\r\n\tfloor = []\r\n\tresults.push\r\n\t\t'type'\t: 'Villa(s)'\r\n\t\t'count' : villaFilters.count\r\n\tresults.push\r\n\t\t'type'\t: 'Apartment(s)/Penthouse(s)'\r\n\t\t'count' : apartmentFilters.count\r\n\tresults.push\r\n\t\t'type'\t: 'Plot(s)'\r\n\t\t'count' : plotFilters.count\r\n\tif CommonFloor.defaults['price_max'] != \"\"\r\n\t\tmin_price = window.numDifferentiation CommonFloor.defaults['price_min']\r\n\t\tmax_price = window.numDifferentiation CommonFloor.defaults['price_max']\r\n\t\tprice.push \r\n\t\t\t\t'name' : min_price+'-'+max_price\r\n\t\t\t\t'type'  : '' \r\n\t\t\t\t'id' : 'budget'\r\n\t\t\t\t'id_name' : 'filter_budget'\r\n\t\t\t\t'classname' : 'budget'\r\n\tif CommonFloor.defaults['area_max'] != \"\"\r\n\t\tarea_min = CommonFloor.defaults['area_min']\r\n\t\tarea_max = CommonFloor.defaults['area_max']\r\n\t\tarea.push \r\n\t\t\t\t'name' : area_min+'-'+area_max\r\n\t\t\t\t'type'  : 'Sq.Ft' \r\n\t\t\t\t'id' : 'area'\r\n\t\t\t\t'id_name' : 'filter_area'\r\n\t\t\t\t'classname' : 'area'\r\n\r\n\tif CommonFloor.defaults['floor_max'] != \"\"\r\n\t\tfloor_min = CommonFloor.defaults['floor_min']\r\n\t\tfloor_max = CommonFloor.defaults['floor_max']\r\n\t\tfloor.push \r\n\t\t\t\t'name' : 'Floor ' +floor_min+'-'+floor_max\r\n\t\t\t\t'type'  : '' \r\n\t\t\t\t'id' : 'floor'\r\n\t\t\t\t'id_name' : 'filter_floor'\r\n\t\t\t\t'classname' : 'floor'\r\n\r\n\tif CommonFloor.defaults['type'] != \"\"\r\n\t\ttypeArr = CommonFloor.defaults['type'].split(',')\r\n\t\t$.each typeArr, (index,value)->\r\n\t\t\ttype.push \r\n\t\t\t\t'name' : value\r\n\t\t\t\t'classname' : 'types'\r\n\t\t\t\t'id'\t\t: value\r\n\t\t\t\t'id_name' : 'filter_'+value\r\n\tif CommonFloor.defaults['availability'] != \"\"\r\n\t\tstatus.push \r\n\t\t\t'name' : 'Available'\r\n\t\t\t'classname' : 'types'\r\n\t\t\t'id'\t\t: 'available'\r\n\t\t\t'id_name' : 'filter_available'\r\n\tfilters = {'unitTypes' : unitTypes\r\n\t\t\t\t,'unitVariants' : unitVariants\r\n\t\t\t\t,'price' : price\r\n\t\t\t\t,'area' : area\r\n\t\t\t\t'type' : type\r\n\t\t\t\t'status' : status,\r\n\t\t\t\t'floor': floor}\r\n\t$.each filters,(index,value)->\r\n\t\tif value.length == 0\r\n\t\t\tfilters = _.omit(filters, index)\r\n\t$.each results,(index,value)->\r\n\t\tif value.count == 0\r\n\t\t\tresults = _.omit(results, index) \r\n\r\n\t[filters,results]\t\r\n\t\t\t\r\nCommonFloor.getVillaFilters = ()->\r\n\tunitVariants = []\r\n\tunit_variant = ''\r\n\tunitTypes = []\r\n\tunit_type = ''\r\n\tstatus = []\r\n\t$.each CommonFloor.defaults,(ind,val)->\r\n\t\tif ind != 'price_min' && ind != 'price_max' && val != \"\" && ind != 'area_min' && ind != 'area_max' && ind != 'type' && ind != 'floor_min' && ind != 'floor_max'\r\n\t\t\tparam_val_arr = val.split(',')\r\n\t\t\t$.each param_val_arr, (index,value)->\r\n\t\t\t\tif value != \"\" && ind == 'unitVariants'\r\n\t\t\t\t\tif ! _.isUndefined bunglowVariantMasterCollection.get(parseInt(value))\r\n\t\t\t\t\t\tunit_variant = bunglowVariantMasterCollection.findWhere\r\n\t\t\t\t\t\t\t\t\t'id' : parseInt value\r\n\t\t\t\t\t\tunitVariants.push \r\n\t\t\t\t\t\t\t\t\t'name'\t: unit_variant.get 'unit_variant_name'\r\n\t\t\t\t\t\t\t\t\t'type'\t: '(V)'\r\n\t\t\t\t\t\t\t\t\t'classname' : 'variant_names'\r\n\t\t\t\t\t\t\t\t\t'id' : unit_variant.get 'id'\r\n\t\t\t\t\t\t\t\t\t'id_name' : 'filter_varinat_name'+unit_variant.get 'id'\r\n\t\t\t\tif value != \"\" && ind == 'unitTypes' && $.inArray(parseInt(value),bunglowVariantMasterCollection.getVillaUnitTypes()) > -1\r\n\t\t\t\t\tunit_type = unitTypeMasterCollection.findWhere\r\n\t\t\t\t\t\t\t\t\t'id' : parseInt value\r\n\r\n\t\t\t\t\tunitTypes.push \r\n\t\t\t\t\t\t\t\t'name' : unit_type.get 'name'\r\n\t\t\t\t\t\t\t\t'type'\t: '(V)'\r\n\t\t\t\t\t\t\t\t'classname' : 'unit_types'\r\n\t\t\t\t\t\t\t\t'id' : unit_type.get 'id'\r\n\t\t\t\t\t\t\t\t'id_name' : 'filter_unit_type'+unit_type.get 'id'\r\n\r\n\t\r\n\tfilters = {'unitVariants' : unitVariants,'unitTypes': unitTypes\r\n\t\t\t,'count': bunglowVariantMasterCollection.getBunglowUnits().length}\r\n\t# $.each filters,(index,value)->\r\n\t# \tif value.length == 0\r\n\t# \t\tfilters = _.omit(filters, index) \r\n\tfilters\r\n\r\nCommonFloor.getApartmentFilters = ()->\r\n\tunitVariants = []\r\n\tunit_variant = ''\r\n\tunitTypes = []\r\n\tunit_type = ''\r\n\tstatus = []\r\n\t$.each CommonFloor.defaults,(ind,val)->\r\n\t\tif ind != 'price_min' && ind != 'price_max' && val != \"\" && ind != 'area_min' && ind != 'area_max' && ind != 'type' && ind != 'floor_min' && ind != 'floor_max'\r\n\t\t\tparam_val_arr = val.split(',')\r\n\t\t\t$.each param_val_arr, (index,value)->\r\n\t\t\t\tif value != \"\" && ind == 'unitVariants'\r\n\t\t\t\t\tif !_.isUndefined apartmentVariantMasterCollection.get(parseInt(value))\r\n\t\t\t\t\t\tunit_variant = apartmentVariantMasterCollection.findWhere\r\n\t\t\t\t\t\t\t\t\t'id' : parseInt value\r\n\t\t\t\t\t\tunitTypeModel = unitTypeMasterCollection.findWhere\r\n\t\t\t\t\t\t\t\t\t'id' : parseInt unit_variant.get('id')\r\n\t\t\t\t\t\ttype = 'A'\r\n\t\t\t\t\t\tif window.propertyTypes[unitTypeModel.get('property_type_id')] == 'Penthouse'\r\n\t\t\t\t\t\t\t\ttype = 'PH'\r\n\t\t\t\t\t\tunitVariants.push \r\n\t\t\t\t\t\t\t\t\t'name'\t: unit_variant.get 'unit_variant_name'\r\n\t\t\t\t\t\t\t\t\t'type'\t: '('+type+')'\r\n\t\t\t\t\t\t\t\t\t'classname' : 'variant_names'\r\n\t\t\t\t\t\t\t\t\t'id' : unit_variant.get 'id'\r\n\t\t\t\t\t\t\t\t\t'id_name' : 'filter_varinat_name'+unit_variant.get 'id'\r\n\t\t\t\tif value != \"\" && ind == 'unitTypes' && $.inArray(parseInt(value),apartmentVariantMasterCollection.getApartmentUnitTypes()) > -1\r\n\t\t\t\t\tunit_type = unitTypeMasterCollection.findWhere\r\n\t\t\t\t\t\t\t\t\t'id' : parseInt value\r\n\t\t\t\t\ttype = 'A'\r\n\t\t\t\t\tif window.propertyTypes[unit_type.get('property_type_id')] == 'Penthouse'\r\n\t\t\t\t\t\t\t\ttype = 'PH'\r\n\t\t\t\t\tunitTypes.push \r\n\t\t\t\t\t\t\t\t'name' : unit_type.get 'name'\r\n\t\t\t\t\t\t\t\t'type'\t: '('+type+')'\r\n\t\t\t\t\t\t\t\t'classname' : 'unit_types'\r\n\t\t\t\t\t\t\t\t'id' : unit_type.get 'id'\r\n\t\t\t\t\t\t\t\t'id_name' : 'filter_unit_type'+unit_type.get 'id'\r\n\t\t\r\n\tfilters = {'unitVariants' : unitVariants,'unitTypes': unitTypes \r\n\t\t\t\t,'count': apartmentVariantMasterCollection.getApartmentUnits().length}\r\n\t# $.each filters,(index,value)->\r\n\t# \tif value.length == 0\r\n\t# \t\tfilters = _.omit(filters, index) \r\n\tfilters\r\n\r\nCommonFloor.getPlotFilters = ()->\r\n\tunitVariants = []\r\n\tunit_variant = ''\r\n\tunitTypes = []\r\n\tunit_type = ''\r\n\tstatus = []\r\n\t$.each CommonFloor.defaults,(ind,val)->\r\n\t\tif ind != 'price_min' && ind != 'price_max' && val != \"\" && ind != 'area_min' && ind != 'area_max' && ind != 'type' && ind != 'floor_min' && ind != 'floor_max'\r\n\t\t\tparam_val_arr = val.split(',')\r\n\t\t\t$.each param_val_arr, (index,value)->\r\n\t\t\t\tif value != \"\" && ind == 'unitVariants'\r\n\t\t\t\t\tif !_.isUndefined plotVariantMasterCollection.get(parseInt(value))\r\n\t\t\t\t\t\tunit_variant = plotVariantMasterCollection.findWhere\r\n\t\t\t\t\t\t\t\t\t'id' : parseInt value\r\n\t\t\t\t\t\tunitVariants.push \r\n\t\t\t\t\t\t\t\t\t'name'\t: unit_variant.get 'unit_variant_name'\r\n\t\t\t\t\t\t\t\t\t'type'\t: '(P)'\r\n\t\t\t\t\t\t\t\t\t'classname' : 'variant_names'\r\n\t\t\t\t\t\t\t\t\t'id' : unit_variant.get 'id'\r\n\t\t\t\t\t\t\t\t\t'id_name' : 'filter_varinat_name'+unit_variant.get 'id'\r\n\t\t\t\tif value != \"\" && ind == 'unitTypes' && $.inArray(parseInt(value),plotVariantMasterCollection.getPlotUnitTypes()) > -1\r\n\t\t\t\t\tunit_type = unitTypeMasterCollection.findWhere\r\n\t\t\t\t\t\t\t\t\t'id' : parseInt value\r\n\r\n\t\t\t\t\tunitTypes.push \r\n\t\t\t\t\t\t\t\t'name' : unit_type.get 'name'\r\n\t\t\t\t\t\t\t\t'type'\t: '(P)'\r\n\t\t\t\t\t\t\t\t'classname' : 'unit_types'\r\n\t\t\t\t\t\t\t\t'id' : unit_type.get 'id'\r\n\t\t\t\t\t\t\t\t'id_name' : 'filter_unit_type'+unit_type.get 'id'\r\n\t\t\r\n\tfilters = {'unitVariants' : unitVariants,'unitTypes': unitTypes \r\n\t\t\t\t,'count': plotVariantMasterCollection.getPlotUnits().length}\r\n\t# $.each filters,(index,value)->\r\n\t# \tif value.length == 0\r\n\t# \t\tfilters = _.omit(filters, index) \r\n\tfilters\r\n\r\nCommonFloor.getStatus = ()->\r\n\tstatus = []\r\n\tstatus_arr = []\r\n\tunitMasterCollection.each (item)->\r\n\r\n\t\tif ($.inArray item.get('availability') , status_arr) ==  -1\r\n\t\t\t\tstatus_arr.push item.get 'availability'\r\n\t\t\t\tstatus.push \r\n\t\t\t\t\t'id': item.get 'availability'\r\n\t\t\t\t\t'name': s.humanize item.get 'availability'\r\n\tstatus\r\n\r\nCommonFloor.getStatusFilters = ()->\r\n\tstatus = []\r\n\tresponse = CommonFloor.getStatus()\r\n\tstatusColl = new Backbone.Collection response\r\n\tstatusIds = statusColl.pluck 'id'\r\n\t$.each CommonFloor.defaults,(ind,val)->\r\n\t\tif ind == 'availability' && val != \"\"\r\n\t\t\tparam_val_arr = val.split(',')\r\n\t\t\t$.each param_val_arr, (index,value)->\r\n\t\t\t\tif value != \"\" && ind == 'availability' && $.inArray(value,statusIds) > -1\r\n\t\t\t\t\tstatus.push s.humanize value\r\n\r\n\t{'status' : status}"]}