{"version":3,"sources":["frontend/common/common.coffee"],"names":[],"mappings":"AACA;AAAA,MAAA;+BAAA;;AAAA,EAAM,WAAW,CAAC;AAEjB,wCAAA,CAAA;;;;KAAA;;AAAA,+BAAA,QAAA,GAAW,mBAAX,CAAA;;4BAAA;;KAF0C,UAAU,CAAC,SAAtD,CAAA;;AAAA,EAIM,WAAW,CAAC;AAEjB,wCAAA,CAAA;;;;KAAA;;AAAA,+BAAA,UAAA,GAAW,SAAA,GAAA;aACV,IAAC,CAAA,IAAD,CAAM,GAAA,CAAA,WAAe,CAAC,gBAAtB,EADU;IAAA,CAAX,CAAA;;4BAAA;;KAF0C,UAAU,CAAC,iBAJtD,CAAA;;AAAA,EAUM,WAAW,CAAC;AAEjB,mCAAA,CAAA;;;;KAAA;;AAAA,0BAAA,QAAA,GAAW,maAAX,CAAA;;uBAAA;;KAFqC,UAAU,CAAC,SAVjD,CAAA;;AAAA,EA0BM,WAAW,CAAC;AAEjB,mCAAA,CAAA;;;;KAAA;;AAAA,0BAAA,UAAA,GAAW,SAAA,GAAA;aACV,IAAC,CAAA,IAAD,CAAM,GAAA,CAAA,WAAe,CAAC,WAAtB,EADU;IAAA,CAAX,CAAA;;uBAAA;;KAFqC,UAAU,CAAC,iBA1BjD,CAAA;;AAAA,EAgCA,WAAW,CAAC,YAAZ,GAA2B,SAAA,GAAA;WAE1B,CAAC,CAAC,IAAF,CACC;AAAA,MAAA,IAAA,EAAO,KAAP;AAAA,MACA,GAAA,EAAO,WAAA,GAAY,WAAZ,GAAyB,SAAzB,GAAmC,WAD1C;AAAA,MAEA,KAAA,EAAQ,KAFR;AAAA,MAGA,OAAA,EAAS,SAAC,QAAD,GAAA;AAGR,QAAA,QAAA,GAAW,MAAM,CAAC,YAAP,CAAoB,QAApB,CAAX,CAAA;AAAA,QACA,QAAA,GAAW,QAAQ,CAAC,IADpB,CAAA;AAAA,QAEA,wBAAwB,CAAC,2BAAzB,CAAqD,QAAQ,CAAC,gBAA9D,CAFA,CAAA;AAAA,QAGA,QAAQ,CAAC,qBAAT,CAA+B,QAAQ,CAAC,QAAxC,CAHA,CAAA;AAAA,QAIA,kBAAkB,CAAC,qBAAnB,CAAyC,QAAQ,CAAC,UAAlD,CAJA,CAAA;AAAA,QAKA,kBAAkB,CAAC,qBAAnB,CAAyC,QAAQ,CAAC,SAAlD,CALA,CAAA;AAAA,QAMA,0BAA0B,CAAC,6BAA3B,CAAyD,QAAQ,CAAC,kBAAlE,CANA,CAAA;AAAA,QAOA,qBAAqB,CAAC,wBAAtB,CAA+C,QAAQ,CAAC,YAAxD,CAPA,CAAA;AAAA,QAQA,MAAM,CAAC,aAAP,GAAuB,QAAQ,CAAC,cARhC,CAAA;AAAA,QASA,qBAAqB,CAAC,wBAAtB,CAA+C,QAAQ,CAAC,aAAxD,CATA,CAAA;eAUA,cAAc,CAAC,iBAAf,CAAiC,QAAQ,CAAC,KAA1C,EAbQ;MAAA,CAHT;AAAA,MAoBA,KAAA,EAAO,SAAC,QAAD,GAAA;AACN,QAAA,IAAC,CAAA,MAAD,GAAe,IAAA,UAAU,CAAC,MAAX,CAAkB;AAAA,UAAA,EAAA,EAAK,mBAAL;SAAlB,CAAf,CAAA;eACI,IAAA,WAAW,CAAC,WAAZ,CAAwB;AAAA,UAAA,MAAA,EAAS,IAAC,CAAA,MAAV;SAAxB,EAFE;MAAA,CApBP;KADD,EAF0B;EAAA,CAhC3B,CAAA;;AAAA,EA6DA,WAAW,CAAC,gBAAZ,GAA+B,SAAA,GAAA;AAC9B,QAAA,kBAAA;AAAA,IAAA,MAAA,GAAS,EAAT,CAAA;AAAA,IACA,MAAM,CAAC,IAAP,CACC;AAAA,MAAA,MAAA,EAAU,UAAV;AAAA,MACA,OAAA,EAAS,wBAAwB,CAAC,eAAzB,CAAA,CADT;KADD,CADA,CAAA;AAAA,IAIA,MAAM,CAAC,IAAP,CACC;AAAA,MAAA,MAAA,EAAU,UAAV;AAAA,MACA,OAAA,EAAS,0BAA0B,CAAC,iBAA3B,CAAA,CADT;KADD,CAJA,CAAA;AAAA,IAOA,MAAM,CAAC,IAAP,CACC;AAAA,MAAA,MAAA,EAAU,MAAV;AAAA,MACA,OAAA,EAAS,qBAAqB,CAAC,YAAtB,CAAA,CADT;KADD,CAPA,CAAA;AAAA,IAWA,UAAA,GAAa,CAAC,CAAC,GAAF,CAAM,MAAN,EAAe,SAAC,IAAD,GAAA;AAC3B,aAAO,QAAA,CAAS,IAAI,CAAC,KAAK,CAAC,MAApB,CAAP,CAD2B;IAAA,CAAf,CAXb,CAAA;WAcA,WAf8B;EAAA,CA7D/B,CAAA;;AAAA,EAgFA,WAAW,CAAC,iBAAZ,GAAgC,SAAA,GAAA;AAC/B,IAAA,WAAW,CAAC,YAAZ,CAAA,CAAA,CAAA;AACA,IAAA,IAAG,MAAM,CAAC,IAAP,CAAY,OAAO,CAAC,GAAR,CAAY,gBAAZ,CAAZ,CAA0C,CAAC,MAA3C,KAAuD,CAA1D;AACC,MAAA,WAAW,CAAC,QAAZ,CAAqB,aAArB,EAAqC,IAArC,CAAA,CAAA;aACA,WAAW,CAAC,MAAM,CAAC,UAAnB,CAAA,EAFD;KAAA,MAAA;AAIC,MAAA,WAAW,CAAC,QAAZ,CAAqB,eAArB,EAAuC,IAAvC,CAAA,CAAA;aACA,WAAW,CAAC,MAAM,CAAC,UAAnB,CAAA,EALD;KAF+B;EAAA,CAhFhC,CAAA;;AAAA,EA0FA,WAAW,CAAC,aAAZ,GAA4B,SAAA,GAAA;AAC3B,QAAA,UAAA;WAAA,UAAA,GAAa,WAAW,CAAC,gBAAZ,CAAA,EADc;EAAA,CA1F5B,CAAA;;AAAA,EAgGA,MAAM,CAAC,YAAP,GAAsB,SAAC,QAAD,GAAA;WACrB,CAAC,CAAC,IAAF,CAAO,QAAP,EAAiB,SAAC,KAAD,EAAO,KAAP,GAAA;aAChB,CAAC,CAAC,GAAF,CAAM,KAAN,EAAY,SAAC,IAAD,GAAA;eAEX,CAAC,CAAC,IAAF,CAAO,IAAP,EAAa,SAAC,GAAD,EAAK,GAAL,GAAA;AACZ,iBAAO,QAAA,CAAS,GAAT,CAAP,CADY;QAAA,CAAb,EAFW;MAAA,CAAZ,EADgB;IAAA,CAAjB,EADqB;EAAA,CAhGtB,CAAA;;AAAA,EAyGA,MAAM,CAAC,kBAAP,GAA4B,SAAC,GAAD,GAAA;AAC3B,IAAA,IAAI,GAAA,IAAO,QAAX;AACC,MAAA,GAAA,GAAM,CAAC,GAAA,GAAI,QAAL,CAAc,CAAC,OAAf,CAAuB,CAAvB,CAAA,GAA4B,KAAlC,CADD;KAAA,MAEK,IAAI,GAAA,IAAO,MAAX;AACJ,MAAA,GAAA,GAAM,CAAC,GAAA,GAAI,MAAL,CAAY,CAAC,OAAb,CAAqB,CAArB,CAAA,GAA0B,MAAhC,CADI;KAAA,MAEA,IAAG,GAAA,IAAO,IAAV;AACJ,MAAA,GAAA,GAAM,CAAC,GAAA,GAAI,IAAL,CAAU,CAAC,OAAX,CAAmB,CAAnB,CAAA,GAAwB,IAA9B,CADI;KAJL;WAMA,IAP2B;EAAA,CAzG5B,CAAA;;AAAA,EAoHA,MAAM,CAAC,aAAP,GAAuB,SAAC,GAAD,GAAA;AAEtB,IAAA,CAAA,CAAE,QAAF,CAAW,CAAC,WAAZ,CAAwB,MAAxB,CAAA,CAAA;WACA,CAAA,CAAE,QAAF,CAAW,CAAC,WAAZ,CAAwB,KAAxB,EAA+B,GAA/B,EAHsB;EAAA,CApHvB,CAAA;;AAAA,EA2HA,WAAW,CAAC,aAAZ,GAA4B,SAAA,GAAA;AAC3B,QAAA,kBAAA;AAAA,IAAA,MAAA,GAAS,EAAT,CAAA;AACA,IAAA,IAAG,wBAAwB,CAAC,eAAzB,CAAA,CAA0C,CAAC,MAA3C,KAAqD,CAAxD;AACC,MAAA,MAAM,CAAC,IAAP,CACC;AAAA,QAAA,MAAA,EAAU,CAAC,CAAC,UAAF,CAAa,QAAb,CAAV;AAAA,QACA,OAAA,EAAS,wBAAwB,CAAC,eAAzB,CAAA,CADT;OADD,CAAA,CADD;KADA;AAKA,IAAA,IAAG,kBAAkB,CAAC,OAAnB,CAAA,CAA4B,CAAC,MAA7B,KAAuC,CAA1C;AACC,MAAA,MAAM,CAAC,IAAP,CACC;AAAA,QAAA,MAAA,EAAU,CAAC,CAAC,UAAF,CAAa,WAAb,CAAV;AAAA,QACA,OAAA,EAAS,kBAAkB,CAAC,OAAnB,CAAA,CADT;OADD,CAAA,CADD;KALA;AASA,IAAA,IAAG,qBAAqB,CAAC,YAAtB,CAAA,CAAoC,CAAC,MAArC,KAA+C,CAAlD;AACC,MAAA,MAAM,CAAC,IAAP,CACC;AAAA,QAAA,MAAA,EAAU,CAAC,CAAC,UAAF,CAAa,OAAb,CAAV;AAAA,QACA,OAAA,EAAS,qBAAqB,CAAC,YAAtB,CAAA,CADT;OADD,CAAA,CADD;KATA;AAAA,IAaA,UAAA,GAAa,CAAC,CAAC,GAAF,CAAM,MAAN,EAAe,SAAC,IAAD,GAAA;AAC3B,aAAO,QAAA,CAAS,IAAI,CAAC,KAAK,CAAC,MAApB,CAAP,CAD2B;IAAA,CAAf,CAbb,CAAA;WAiBA,OAlB2B;EAAA,CA3H5B,CAAA;;AAAA,EA+IA,WAAW,CAAC,iBAAZ,GAAgC,SAAA,GAAA;WAC/B,CAAA,CAAE,QAAF,CAAW,CAAC,IAAZ,CAAiB,SAAC,GAAD,EAAK,IAAL,GAAA;AAChB,UAAA,sBAAA;AAAA,MAAA,EAAA,GAAK,QAAA,CAAS,IAAI,CAAC,EAAd,CAAL,CAAA;AAAA,MACA,IAAA,GAAO,cAAc,CAAC,SAAf,CACN;AAAA,QAAA,EAAA,EAAM,EAAN;OADM,CADP,CAAA;AAGA,MAAA,IAAG,CAAA,CAAG,CAAC,WAAF,CAAc,IAAd,CAAL;AACC,QAAA,YAAA,GAAe,IAAI,CAAC,GAAL,CAAS,cAAT,CAAf,CAAA;AAAA,QACA,YAAA,GAAe,CAAC,CAAC,YAAF,CAAe,YAAf,CADf,CAAA;eAEA,CAAA,CAAE,GAAA,GAAI,EAAN,CAAS,CAAC,IAAV,CAAe,OAAf,EAAwB,cAAA,GAAe,YAAvC,EAHD;OAJgB;IAAA,CAAjB,EAD+B;EAAA,CA/IhC,CAAA;;AAAA,EA0JA,WAAW,CAAC,gBAAZ,GAA+B,SAAA,GAAA;WAC9B,CAAA,CAAE,OAAF,CAAU,CAAC,IAAX,CAAgB,SAAC,GAAD,EAAK,IAAL,GAAA;AACf,UAAA,sBAAA;AAAA,MAAA,EAAA,GAAK,QAAA,CAAS,IAAI,CAAC,EAAd,CAAL,CAAA;AAAA,MACA,IAAA,GAAO,cAAc,CAAC,SAAf,CACN;AAAA,QAAA,EAAA,EAAM,EAAN;OADM,CADP,CAAA;AAGA,MAAA,IAAG,CAAA,CAAG,CAAC,WAAF,CAAc,IAAd,CAAL;AACC,QAAA,YAAA,GAAe,IAAI,CAAC,GAAL,CAAS,cAAT,CAAf,CAAA;AAAA,QACA,YAAA,GAAe,CAAC,CAAC,YAAF,CAAe,YAAf,CADf,CAAA;eAEA,CAAA,CAAE,GAAA,GAAI,EAAN,CAAS,CAAC,IAAV,CAAe,OAAf,EAAwB,aAAA,GAAc,YAAtC,EAHD;OAJe;IAAA,CAAhB,EAD8B;EAAA,CA1J/B,CAAA;;AAAA,EAsKA,WAAW,CAAC,MAAZ,GAAqB,SAAA,GAAA;AAEpB,QAAA,iEAAA;AAAA,IAAA,IAAI,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,OAArB,CAA6B,GAA7B,CAAA,GAAoC,CAAA,CAAxC;AACC,MAAA,MAAA,GAAS,MAAT,CAAA;AAAA,MACA,WAAA,GAAc,MAAM,CAAC,KAAP,CAAa,GAAb,CADd,CAAA;AAGA,WAAA,6DAAA;qCAAA;AACC,QAAA,SAAA,GAAY,OAAO,CAAC,KAAR,CAAc,GAAd,CAAZ,CAAA;AAAA,QACA,WAAW,CAAC,QAAS,CAAA,SAAU,CAAA,CAAA,CAAV,CAArB,GAAqC,SAAU,CAAA,CAAA,CAD/C,CADD;AAAA,OAHA;AAAA,MASA,MAAA,GAAS,kBAAA,GAAmB,WAAW,CAAC,QAAS,CAAA,cAAA,CAAxC,GAAwD,gBAAxD,GAAyE,WAAW,CAAC,QAAS,CAAA,WAAA,CAA9F,GACP,aADO,GACO,WAAW,CAAC,QAAS,CAAA,WAAA,CAD5B,GACyC,YADzC,GACsD,WAAW,CAAC,QAAS,CAAA,WAAA,CAD3E,GAEP,gBAFO,GAEU,WAAW,CAAC,QAAS,CAAA,cAAA,CAXxC,CADD;KAAA,MAAA;AAgBC,MAAA,MAAA,GAAS,kBAAA,GAAmB,WAAW,CAAC,QAAS,CAAA,cAAA,CAAxC,GAAwD,gBAAxD,GAAyE,WAAW,CAAC,QAAS,CAAA,WAAA,CAA9F,GACP,aADO,GACO,WAAW,CAAC,QAAS,CAAA,WAAA,CAD5B,GACyC,YADzC,GACsD,WAAW,CAAC,QAAS,CAAA,WAAA,CAD3E,GAEP,gBAFO,GAEU,WAAW,CAAC,QAAS,CAAA,cAAA,CAFxC,CAhBD;KAAA;AAAA,IAqBA,SAAA,GAAY,MAAM,CAAC,KAAP,CAAa,GAAb,CArBZ,CAAA;AAAA,IAsBA,CAAC,CAAC,IAAF,CAAO,SAAP,EAAkB,SAAC,KAAD,EAAO,KAAP,GAAA;AAChB,UAAA,+CAAA;AAAA,MAAA,SAAA,GAAc,KAAK,CAAC,KAAN,CAAY,GAAZ,CAAd,CAAA;AAAA,MACA,SAAA,GAAY,SAAU,CAAA,CAAA,CADtB,CAAA;AAEA,MAAA,IAAG,SAAA,KAAa,WAAb,IAA4B,SAAA,KAAa,WAAzC,IAAwD,SAAU,CAAA,CAAA,CAAV,KAAgB,EAA3E;AACC,QAAA,SAAA,GAAY,SAAU,CAAA,CAAA,CAAtB,CAAA;AAAA,QACA,aAAA,GAAgB,SAAS,CAAC,KAAV,CAAgB,GAAhB,CADhB,CAAA;AAAA,QAEA,UAAA,GAAa,EAFb,CAAA;AAAA,QAGA,CAAC,CAAC,IAAF,CAAO,aAAP,EAAsB,SAAC,KAAD,EAAO,KAAP,GAAA;AACpB,cAAA,QAAA;AAAA,UAAA,QAAA,GAAW,EAAX,CAAA;AAAA,UACA,QAAS,CAAA,SAAA,CAAT,GAAsB,QAAA,CAAS,KAAT,CADtB,CAAA;AAEA,UAAA,IAAG,SAAA,KAAa,cAAhB;AACC,YAAA,QAAS,CAAA,SAAA,CAAT,GAAsB,KAAtB,CADD;WAFA;iBAIA,CAAC,CAAC,KAAF,CAAQ,UAAR,EAAoB,cAAc,CAAC,KAAf,CAAqB,QAArB,CAApB,EALoB;QAAA,CAAtB,CAHA,CAAA;eAWA,cAAc,CAAC,KAAf,CAAqB,UAArB,EAZD;OAHgB;IAAA,CAAlB,CAtBA,CAAA;AAAA,IAsCA,WAAW,CAAC,YAAZ,CAAA,CAtCA,CAAA;WAwCA,WAAW,CAAC,gBAAZ,CAAA,EA1CoB;EAAA,CAtKrB,CAAA;;AAAA,EAkNA,WAAW,CAAC,gBAAZ,GAA+B,SAAA,GAAA;AAC9B,QAAA,iDAAA;AAAA,IAAA,UAAA,GAAa,EAAb,CAAA;AAAA,IACA,QAAA,GAAa,EADb,CAAA;AAAA,IAEA,SAAA,GAAY,EAFZ,CAAA;AAAA,IAGA,KAAA,GAAQ,EAHR,CAAA;AAAA,IAIA,SAAA,GAAY,EAJZ,CAAA;AAAA,IAKA,cAAc,CAAC,IAAf,CAAoB,SAAC,IAAD,GAAA;AACnB,UAAA,4BAAA;AAAA,MAAA,QAAA,GAAW,wBAAwB,CAAC,SAAzB,CACN;AAAA,QAAA,IAAA,EAAQ,IAAI,CAAC,GAAL,CAAS,cAAT,CAAR;OADM,CAAX,CAAA;AAEA,MAAA,IAAG,IAAI,CAAC,GAAL,CAAS,aAAT,CAAA,KAA2B,CAA9B;AACC,QAAA,QAAA,GAAW,wBAAwB,CAAC,SAAzB,CACR;AAAA,UAAA,IAAA,EAAO,IAAI,CAAC,GAAL,CAAS,aAAT,CAAP;SADQ,CAAX,CAAA;AAAA,QAEA,SAAS,CAAC,IAAV,CAAe,QAAf,CAFA,CADD;OAFA;AAAA,MAMA,QAAA,GAAW,MAAM,CAAC,aAAc,CAAA,QAAQ,CAAC,GAAT,CAAa,kBAAb,CAAA,CANhC,CAAA;AAOA,MAAA,IAAG,CAAC,CAAC,YAAF,CAAe,QAAf,CAAA,KAA4B,YAA5B,IAA4C,CAAC,CAAC,YAAF,CAAe,QAAf,CAAA,KAA4B,WAA3E;AACC,QAAA,UAAU,CAAC,IAAX,CAAgB,gCAAgC,CAAC,GAAjC,CAAqC,IAAI,CAAC,GAAL,CAAS,iBAAT,CAArC,CAAhB,CAAA,CADD;OAPA;AASA,MAAA,IAAG,CAAC,CAAC,YAAF,CAAe,QAAf,CAAA,KAA4B,kBAA/B;AACC,QAAA,QAAQ,CAAC,IAAT,CAAc,8BAA8B,CAAC,GAA/B,CAAmC,IAAI,CAAC,GAAL,CAAS,iBAAT,CAAnC,CAAd,CAAA,CADD;OATA;AAWA,MAAA,IAAG,CAAC,CAAC,YAAF,CAAe,QAAf,CAAA,KAA4B,MAA/B;AACC,QAAA,KAAK,CAAC,IAAN,CAAW,2BAA2B,CAAC,GAA5B,CAAgC,IAAI,CAAC,GAAL,CAAS,iBAAT,CAAhC,CAAX,CAAA,CADD;OAXA;aAaA,SAAS,CAAC,IAAV,CAAe,QAAf,EAdmB;IAAA,CAApB,CALA,CAAA;AAAA,IAqBA,0BAA0B,CAAC,KAA3B,CAAiC,UAAjC,CArBA,CAAA;AAAA,IAsBA,wBAAwB,CAAC,KAAzB,CAA+B,QAA/B,CAtBA,CAAA;AAAA,IAuBA,qBAAqB,CAAC,KAAtB,CAA4B,KAA5B,CAvBA,CAAA;AAAA,IAwBA,kBAAkB,CAAC,KAAnB,CAAyB,SAAzB,CAxBA,CAAA;AAAA,IAyBA,kBAAkB,CAAC,KAAnB,CAAyB,SAAzB,CAzBA,CAAA;WA0BA,kBAAkB,CAAC,KAAnB,CAAyB,cAAc,CAAC,OAAf,CAAA,CAAzB,EA3B8B;EAAA,CAlN/B,CAAA;;AAAA,EAgPA,WAAW,CAAC,YAAZ,GAA2B,SAAA,GAAA;AAC1B,QAAA,MAAA;AAAA,IAAA,WAAW,CAAC,gBAAZ,CAAA,CAAA,CAAA;AAAA,IACA,MAAA,GAAS,EADT,CAAA;AAAA,IAEA,cAAc,CAAC,IAAf,CAAoB,SAAC,IAAD,GAAA;AACnB,UAAA,SAAA;AAAA,MAAA,SAAA,GAAY,MAAM,CAAC,IAAI,CAAC,cAAZ,CAA2B,IAAI,CAAC,GAAL,CAAS,IAAT,CAA3B,CAA2C,CAAA,CAAA,CAAvD,CAAA;AACA,MAAA,IAAG,SAAA,IAAa,QAAA,CAAS,WAAW,CAAC,QAAS,CAAA,WAAA,CAA9B,CAAb,IAA4D,SAAA,IAAa,QAAA,CAAS,WAAW,CAAC,QAAS,CAAA,WAAA,CAA9B,CAA5E;eACC,MAAM,CAAC,IAAP,CAAY,IAAZ,EADD;OAFmB;IAAA,CAApB,CAFA,CAAA;WAOA,cAAc,CAAC,KAAf,CAAqB,MAArB,EAR0B;EAAA,CAhP3B,CAAA;;AAAA,EA0PA,WAAW,CAAC,UAAZ,GAAyB,SAAA,GAAA;AACxB,QAAA,mDAAA;AAAA,IAAA,YAAA,GAAe,WAAW,CAAC,eAAZ,CAAA,CAAf,CAAA;AAAA,IACA,UAAA,GAAa,WAAW,CAAC,mBAAZ,CAAA,CADb,CAAA;AAAA,IAEA,WAAA,GAAc,WAAW,CAAC,cAAZ,CAAA,CAFd,CAAA;AAGA,IAAA,IAAG,WAAW,CAAC,QAAS,CAAA,WAAA,CAArB,KAAqC,CAAxC;AACC,MAAA,GAAA,GAAM,WAAW,CAAC,QAAS,CAAA,WAAA,CAA3B,CADD;KAHA;AAAA,IAKA,OAAA,GAAU;AAAA,MAAC,OAAA,EAAU,YAAX;AAAA,MACN,qBAAA,EAAwB,UADlB;AAAA,MAEN,MAAA,EAAY,WAFN;KALV,CAAA;WASA,QAVwB;EAAA,CA1PzB,CAAA;;AAAA,EAsQA,WAAW,CAAC,eAAZ,GAA8B,SAAA,GAAA;AAC7B,QAAA,iEAAA;AAAA,IAAA,YAAA,GAAe,EAAf,CAAA;AAAA,IACA,YAAA,GAAe,EADf,CAAA;AAAA,IAEA,SAAA,GAAY,EAFZ,CAAA;AAAA,IAGA,SAAA,GAAY,EAHZ,CAAA;AAAA,IAIA,MAAA,GAAS,EAJT,CAAA;AAAA,IAKA,CAAC,CAAC,IAAF,CAAO,WAAW,CAAC,QAAnB,EAA4B,SAAC,GAAD,EAAK,GAAL,GAAA;AAC3B,UAAA,aAAA;AAAA,MAAA,IAAG,GAAA,KAAO,WAAP,IAAsB,GAAA,KAAO,WAA7B,IAA4C,GAAA,KAAO,EAAtD;AACC,QAAA,aAAA,GAAgB,GAAG,CAAC,KAAJ,CAAU,GAAV,CAAhB,CAAA;eACA,CAAC,CAAC,IAAF,CAAO,aAAP,EAAsB,SAAC,KAAD,EAAO,KAAP,GAAA;AACrB,UAAA,IAAG,KAAA,KAAS,EAAT,IAAe,GAAA,KAAO,cAAzB;AACC,YAAA,IAAG,CAAA,CAAG,CAAC,WAAF,CAAc,8BAA8B,CAAC,GAA/B,CAAmC,QAAA,CAAS,KAAT,CAAnC,CAAd,CAAL;AACC,cAAA,YAAA,GAAe,8BAA8B,CAAC,SAA/B,CACZ;AAAA,gBAAA,IAAA,EAAO,QAAA,CAAS,KAAT,CAAP;eADY,CAAf,CAAA;AAAA,cAEA,YAAY,CAAC,IAAb,CAAkB,YAAY,CAAC,GAAb,CAAiB,mBAAjB,CAAlB,CAFA,CADD;aADD;WAAA;AAKA,UAAA,IAAG,KAAA,KAAS,EAAT,IAAe,GAAA,KAAO,WAAtB,IAAqC,CAAC,CAAC,OAAF,CAAU,QAAA,CAAS,KAAT,CAAV,EAA0B,8BAA8B,CAAC,iBAA/B,CAAA,CAA1B,CAAA,GAAgF,CAAA,CAAxH;AACC,YAAA,SAAA,GAAY,wBAAwB,CAAC,SAAzB,CACR;AAAA,cAAA,IAAA,EAAO,QAAA,CAAS,KAAT,CAAP;aADQ,CAAZ,CAAA;mBAGA,SAAS,CAAC,IAAV,CAAe,SAAS,CAAC,GAAV,CAAc,MAAd,CAAf,EAJD;WANqB;QAAA,CAAtB,EAFD;OAD2B;IAAA,CAA5B,CALA,CAAA;AAAA,IAoBA,OAAO,CAAC,GAAR,CAAY,SAAZ,CApBA,CAAA;AAAA,IAqBA,OAAA,GAAU;AAAA,MAAC,cAAA,EAAiB,YAAlB;AAAA,MAA+B,WAAA,EAAa,SAA5C;AAAA,MACP,OAAA,EAAS,8BAA8B,CAAC,eAA/B,CAAA,CAAgD,CAAC,MADnD;KArBV,CAAA;AAAA,IAuBA,CAAC,CAAC,IAAF,CAAO,OAAP,EAAe,SAAC,KAAD,EAAO,KAAP,GAAA;AACd,MAAA,IAAG,KAAK,CAAC,MAAN,KAAgB,CAAnB;eACC,OAAA,GAAU,CAAC,CAAC,IAAF,CAAO,OAAP,EAAgB,KAAhB,EADX;OADc;IAAA,CAAf,CAvBA,CAAA;WA0BA,QA3B6B;EAAA,CAtQ9B,CAAA;;AAAA,EAmSA,WAAW,CAAC,mBAAZ,GAAkC,SAAA,GAAA;AACjC,QAAA,iEAAA;AAAA,IAAA,YAAA,GAAe,EAAf,CAAA;AAAA,IACA,YAAA,GAAe,EADf,CAAA;AAAA,IAEA,SAAA,GAAY,EAFZ,CAAA;AAAA,IAGA,SAAA,GAAY,EAHZ,CAAA;AAAA,IAIA,MAAA,GAAS,EAJT,CAAA;AAAA,IAKA,CAAC,CAAC,IAAF,CAAO,WAAW,CAAC,QAAnB,EAA4B,SAAC,GAAD,EAAK,GAAL,GAAA;AAC3B,UAAA,aAAA;AAAA,MAAA,IAAG,GAAA,KAAO,WAAP,IAAsB,GAAA,KAAO,WAA7B,IAA4C,GAAA,KAAO,EAAtD;AACC,QAAA,aAAA,GAAgB,GAAG,CAAC,KAAJ,CAAU,GAAV,CAAhB,CAAA;eACA,CAAC,CAAC,IAAF,CAAO,aAAP,EAAsB,SAAC,KAAD,EAAO,KAAP,GAAA;AACrB,UAAA,IAAG,KAAA,KAAS,EAAT,IAAe,GAAA,KAAO,cAAzB;AACC,YAAA,IAAG,CAAA,CAAE,CAAC,WAAF,CAAc,gCAAgC,CAAC,GAAjC,CAAqC,QAAA,CAAS,KAAT,CAArC,CAAd,CAAJ;AACC,cAAA,YAAA,GAAe,gCAAgC,CAAC,SAAjC,CACZ;AAAA,gBAAA,IAAA,EAAO,QAAA,CAAS,KAAT,CAAP;eADY,CAAf,CAAA;AAAA,cAGA,YAAY,CAAC,IAAb,CAAkB,YAAY,CAAC,GAAb,CAAiB,mBAAjB,CAAlB,CAHA,CADD;aADD;WAAA;AAMA,UAAA,IAAG,KAAA,KAAS,EAAT,IAAe,GAAA,KAAO,WAAtB,IAAqC,CAAC,CAAC,OAAF,CAAU,QAAA,CAAS,KAAT,CAAV,EAA0B,gCAAgC,CAAC,qBAAjC,CAAA,CAA1B,CAAA,GAAsF,CAAA,CAA9H;AACC,YAAA,SAAA,GAAY,wBAAwB,CAAC,SAAzB,CACR;AAAA,cAAA,IAAA,EAAO,QAAA,CAAS,KAAT,CAAP;aADQ,CAAZ,CAAA;mBAGA,SAAS,CAAC,IAAV,CAAe,SAAS,CAAC,GAAV,CAAc,MAAd,CAAf,EAJD;WAPqB;QAAA,CAAtB,EAFD;OAD2B;IAAA,CAA5B,CALA,CAAA;AAAA,IAqBA,OAAA,GAAU;AAAA,MAAC,cAAA,EAAiB,YAAlB;AAAA,MAA+B,WAAA,EAAa,SAA5C;AAAA,MACN,OAAA,EAAS,gCAAgC,CAAC,iBAAjC,CAAA,CAAoD,CAAC,MADxD;KArBV,CAAA;AAAA,IAuBA,CAAC,CAAC,IAAF,CAAO,OAAP,EAAe,SAAC,KAAD,EAAO,KAAP,GAAA;AACd,MAAA,IAAG,KAAK,CAAC,MAAN,KAAgB,CAAnB;eACC,OAAA,GAAU,CAAC,CAAC,IAAF,CAAO,OAAP,EAAgB,KAAhB,EADX;OADc;IAAA,CAAf,CAvBA,CAAA;WA0BA,QA3BiC;EAAA,CAnSlC,CAAA;;AAAA,EAgUA,WAAW,CAAC,cAAZ,GAA6B,SAAA,GAAA;AAC5B,QAAA,iEAAA;AAAA,IAAA,YAAA,GAAe,EAAf,CAAA;AAAA,IACA,YAAA,GAAe,EADf,CAAA;AAAA,IAEA,SAAA,GAAY,EAFZ,CAAA;AAAA,IAGA,SAAA,GAAY,EAHZ,CAAA;AAAA,IAIA,MAAA,GAAS,EAJT,CAAA;AAAA,IAKA,CAAC,CAAC,IAAF,CAAO,WAAW,CAAC,QAAnB,EAA4B,SAAC,GAAD,EAAK,GAAL,GAAA;AAC3B,UAAA,aAAA;AAAA,MAAA,IAAG,GAAA,KAAO,WAAP,IAAsB,GAAA,KAAO,WAA7B,IAA4C,GAAA,KAAO,EAAtD;AACC,QAAA,aAAA,GAAgB,GAAG,CAAC,KAAJ,CAAU,GAAV,CAAhB,CAAA;eACA,CAAC,CAAC,IAAF,CAAO,aAAP,EAAsB,SAAC,KAAD,EAAO,KAAP,GAAA;AACrB,UAAA,IAAG,KAAA,KAAS,EAAT,IAAe,GAAA,KAAO,cAAzB;AACC,YAAA,IAAG,CAAA,CAAE,CAAC,WAAF,CAAc,2BAA2B,CAAC,GAA5B,CAAgC,QAAA,CAAS,KAAT,CAAhC,CAAd,CAAJ;AACC,cAAA,YAAA,GAAe,2BAA2B,CAAC,SAA5B,CACZ;AAAA,gBAAA,IAAA,EAAO,QAAA,CAAS,KAAT,CAAP;eADY,CAAf,CAAA;AAAA,cAEA,YAAY,CAAC,IAAb,CAAkB,YAAY,CAAC,GAAb,CAAiB,mBAAjB,CAAlB,CAFA,CADD;aADD;WAAA;AAKA,UAAA,IAAG,KAAA,KAAS,EAAT,IAAe,GAAA,KAAO,WAAtB,IAAqC,CAAC,CAAC,OAAF,CAAU,QAAA,CAAS,KAAT,CAAV,EAA0B,2BAA2B,CAAC,gBAA5B,CAAA,CAA1B,CAAA,GAA4E,CAAA,CAApH;AACC,YAAA,SAAA,GAAY,wBAAwB,CAAC,SAAzB,CACR;AAAA,cAAA,IAAA,EAAO,QAAA,CAAS,KAAT,CAAP;aADQ,CAAZ,CAAA;mBAGA,SAAS,CAAC,IAAV,CAAe,SAAS,CAAC,GAAV,CAAc,MAAd,CAAf,EAJD;WANqB;QAAA,CAAtB,EAFD;OAD2B;IAAA,CAA5B,CALA,CAAA;AAAA,IAoBA,OAAA,GAAU;AAAA,MAAC,cAAA,EAAiB,YAAlB;AAAA,MAA+B,WAAA,EAAa,SAA5C;AAAA,MACN,OAAA,EAAS,2BAA2B,CAAC,YAA5B,CAAA,CAA0C,CAAC,MAD9C;KApBV,CAAA;AAAA,IAsBA,CAAC,CAAC,IAAF,CAAO,OAAP,EAAe,SAAC,KAAD,EAAO,KAAP,GAAA;AACd,MAAA,IAAG,KAAK,CAAC,MAAN,KAAgB,CAAnB;eACC,OAAA,GAAU,CAAC,CAAC,IAAF,CAAO,OAAP,EAAgB,KAAhB,EADX;OADc;IAAA,CAAf,CAtBA,CAAA;WAyBA,QA1B4B;EAAA,CAhU7B,CAAA;;AAAA,EA4VA,WAAW,CAAC,SAAZ,GAAwB,SAAA,GAAA;AACvB,QAAA,kBAAA;AAAA,IAAA,MAAA,GAAS,EAAT,CAAA;AAAA,IACA,UAAA,GAAa,EADb,CAAA;AAAA,IAEA,oBAAoB,CAAC,IAArB,CAA0B,SAAC,IAAD,GAAA;AAEzB,MAAA,IAAG,CAAC,CAAC,CAAC,OAAF,CAAU,IAAI,CAAC,GAAL,CAAS,cAAT,CAAV,EAAqC,UAArC,CAAD,CAAA,KAAsD,CAAA,CAAzD;AACE,QAAA,UAAU,CAAC,IAAX,CAAgB,IAAI,CAAC,GAAL,CAAS,cAAT,CAAhB,CAAA,CAAA;eACA,MAAM,CAAC,IAAP,CACC;AAAA,UAAA,IAAA,EAAM,IAAI,CAAC,GAAL,CAAS,cAAT,CAAN;AAAA,UACA,MAAA,EAAQ,CAAC,CAAC,QAAF,CAAW,IAAI,CAAC,GAAL,CAAS,cAAT,CAAX,CADR;SADD,EAFF;OAFyB;IAAA,CAA1B,CAFA,CAAA;WASA,OAVuB;EAAA,CA5VxB,CAAA;;AAAA,EAwWA,WAAW,CAAC,gBAAZ,GAA+B,SAAA,GAAA;AAC9B,QAAA,uCAAA;AAAA,IAAA,MAAA,GAAS,EAAT,CAAA;AAAA,IACA,QAAA,GAAW,WAAW,CAAC,SAAZ,CAAA,CADX,CAAA;AAAA,IAEA,UAAA,GAAiB,IAAA,QAAQ,CAAC,UAAT,CAAoB,QAApB,CAFjB,CAAA;AAAA,IAGA,OAAO,CAAC,GAAR,CAAY,SAAA,GAAY,UAAU,CAAC,KAAX,CAAiB,IAAjB,CAAxB,CAHA,CAAA;AAAA,IAIA,CAAC,CAAC,IAAF,CAAO,WAAW,CAAC,QAAnB,EAA4B,SAAC,GAAD,EAAK,GAAL,GAAA;AAC3B,UAAA,aAAA;AAAA,MAAA,IAAG,GAAA,KAAO,cAAP,IAAyB,GAAA,KAAO,EAAnC;AACC,QAAA,OAAO,CAAC,GAAR,CAAY,GAAZ,CAAA,CAAA;AAAA,QACA,aAAA,GAAgB,GAAG,CAAC,KAAJ,CAAU,GAAV,CADhB,CAAA;eAEA,CAAC,CAAC,IAAF,CAAO,aAAP,EAAsB,SAAC,KAAD,EAAO,KAAP,GAAA;AACrB,UAAA,IAAG,KAAA,KAAS,EAAT,IAAe,GAAA,KAAO,cAAtB,IAAwC,CAAC,CAAC,OAAF,CAAU,KAAV,EAAgB,SAAhB,CAAA,GAA6B,CAAA,CAAxE;mBACC,MAAM,CAAC,IAAP,CAAY,CAAC,CAAC,QAAF,CAAW,KAAX,CAAZ,EADD;WADqB;QAAA,CAAtB,EAHD;OAD2B;IAAA,CAA5B,CAJA,CAAA;WAYA;AAAA,MAAC,QAAA,EAAW,MAAZ;MAb8B;EAAA,CAxW/B,CAAA;AAAA","file":"frontend/common/common.js","sourceRoot":"/source/","sourcesContent":["#No Found Controller and veiw\r\nclass CommonFloor.NothingFoundView extends Marionette.ItemView\r\n\t\r\n\ttemplate : '#noFound-template'\r\n\r\nclass CommonFloor.NothingFoundCtrl extends Marionette.RegionController\r\n\r\n\tinitialize:->\r\n\t\t@show new CommonFloor.NothingFoundView\r\n\r\n#No Found Controller and veiw\r\nclass CommonFloor.NoUnitsView extends Marionette.ItemView\r\n\t\r\n\ttemplate : '<div>\r\n\t\t\t\t\t<div class=\"col-xs-12 col-sm-12 col-md-3 us-left-content\">\r\n\t\t\t\t\t\t<div class=\"list-view-container w-map animated fadeIn\">\r\n\t\t\t\t\t\t\t<div class=\"text-center\" id=\"searchSorryPageWidget\">\r\n\t\t\t\t\t\t\t\t<div class=\"m-t-10 bldg-list\">\r\n\t\t\t\t\t\t\t\t\t<span class=\"icon-wondering\"></span>\r\n\t\t\t\t\t\t\t\t\t<div class=\"m-t-10\">Sorry! We havent found any properties matching your search.</div>\r\n\t\t\t\t\t\t\t\t\t<div>Please retry with different search options.</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>'\r\n\r\nclass CommonFloor.NoUnitsCtrl extends Marionette.RegionController\r\n\r\n\tinitialize:->\r\n\t\t@show new CommonFloor.NoUnitsView\r\n\r\n#api required to load second step\r\nCommonFloor.loadJSONData = ()->\r\n\r\n\t$.ajax\r\n\t\ttype : 'GET',\r\n\t\turl  : BASERESTURL+'/project/'+\tPROJECTID+'/step-two'\r\n\t\tasync : false\r\n\t\tsuccess :(response)->\r\n\r\n\t\t\t#parsing the integer fields \r\n\t\t\tresponse = window.convertToInt(response)\r\n\t\t\tresponse = response.data\r\n\t\t\tbunglowVariantCollection.setBunglowVariantAttributes(response.bunglow_variants)\r\n\t\t\tsettings.setSettingsAttributes(response.settings)\r\n\t\t\tunitTypeCollection.setUnitTypeAttributes(response.unit_types)\r\n\t\t\tbuildingCollection.setBuildingAttributes(response.buildings)\r\n\t\t\tapartmentVariantCollection.setApartmentVariantAttributes(response.apartment_variants)\r\n\t\t\tfloorLayoutCollection.setFloorLayoutAttributes(response.floor_layout)\r\n\t\t\twindow.propertyTypes = response.property_types\r\n\t\t\tplotVariantCollection.setPlotVariantAttributes(response.plot_variants)\r\n\t\t\tunitCollection.setUnitAttributes(response.units)\r\n\t\t\t\r\n\r\n\t\t\t\r\n\t\terror :(response)->\r\n\t\t\t@region =  new Marionette.Region el : '#noFound-template'\r\n\t\t\tnew CommonFloor.ProjectCtrl region : @region\r\n\t\t\t\r\n\r\n#find the property type with maximum number of units\r\nCommonFloor.propertyMaxUnits = ()->\r\n\tRouter = []\r\n\tRouter.push \r\n\t\t'type'  : 'bunglows'\r\n\t\t'count' :bunglowVariantCollection.getBunglowUnits()\r\n\tRouter.push \r\n\t\t'type'  : 'building'\r\n\t\t'count' :apartmentVariantCollection.getApartmentUnits()\r\n\tRouter.push \r\n\t\t'type'  : 'plot'\r\n\t\t'count' :plotVariantCollection.getPlotUnits()\r\n\t\r\n\tcontroller = _.max Router , (item)->\r\n\t\treturn parseInt item.count.length\r\n\r\n\tcontroller\t\r\n\r\n\t\r\n#function to load the default controller fro master view\r\nCommonFloor.checkPropertyType = ()->\r\n\tCommonFloor.loadJSONData()\r\n\tif Object.keys(project.get('project_master')).length  ==  0\r\n\t\tCommonFloor.navigate '#/list-view' , true\r\n\t\tCommonFloor.router.storeRoute()\r\n\telse\r\n\t\tCommonFloor.navigate '#/master-view' , true\r\n\t\tCommonFloor.router.storeRoute()\r\n\r\n#function to load the default controller for list view \r\nCommonFloor.checkListView = ()->\r\n\tcontroller = CommonFloor.propertyMaxUnits()\r\n\t#CommonFloor.navigate '#/list-view/'+controller.type , true\r\n\r\n\r\n#funtion to convert string into integers\r\nwindow.convertToInt = (response)->\r\n\t$.each response ,(index,value)->\r\n\t\t$.map(value,(item)->\r\n\r\n\t\t\t$.each item ,(ind,val)->\r\n\t\t\t\treturn parseInt val\r\n\t)\r\n\r\n#function to convert value into price format\r\nwindow.numDifferentiation = (val)->\r\n\tif (val >= 10000000) \r\n\t\tval = (val/10000000).toFixed(2) + ' Cr'\r\n\telse if (val >= 100000) \r\n\t\tval = (val/100000).toFixed(2) + ' Lac'\r\n\telse if(val >= 1000) \r\n\t\tval = (val/1000).toFixed(2) + ' K'\r\n\tval\r\n\t   \r\n\r\n#function to convert value into price format\t\t\r\nwindow.convertRupees = (val)->\r\n\r\n\t$('#price').autoNumeric('init')\r\n\t$('#price').autoNumeric('set', val)\r\n\r\n \r\n#Get all the property type with the count of units\r\nCommonFloor.propertyTypes = ()->\r\n\tRouter = []\r\n\tif bunglowVariantCollection.getBunglowUnits().length != 0\r\n\t\tRouter.push \r\n\t\t\t'type'  : s.capitalize 'villas'\r\n\t\t\t'count' :bunglowVariantCollection.getBunglowUnits()\r\n\tif buildingCollection.toArray().length != 0\r\n\t\tRouter.push \r\n\t\t\t'type'  : s.capitalize 'buildings'\r\n\t\t\t'count' :buildingCollection.toArray()\r\n\tif plotVariantCollection.getPlotUnits().length != 0\r\n\t\tRouter.push \r\n\t\t\t'type'  : s.capitalize 'plots'\r\n\t\t\t'count' :plotVariantCollection.getPlotUnits()\r\n\tcontroller = _.max Router , (item)->\r\n\t\treturn parseInt item.count.length\r\n\r\n\r\n\tRouter\r\n\r\nCommonFloor.applyVillaClasses = ()->\r\n\t$('.villa').each (ind,item)->\r\n\t\tid = parseInt item.id\r\n\t\tunit = unitCollection.findWhere \r\n\t\t\tid :  id \r\n\t\tif ! _.isUndefined unit \r\n\t\t\tavailability = unit.get('availability')\r\n\t\t\tavailability = s.decapitalize(availability)\r\n\t\t\t$('#'+id).attr('class' ,'layer villa '+availability)\r\n\r\n\r\nCommonFloor.applyPlotClasses = ()->\r\n\t$('.plot').each (ind,item)->\r\n\t\tid = parseInt item.id\r\n\t\tunit = unitCollection.findWhere \r\n\t\t\tid :  id \r\n\t\tif ! _.isUndefined unit \r\n\t\t\tavailability = unit.get('availability')\r\n\t\t\tavailability = s.decapitalize(availability)\r\n\t\t\t$('#'+id).attr('class' ,'layer plot '+availability)  \r\n\r\n\r\n\r\nCommonFloor.filter = ()->\r\n\t#check whether url contains any parameters\r\n\tif  window.location.href.indexOf('=') > -1\r\n\t\tparams = params\r\n\t\tparamsArray = params.split('&')\r\n\t\t#loop through all the parameters\r\n\t\tfor element,index in paramsArray\r\n\t\t\tparam_key = element.split('=')\r\n\t\t\tCommonFloor.defaults[param_key[0]] = param_key[1]\r\n\r\n\r\n\t\t#set the params with the filters selected by the user\r\n\t\tparams = 'unit_variant_id:'+CommonFloor.defaults['unitVariants']+'&unit_type_id:'+CommonFloor.defaults['unitTypes']+\r\n\t\t\t\t'&price_min:'+CommonFloor.defaults['price_min']+'price_max:'+CommonFloor.defaults['price_max']+\r\n\t\t\t\t'&availability:'+CommonFloor.defaults['availability']\r\n\telse\r\n\r\n\t\t#url doesnt contain any parameters take the value of the defaults\r\n\t\tparams = 'unit_variant_id:'+CommonFloor.defaults['unitVariants']+'&unit_type_id:'+CommonFloor.defaults['unitTypes']+\r\n\t\t\t\t'&price_min:'+CommonFloor.defaults['price_min']+'price_max:'+CommonFloor.defaults['price_max']+\r\n\t\t\t\t'&availability:'+CommonFloor.defaults['availability']\r\n\r\n\r\n\tparam_arr = params.split('&')\r\n\t$.each param_arr, (index,value)->\r\n\t\t\tvalue_arr  =  value.split(':')\r\n\t\t\tparam_key = value_arr[0]\r\n\t\t\tif param_key != 'price_min' && param_key != 'price_max' && value_arr[1] != \"\"\r\n\t\t\t\tparam_val = value_arr[1]\r\n\t\t\t\tparam_val_arr = param_val.split(',')\r\n\t\t\t\tcollection = []\r\n\t\t\t\t$.each param_val_arr, (index,value)->\r\n\t\t\t\t\t\tparamkey = {}\r\n\t\t\t\t\t\tparamkey[param_key] = parseInt(value)\r\n\t\t\t\t\t\tif param_key == 'availability'\r\n\t\t\t\t\t\t\tparamkey[param_key] = value\r\n\t\t\t\t\t\t$.merge collection, unitCollection.where paramkey\r\n\t\t\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tunitCollection.reset collection\r\n\tCommonFloor.filterBudget()\r\n   \r\n\tCommonFloor.resetCollections()\r\n\r\nCommonFloor.resetCollections = ()->\r\n\tapartments = []\r\n\tbunglows   = []\r\n\tunitTypes = []\r\n\tplots = []\r\n\tbuildings = []\r\n\tunitCollection.each (item)->\r\n\t\tunitType = unitTypeMasterCollection.findWhere\r\n\t\t\t\t\t\t\t'id' :  item.get('unit_type_id')\r\n\t\tif item.get('building_id') != 0 \r\n\t\t\tbuilding = buildingMasterCollection.findWhere\r\n\t\t\t\t\t\t'id' : item.get('building_id')\r\n\t\t\tbuildings.push building\r\n\t\tproperty = window.propertyTypes[unitType.get('property_type_id')]\r\n\t\tif s.decapitalize(property) == 'apartments' || s.decapitalize(property) == 'penthouse'\r\n\t\t\tapartments.push apartmentVariantMasterCollection.get(item.get('unit_variant_id'))\r\n\t\tif s.decapitalize(property) == 'villas/Bungalows'\r\n\t\t\tbunglows.push bunglowVariantMasterCollection.get(item.get('unit_variant_id'))\r\n\t\tif s.decapitalize(property) == 'plot'\r\n\t\t\tplots.push plotVariantMasterCollection.get(item.get('unit_variant_id'))\r\n\t\tunitTypes.push unitType\r\n\t\t\r\n\tapartmentVariantCollection.reset apartments\r\n\tbunglowVariantCollection.reset bunglows\r\n\tplotVariantCollection.reset plots\r\n\tunitTypeCollection.reset unitTypes\r\n\tbuildingCollection.reset buildings\r\n\tunitTempCollection.reset unitCollection.toArray()\r\n\t\r\n\r\nCommonFloor.filterBudget = ()->\r\n\tCommonFloor.resetCollections()\r\n\tbudget = []\r\n\tunitCollection.each (item)->\r\n\t\tunitPrice = window.unit.getUnitDetails(item.get('id'))[3]\r\n\t\tif unitPrice >= parseInt(CommonFloor.defaults['price_min']) && unitPrice <= parseInt(CommonFloor.defaults['price_max'])\r\n\t\t\tbudget.push item\r\n\r\n\tunitCollection.reset budget\r\n\r\nCommonFloor.getFilters = ()->\r\n\tvillafilters = CommonFloor.getVillaFilters()\r\n\taptfilters = CommonFloor.getApartmentFilters()\r\n\tplotfilters = CommonFloor.getPlotFilters()\r\n\tif CommonFloor.defaults['price_min'] != 0\r\n\t\tmin = CommonFloor.defaults['price_min']\r\n\tfilters = {'Villa' : villafilters\r\n\t\t\t\t,'Apartment/Penthouse' : aptfilters\r\n\t\t\t\t,'Plot'\t\t\t\t: plotfilters}\r\n\t\r\n\tfilters\t\r\n\t\t\t\r\nCommonFloor.getVillaFilters = ()->\r\n\tunitVariants = []\r\n\tunit_variant = ''\r\n\tunitTypes = []\r\n\tunit_type = ''\r\n\tstatus = []\r\n\t$.each CommonFloor.defaults,(ind,val)->\r\n\t\tif ind != 'price_min' && ind != 'price_max' && val != \"\"\r\n\t\t\tparam_val_arr = val.split(',')\r\n\t\t\t$.each param_val_arr, (index,value)->\r\n\t\t\t\tif value != \"\" && ind == 'unitVariants'\r\n\t\t\t\t\tif ! _.isUndefined bunglowVariantMasterCollection.get(parseInt(value))\r\n\t\t\t\t\t\tunit_variant = bunglowVariantMasterCollection.findWhere\r\n\t\t\t\t\t\t\t\t\t'id' : parseInt value\r\n\t\t\t\t\t\tunitVariants.push unit_variant.get 'unit_variant_name'\r\n\t\t\t\tif value != \"\" && ind == 'unitTypes' && $.inArray(parseInt(value),bunglowVariantMasterCollection.getVillaUnitTypes()) > -1\r\n\t\t\t\t\tunit_type = unitTypeMasterCollection.findWhere\r\n\t\t\t\t\t\t\t\t\t'id' : parseInt value\r\n\r\n\t\t\t\t\tunitTypes.push unit_type.get 'name'\r\n\r\n\tconsole.log unitTypes\t\r\n\tfilters = {'unitVariants' : unitVariants,'unitTypes': unitTypes\r\n\t\t\t,'count': bunglowVariantMasterCollection.getBunglowUnits().length}\r\n\t$.each filters,(index,value)->\r\n\t\tif value.length == 0\r\n\t\t\tfilters = _.omit(filters, index) \r\n\tfilters\r\n\r\nCommonFloor.getApartmentFilters = ()->\r\n\tunitVariants = []\r\n\tunit_variant = ''\r\n\tunitTypes = []\r\n\tunit_type = ''\r\n\tstatus = []\r\n\t$.each CommonFloor.defaults,(ind,val)->\r\n\t\tif ind != 'price_min' && ind != 'price_max' && val != \"\"\r\n\t\t\tparam_val_arr = val.split(',')\r\n\t\t\t$.each param_val_arr, (index,value)->\r\n\t\t\t\tif value != \"\" && ind == 'unitVariants'\r\n\t\t\t\t\tif !_.isUndefined apartmentVariantMasterCollection.get(parseInt(value))\r\n\t\t\t\t\t\tunit_variant = apartmentVariantMasterCollection.findWhere\r\n\t\t\t\t\t\t\t\t\t'id' : parseInt value\r\n\r\n\t\t\t\t\t\tunitVariants.push unit_variant.get 'unit_variant_name'\r\n\t\t\t\tif value != \"\" && ind == 'unitTypes' && $.inArray(parseInt(value),apartmentVariantMasterCollection.getApartmentUnitTypes()) > -1\r\n\t\t\t\t\tunit_type = unitTypeMasterCollection.findWhere\r\n\t\t\t\t\t\t\t\t\t'id' : parseInt value\r\n\r\n\t\t\t\t\tunitTypes.push unit_type.get 'name'\r\n\t\t\r\n\tfilters = {'unitVariants' : unitVariants,'unitTypes': unitTypes \r\n\t\t\t\t,'count': apartmentVariantMasterCollection.getApartmentUnits().length}\r\n\t$.each filters,(index,value)->\r\n\t\tif value.length == 0\r\n\t\t\tfilters = _.omit(filters, index) \r\n\tfilters\r\n\r\nCommonFloor.getPlotFilters = ()->\r\n\tunitVariants = []\r\n\tunit_variant = ''\r\n\tunitTypes = []\r\n\tunit_type = ''\r\n\tstatus = []\r\n\t$.each CommonFloor.defaults,(ind,val)->\r\n\t\tif ind != 'price_min' && ind != 'price_max' && val != \"\"\r\n\t\t\tparam_val_arr = val.split(',')\r\n\t\t\t$.each param_val_arr, (index,value)->\r\n\t\t\t\tif value != \"\" && ind == 'unitVariants'\r\n\t\t\t\t\tif !_.isUndefined plotVariantMasterCollection.get(parseInt(value))\r\n\t\t\t\t\t\tunit_variant = plotVariantMasterCollection.findWhere\r\n\t\t\t\t\t\t\t\t\t'id' : parseInt value\r\n\t\t\t\t\t\tunitVariants.push unit_variant.get 'unit_variant_name'\r\n\t\t\t\tif value != \"\" && ind == 'unitTypes' && $.inArray(parseInt(value),plotVariantMasterCollection.getPlotUnitTypes()) > -1\r\n\t\t\t\t\tunit_type = unitTypeMasterCollection.findWhere\r\n\t\t\t\t\t\t\t\t\t'id' : parseInt value\r\n\r\n\t\t\t\t\tunitTypes.push unit_type.get 'name'\r\n\t\t\r\n\tfilters = {'unitVariants' : unitVariants,'unitTypes': unitTypes \r\n\t\t\t\t,'count': plotVariantMasterCollection.getPlotUnits().length}\r\n\t$.each filters,(index,value)->\r\n\t\tif value.length == 0\r\n\t\t\tfilters = _.omit(filters, index) \r\n\tfilters\r\n\r\nCommonFloor.getStatus = ()->\r\n\tstatus = []\r\n\tstatus_arr = []\r\n\tunitMasterCollection.each (item)->\r\n\r\n\t\tif ($.inArray item.get('availability') , status_arr) ==  -1\r\n\t\t\t\tstatus_arr.push item.get 'availability'\r\n\t\t\t\tstatus.push \r\n\t\t\t\t\t'id': item.get 'availability'\r\n\t\t\t\t\t'name': s.humanize item.get 'availability'\r\n\tstatus\r\n\r\nCommonFloor.getStatusFilters = ()->\r\n\tstatus = []\r\n\tresponse = CommonFloor.getStatus()\r\n\tstatusColl = new Backbone.Collection response\r\n\tconsole.log statusIds = statusColl.pluck 'id'\r\n\t$.each CommonFloor.defaults,(ind,val)->\r\n\t\tif ind == 'availability' && val != \"\"\r\n\t\t\tconsole.log val\r\n\t\t\tparam_val_arr = val.split(',')\r\n\t\t\t$.each param_val_arr, (index,value)->\r\n\t\t\t\tif value != \"\" && ind == 'availability' && $.inArray(value,statusIds) > -1\r\n\t\t\t\t\tstatus.push s.humanize value\r\n\r\n\t{'status' : status}"]}