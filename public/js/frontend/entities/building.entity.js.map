{"version":3,"sources":["frontend/entities/building.entity.coffee"],"names":[],"mappings":"AACA;AAAA,MAAA,4BAAA;IAAA;+BAAA;;AAAA,EAAM;AAIL,gCAAA,CAAA;;;;KAAA;;AAAA,uBAAA,gBAAA,GAAiB,SAAC,WAAD,GAAA;AAEhB,UAAA,0CAAA;AAAA,MAAA,QAAA,GAAW,EAAX,CAAA;AACA,MAAA,IAAG,WAAA,KAAe,EAAlB;AACC,eAAO,QAAP,CADD;OADA;AAAA,MAGA,YAAA,GAAgB,QAAQ,CAAC,GAAT,CAAa,QAAb,CAHhB,CAAA;AAAA,MAIA,UAAA,GAAiB,IAAA,QAAQ,CAAC,UAAT,CAAoB,YAApB,CAJjB,CAAA;AAAA,MAKA,MAAA,GAAU,UAAU,CAAC,SAAX,CAAqB;AAAA,QAAC,MAAA,EAAS,WAAV;OAArB,CALV,CAAA;AAAA,MAMA,0BAA0B,CAAC,IAA3B,CAAgC,SAAE,IAAF,GAAA;AAC/B,YAAA,KAAA;AAAA,QAAA,KAAA,GAAQ,cAAc,CAAC,KAAf,CAAqB;AAAA,UAAC,cAAA,EAAe,QAAA,CAAS,IAAI,CAAC,GAAL,CAAS,IAAT,CAAT,CAAhB;AAAA,UAC3B,aAAA,EAAc,QAAA,CAAS,WAAT,CADa;AAAA,UAE3B,QAAA,EAAS,QAAA,CAAS,MAAM,CAAC,GAAP,CAAW,IAAX,CAAT,CAFkB;SAArB,CAAR,CAAA;eAIA,QAAQ,CAAC,IAAT,CAAc;AAAA,UAAC,EAAA,EAAG,IAAI,CAAC,GAAL,CAAS,IAAT,CAAJ;AAAA,UACZ,IAAA,EAAK,IAAI,CAAC,GAAL,CAAS,MAAT,CADO;AAAA,UAEZ,KAAA,EAAM,KAAK,CAAC,MAFA;SAAd,EAL+B;MAAA,CAAhC,CANA,CAAA;aAgBA,SAlBgB;IAAA,CAAjB,CAAA;;AAAA,uBAqBA,iBAAA,GAAkB,SAAC,UAAD,GAAA;AACjB,UAAA,6BAAA;AAAA,MAAA,aAAA,GAAgB,kBAAkB,CAAC,SAAnB,CAA6B;AAAA,QAAC,aAAA,EAAc,QAAA,CAAS,UAAT,CAAf;OAA7B,CAAhB,CAAA;AACA,MAAA,IAAG,UAAA,KAAc,EAAjB;AACC,eAAO,KAAP,CADD;OADA;AAAA,MAGA,cAAA,GAAiB,aAAa,CAAC,GAAd,CAAkB,aAAlB,CAAgC,CAAC,KAAK,CAAC,MAHxD,CAAA;AAIA,MAAA,IAAG,QAAA,CAAS,cAAT,CAAA,IAA4B,CAA/B;AACC,QAAA,aAAa,CAAC,GAAd,CAAkB,UAAlB,EAA+B,KAA/B,CAAA,CADD;OAAA,MAAA;AAGC,QAAA,aAAa,CAAC,GAAd,CAAkB,UAAlB,EAA+B,IAA/B,CAAA,CAHD;OAJA;aASA,aAAa,CAAC,GAAd,CAAkB,UAAlB,EAViB;IAAA,CArBlB,CAAA;;oBAAA;;KAJsB,QAAQ,CAAC,MAAhC,CAAA;;AAAA,EAwCM;AACL,0CAAA,CAAA;;;;KAAA;;AAAA,iCAAA,KAAA,GAAQ,QAAR,CAAA;;AAAA,iCAEA,GAAA,GAAM,SAAA,GAAA;aACL,uEADK;IAAA,CAFN,CAAA;;AAAA,iCAOA,qBAAA,GAAsB,SAAC,IAAD,GAAA;aAIrB,kBAAkB,CAAC,KAAnB,CAAyB,IAAzB,EAJqB;IAAA,CAPtB,CAAA;;8BAAA;;KADgC,QAAQ,CAAC,WAxC1C,CAAA;;AAAA,EAsDA,MAAM,CAAC,kBAAP,GAA6B,GAAA,CAAA,kBAtD7B,CAAA;AAAA","file":"frontend/entities/building.entity.js","sourceRoot":"/source/","sourcesContent":["#Building model and Building collection Definition\r\nclass Building extends Backbone.Model\r\n\r\n\r\n\t#Count the number of units for each unit type in a building\r\n\tgetUnitTypecount:(building_id)->\r\n\r\n\t\tresponse = []\r\n\t\tif building_id == \"\"\r\n\t\t\treturn response\r\n\t\tstatusObject  = settings.get 'status'\r\n\t\tstatusColl = new Backbone.Collection statusObject\r\n\t\tstatus  = statusColl.findWhere({'name' : 'Available'})\r\n\t\tapartmentVariantCollection.each ( item)->\r\n\t\t\tunits = unitCollection.where({'unit_variant':parseInt(item.get('id'))\r\n\t\t\t\t,'building_id':parseInt(building_id)\r\n\t\t\t\t,'status':parseInt(status.get('id'))});\r\n\r\n\t\t\tresponse.push({id:item.get('id')\r\n\t\t\t\t,name:item.get('name')\r\n\t\t\t\t,count:units.length})\r\n\r\n\t\r\n\t\tresponse\r\n\r\n\t#check 3d rotation view available or not\r\n\tcheckRotationView:(buildingId)->\r\n\t\tbuildingModel = buildingCollection.findWhere({'building_id':parseInt(buildingId)})\r\n\t\tif buildingId == \"\"\r\n\t\t\treturn false\r\n\t\trotationImages = buildingModel.get('threed_view').image.length\r\n\t\tif parseInt(rotationImages) >= 4\r\n\t\t\tbuildingModel.set 'rotation' , 'yes'\r\n\t\telse\r\n\t\t\tbuildingModel.set 'rotation' , 'no'\r\n\r\n\t\tbuildingModel.get('rotation')\r\n\r\n\r\n\r\n\r\nclass BuildingCollection extends Backbone.Collection\r\n\tmodel : Building\r\n\t#url to fetch building data\r\n\turl : ->\r\n\t\t\"http://commonfloor.local/methods/functions.php?action=load_buildings\"\r\n\r\n\t#set the attributes of a building model\r\n\t# if blank,fetch it from the server with the url mentioned above.\r\n\tsetBuildingAttributes:(data)->\r\n\r\n\t\t# @set buildingData\r\n\t\t\r\n\t\tbuildingCollection.reset data\r\n\r\nwindow.buildingCollection  = new BuildingCollection;"]}