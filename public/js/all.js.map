{"version":3,"sources":["frontend/app.js","frontend/application.js","frontend/router.js","frontend/header/header.controller.js","frontend/header/header.view.js","frontend/screen-one/project.controller.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACPA;AACA;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"all.js","sourcesContent":["_.extend(Marionette.Application.prototype, {\n  appStates: {\n    'header': {\n      url: '/'\n    },\n    'project': {\n      url: 'project',\n      parent: 'header',\n      sections: {\n        'top': {\n          ctrl: 'TopCtrl'\n        },\n        'left': {\n          ctrl: 'LeftCtrl'\n        }\n      }\n    }\n  },\n  getCurrentRoute: function() {\n    return Backbone.history.getFragment();\n  },\n  state: function(name, def) {\n    if (def == null) {\n      def = {};\n    }\n    this.appStates[name] = def;\n    return this;\n  },\n  _registerStates: function() {\n    Marionette.RegionControllers.prototype.controllers = this;\n    _.extend(Marionette.AppStates.prototype, {\n      appStates: this.appStates\n    });\n    return this.router = new Marionette.AppStates({\n      app: CommonFloor\n    });\n  },\n  start: function(options) {\n    if (options == null) {\n      options = {};\n    }\n    this._detectRegions();\n    this.triggerMethod('before:start', options);\n    this._registerStates();\n    this._initCallbacks.run(options, this);\n    return this.triggerMethod('start', options);\n  }\n});\n","jQuery(document).ready(function($) {});\n\nCommonFloor.addInitializer(function() {\n  return Backbone.history.start();\n});\n\nCommonFloor.start();\n","\n","var HeaderView,\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;\n\nHeaderView = (function(superClass) {\n  extend(HeaderView, superClass);\n\n  function HeaderView() {\n    return HeaderView.__super__.constructor.apply(this, arguments);\n  }\n\n  HeaderView.prototype.template = '#header-template';\n\n  HeaderView.prototype.onShow = function() {\n    return console.log('view');\n  };\n\n  return HeaderView;\n\n})(Marionette.ItemView);\n\nCommonFloor.HeaderCtrl = (function(superClass) {\n  extend(HeaderCtrl, superClass);\n\n  function HeaderCtrl() {\n    return HeaderCtrl.__super__.constructor.apply(this, arguments);\n  }\n\n  HeaderCtrl.prototype.initialize = function(options) {\n    console.log(\"aaaaaaaaa\");\n    return this.show(new HeaderView());\n  };\n\n  return HeaderCtrl;\n\n})(Marionette.RegionController);\n","var HeaderView,\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;\n\nHeaderView = (function(superClass) {\n  extend(HeaderView, superClass);\n\n  function HeaderView() {\n    return HeaderView.__super__.constructor.apply(this, arguments);\n  }\n\n  HeaderView.prototype.template = '<li>hello</li>';\n\n  HeaderView.prototype.onShow = function() {\n    return console.log('view');\n  };\n\n  return HeaderView;\n\n})(Marionette.ItemView);\n","var LeftView, ProjectLayoutView, TopView,\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;\n\nProjectLayoutView = (function(superClass) {\n  extend(ProjectLayoutView, superClass);\n\n  function ProjectLayoutView() {\n    return ProjectLayoutView.__super__.constructor.apply(this, arguments);\n  }\n\n  ProjectLayoutView.prototype.template = '#project-template';\n\n  return ProjectLayoutView;\n\n})(Marionette.LayoutView);\n\nCommonFloor.ProjectCtrl = (function(superClass) {\n  extend(ProjectCtrl, superClass);\n\n  function ProjectCtrl() {\n    return ProjectCtrl.__super__.constructor.apply(this, arguments);\n  }\n\n  ProjectCtrl.prototype.initialize = function() {\n    console.log(\"aaaaaaaa\");\n    return this.show(new ProjectLayoutView);\n  };\n\n  return ProjectCtrl;\n\n})(Marionette.RegionController);\n\nTopView = (function(superClass) {\n  extend(TopView, superClass);\n\n  function TopView() {\n    return TopView.__super__.constructor.apply(this, arguments);\n  }\n\n  TopView.prototype.template = '<li>top</li>';\n\n  return TopView;\n\n})(Marionette.ItemView);\n\nCommonFloor.TopCtrl = (function(superClass) {\n  extend(TopCtrl, superClass);\n\n  function TopCtrl() {\n    return TopCtrl.__super__.constructor.apply(this, arguments);\n  }\n\n  TopCtrl.prototype.initialize = function() {\n    return this.show(new TopView);\n  };\n\n  return TopCtrl;\n\n})(Marionette.RegionController);\n\nLeftView = (function(superClass) {\n  extend(LeftView, superClass);\n\n  function LeftView() {\n    return LeftView.__super__.constructor.apply(this, arguments);\n  }\n\n  LeftView.prototype.template = '<li>left</li>';\n\n  return LeftView;\n\n})(Marionette.ItemView);\n\nCommonFloor.LeftCtrl = (function(superClass) {\n  extend(LeftCtrl, superClass);\n\n  function LeftCtrl() {\n    return LeftCtrl.__super__.constructor.apply(this, arguments);\n  }\n\n  LeftCtrl.prototype.initialize = function() {\n    return this.show(new LeftView);\n  };\n\n  return LeftCtrl;\n\n})(Marionette.RegionController);\n"],"sourceRoot":"/source/"}